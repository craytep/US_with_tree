
transwadc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007434  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800760c  0800760c  0001760c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007678  08007678  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007680  08007680  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007680  08007680  00017680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007684  08007684  00017684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08007688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001dc44  2000002c  080076b4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001dc70  080076b4  0002dc70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001863c  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003082  00000000  00000000  00038698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0003b720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  0003cb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f4d  00000000  00000000  0003de88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151d8  00000000  00000000  00065dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102334  00000000  00000000  0007afad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017d2e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055bc  00000000  00000000  0017d334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080075f4 	.word	0x080075f4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	080075f4 	.word	0x080075f4

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b96e 	b.w	800051c <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	4604      	mov	r4, r0
 8000260:	468c      	mov	ip, r1
 8000262:	2b00      	cmp	r3, #0
 8000264:	f040 8083 	bne.w	800036e <__udivmoddi4+0x116>
 8000268:	428a      	cmp	r2, r1
 800026a:	4617      	mov	r7, r2
 800026c:	d947      	bls.n	80002fe <__udivmoddi4+0xa6>
 800026e:	fab2 f282 	clz	r2, r2
 8000272:	b142      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000274:	f1c2 0020 	rsb	r0, r2, #32
 8000278:	fa24 f000 	lsr.w	r0, r4, r0
 800027c:	4091      	lsls	r1, r2
 800027e:	4097      	lsls	r7, r2
 8000280:	ea40 0c01 	orr.w	ip, r0, r1
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028a:	0c23      	lsrs	r3, r4, #16
 800028c:	fbbc f6f8 	udiv	r6, ip, r8
 8000290:	fa1f fe87 	uxth.w	lr, r7
 8000294:	fb08 c116 	mls	r1, r8, r6, ip
 8000298:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029c:	fb06 f10e 	mul.w	r1, r6, lr
 80002a0:	4299      	cmp	r1, r3
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x60>
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002aa:	f080 8119 	bcs.w	80004e0 <__udivmoddi4+0x288>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 8116 	bls.w	80004e0 <__udivmoddi4+0x288>
 80002b4:	3e02      	subs	r6, #2
 80002b6:	443b      	add	r3, r7
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c0:	fb08 3310 	mls	r3, r8, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002cc:	45a6      	cmp	lr, r4
 80002ce:	d909      	bls.n	80002e4 <__udivmoddi4+0x8c>
 80002d0:	193c      	adds	r4, r7, r4
 80002d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d6:	f080 8105 	bcs.w	80004e4 <__udivmoddi4+0x28c>
 80002da:	45a6      	cmp	lr, r4
 80002dc:	f240 8102 	bls.w	80004e4 <__udivmoddi4+0x28c>
 80002e0:	3802      	subs	r0, #2
 80002e2:	443c      	add	r4, r7
 80002e4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e8:	eba4 040e 	sub.w	r4, r4, lr
 80002ec:	2600      	movs	r6, #0
 80002ee:	b11d      	cbz	r5, 80002f8 <__udivmoddi4+0xa0>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c5 4300 	strd	r4, r3, [r5]
 80002f8:	4631      	mov	r1, r6
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xaa>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	2a00      	cmp	r2, #0
 8000308:	d150      	bne.n	80003ac <__udivmoddi4+0x154>
 800030a:	1bcb      	subs	r3, r1, r7
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	2601      	movs	r6, #1
 8000316:	fbb3 fcfe 	udiv	ip, r3, lr
 800031a:	0c21      	lsrs	r1, r4, #16
 800031c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000320:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000324:	fb08 f30c 	mul.w	r3, r8, ip
 8000328:	428b      	cmp	r3, r1
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0xe4>
 800032c:	1879      	adds	r1, r7, r1
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0xe2>
 8000334:	428b      	cmp	r3, r1
 8000336:	f200 80e9 	bhi.w	800050c <__udivmoddi4+0x2b4>
 800033a:	4684      	mov	ip, r0
 800033c:	1ac9      	subs	r1, r1, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1110 	mls	r1, lr, r0, r1
 8000348:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x10c>
 8000354:	193c      	adds	r4, r7, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x10a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80d9 	bhi.w	8000514 <__udivmoddi4+0x2bc>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e7bf      	b.n	80002ee <__udivmoddi4+0x96>
 800036e:	428b      	cmp	r3, r1
 8000370:	d909      	bls.n	8000386 <__udivmoddi4+0x12e>
 8000372:	2d00      	cmp	r5, #0
 8000374:	f000 80b1 	beq.w	80004da <__udivmoddi4+0x282>
 8000378:	2600      	movs	r6, #0
 800037a:	e9c5 0100 	strd	r0, r1, [r5]
 800037e:	4630      	mov	r0, r6
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	fab3 f683 	clz	r6, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d14a      	bne.n	8000424 <__udivmoddi4+0x1cc>
 800038e:	428b      	cmp	r3, r1
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0x140>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 80b8 	bhi.w	8000508 <__udivmoddi4+0x2b0>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb61 0103 	sbc.w	r1, r1, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	468c      	mov	ip, r1
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0a8      	beq.n	80002f8 <__udivmoddi4+0xa0>
 80003a6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0xa0>
 80003ac:	f1c2 0320 	rsb	r3, r2, #32
 80003b0:	fa20 f603 	lsr.w	r6, r0, r3
 80003b4:	4097      	lsls	r7, r2
 80003b6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003be:	40d9      	lsrs	r1, r3
 80003c0:	4330      	orrs	r0, r6
 80003c2:	0c03      	lsrs	r3, r0, #16
 80003c4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d4:	fb06 f108 	mul.w	r1, r6, r8
 80003d8:	4299      	cmp	r1, r3
 80003da:	fa04 f402 	lsl.w	r4, r4, r2
 80003de:	d909      	bls.n	80003f4 <__udivmoddi4+0x19c>
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003e6:	f080 808d 	bcs.w	8000504 <__udivmoddi4+0x2ac>
 80003ea:	4299      	cmp	r1, r3
 80003ec:	f240 808a 	bls.w	8000504 <__udivmoddi4+0x2ac>
 80003f0:	3e02      	subs	r6, #2
 80003f2:	443b      	add	r3, r7
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	b281      	uxth	r1, r0
 80003f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000400:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000404:	fb00 f308 	mul.w	r3, r0, r8
 8000408:	428b      	cmp	r3, r1
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x1c4>
 800040c:	1879      	adds	r1, r7, r1
 800040e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000412:	d273      	bcs.n	80004fc <__udivmoddi4+0x2a4>
 8000414:	428b      	cmp	r3, r1
 8000416:	d971      	bls.n	80004fc <__udivmoddi4+0x2a4>
 8000418:	3802      	subs	r0, #2
 800041a:	4439      	add	r1, r7
 800041c:	1acb      	subs	r3, r1, r3
 800041e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000422:	e778      	b.n	8000316 <__udivmoddi4+0xbe>
 8000424:	f1c6 0c20 	rsb	ip, r6, #32
 8000428:	fa03 f406 	lsl.w	r4, r3, r6
 800042c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000430:	431c      	orrs	r4, r3
 8000432:	fa20 f70c 	lsr.w	r7, r0, ip
 8000436:	fa01 f306 	lsl.w	r3, r1, r6
 800043a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800043e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000442:	431f      	orrs	r7, r3
 8000444:	0c3b      	lsrs	r3, r7, #16
 8000446:	fbb1 f9fe 	udiv	r9, r1, lr
 800044a:	fa1f f884 	uxth.w	r8, r4
 800044e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000452:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000456:	fb09 fa08 	mul.w	sl, r9, r8
 800045a:	458a      	cmp	sl, r1
 800045c:	fa02 f206 	lsl.w	r2, r2, r6
 8000460:	fa00 f306 	lsl.w	r3, r0, r6
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x220>
 8000466:	1861      	adds	r1, r4, r1
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d248      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 800046e:	458a      	cmp	sl, r1
 8000470:	d946      	bls.n	8000500 <__udivmoddi4+0x2a8>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	4421      	add	r1, r4
 8000478:	eba1 010a 	sub.w	r1, r1, sl
 800047c:	b2bf      	uxth	r7, r7
 800047e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000482:	fb0e 1110 	mls	r1, lr, r0, r1
 8000486:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45b8      	cmp	r8, r7
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x24a>
 8000492:	19e7      	adds	r7, r4, r7
 8000494:	f100 31ff 	add.w	r1, r0, #4294967295
 8000498:	d22e      	bcs.n	80004f8 <__udivmoddi4+0x2a0>
 800049a:	45b8      	cmp	r8, r7
 800049c:	d92c      	bls.n	80004f8 <__udivmoddi4+0x2a0>
 800049e:	3802      	subs	r0, #2
 80004a0:	4427      	add	r7, r4
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba7 0708 	sub.w	r7, r7, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454f      	cmp	r7, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	4649      	mov	r1, r9
 80004b4:	d31a      	bcc.n	80004ec <__udivmoddi4+0x294>
 80004b6:	d017      	beq.n	80004e8 <__udivmoddi4+0x290>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x27a>
 80004ba:	ebb3 020e 	subs.w	r2, r3, lr
 80004be:	eb67 0701 	sbc.w	r7, r7, r1
 80004c2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004c6:	40f2      	lsrs	r2, r6
 80004c8:	ea4c 0202 	orr.w	r2, ip, r2
 80004cc:	40f7      	lsrs	r7, r6
 80004ce:	e9c5 2700 	strd	r2, r7, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e70b      	b.n	80002f8 <__udivmoddi4+0xa0>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0x60>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6fd      	b.n	80002e4 <__udivmoddi4+0x8c>
 80004e8:	4543      	cmp	r3, r8
 80004ea:	d2e5      	bcs.n	80004b8 <__udivmoddi4+0x260>
 80004ec:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f0:	eb69 0104 	sbc.w	r1, r9, r4
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7df      	b.n	80004b8 <__udivmoddi4+0x260>
 80004f8:	4608      	mov	r0, r1
 80004fa:	e7d2      	b.n	80004a2 <__udivmoddi4+0x24a>
 80004fc:	4660      	mov	r0, ip
 80004fe:	e78d      	b.n	800041c <__udivmoddi4+0x1c4>
 8000500:	4681      	mov	r9, r0
 8000502:	e7b9      	b.n	8000478 <__udivmoddi4+0x220>
 8000504:	4666      	mov	r6, ip
 8000506:	e775      	b.n	80003f4 <__udivmoddi4+0x19c>
 8000508:	4630      	mov	r0, r6
 800050a:	e74a      	b.n	80003a2 <__udivmoddi4+0x14a>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	4439      	add	r1, r7
 8000512:	e713      	b.n	800033c <__udivmoddi4+0xe4>
 8000514:	3802      	subs	r0, #2
 8000516:	443c      	add	r4, r7
 8000518:	e724      	b.n	8000364 <__udivmoddi4+0x10c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b098      	sub	sp, #96	; 0x60
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000526:	f001 fc6c 	bl	8001e02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052a:	f000 f8d5 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052e:	f000 fc6d 	bl	8000e0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000532:	f000 fc1d 	bl	8000d70 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000536:	f000 fa73 	bl	8000a20 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 800053a:	f000 fb07 	bl	8000b4c <MX_USART3_UART_Init>
  MX_OPAMP3_Init();
 800053e:	f000 fb51 	bl	8000be4 <MX_OPAMP3_Init>
  MX_ADC2_Init();
 8000542:	f000 f93b 	bl	80007bc <MX_ADC2_Init>
  MX_OPAMP6_Init();
 8000546:	f000 fba9 	bl	8000c9c <MX_OPAMP6_Init>
  MX_ADC4_Init();
 800054a:	f000 f99d 	bl	8000888 <MX_ADC4_Init>
  MX_USART1_UART_Init();
 800054e:	f000 fab1 	bl	8000ab4 <MX_USART1_UART_Init>
  MX_ADC5_Init();
 8000552:	f000 f9ff 	bl	8000954 <MX_ADC5_Init>
  MX_OPAMP5_Init();
 8000556:	f000 fb73 	bl	8000c40 <MX_OPAMP5_Init>
  MX_SPI2_Init();
 800055a:	f000 fbcb 	bl	8000cf4 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800055e:	217f      	movs	r1, #127	; 0x7f
 8000560:	484f      	ldr	r0, [pc, #316]	; (80006a0 <main+0x180>)
 8000562:	f003 fb05 	bl	8003b70 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000566:	217f      	movs	r1, #127	; 0x7f
 8000568:	484e      	ldr	r0, [pc, #312]	; (80006a4 <main+0x184>)
 800056a:	f003 fb01 	bl	8003b70 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 800056e:	217f      	movs	r1, #127	; 0x7f
 8000570:	484d      	ldr	r0, [pc, #308]	; (80006a8 <main+0x188>)
 8000572:	f003 fafd 	bl	8003b70 <HAL_ADCEx_Calibration_Start>
	HAL_OPAMP_Start(&hopamp6);
 8000576:	484d      	ldr	r0, [pc, #308]	; (80006ac <main+0x18c>)
 8000578:	f004 fb28 	bl	8004bcc <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 800057c:	484c      	ldr	r0, [pc, #304]	; (80006b0 <main+0x190>)
 800057e:	f004 fb25 	bl	8004bcc <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp5);
 8000582:	484c      	ldr	r0, [pc, #304]	; (80006b4 <main+0x194>)
 8000584:	f004 fb22 	bl	8004bcc <HAL_OPAMP_Start>
	//HAL_UART_Transmit(&hlpuart1, (uint8_t*) "salam\r\n", strlen("salam\r\n"),1);
	DWT_Init();
 8000588:	f000 fd20 	bl	8000fcc <DWT_Init>
	const uint64_t pipe1 = 0xE8E8F0F0E2LL;
 800058c:	a342      	add	r3, pc, #264	; (adr r3, 8000698 <main+0x178>)
 800058e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000592:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	NRF_Init();
 8000596:	f000 fea1 	bl	80012dc <NRF_Init>
	enableAckPayload();
 800059a:	f000 ffcb 	bl	8001534 <enableAckPayload>
	//setAutoAck(false);
	//setPayloadSize(6);
	setChannel(0x73);
 800059e:	2073      	movs	r0, #115	; 0x73
 80005a0:	f000 fe8e 	bl	80012c0 <setChannel>
	openWritingPipe(pipe1);
 80005a4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80005a8:	f000 ff82 	bl	80014b0 <openWritingPipe>

	uint8_t nrf_data[32] = {88,86,97,}; // буфер указываем максимального размера
 80005ac:	4b42      	ldr	r3, [pc, #264]	; (80006b8 <main+0x198>)
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80005b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
 80005c0:	615a      	str	r2, [r3, #20]
 80005c2:	619a      	str	r2, [r3, #24]

	while (1)
	{


		flag1 =0;
 80005c4:	4b3d      	ldr	r3, [pc, #244]	; (80006bc <main+0x19c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
		flag2 =0;
 80005ca:	4b3d      	ldr	r3, [pc, #244]	; (80006c0 <main+0x1a0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	801a      	strh	r2, [r3, #0]
		flag3 =0;
 80005d0:	4b3c      	ldr	r3, [pc, #240]	; (80006c4 <main+0x1a4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	801a      	strh	r2, [r3, #0]
		memset(adcm3,0,60000);
 80005d6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80005da:	2100      	movs	r1, #0
 80005dc:	483a      	ldr	r0, [pc, #232]	; (80006c8 <main+0x1a8>)
 80005de:	f006 ffbf 	bl	8007560 <memset>
		//print5("0000000gen");

		//HAL_Delay(cmech);
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005e2:	2120      	movs	r1, #32
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e8:	f004 f9e2 	bl	80049b0 <HAL_GPIO_TogglePin>

		write(&nrf_data, strlen((const char*)nrf_data));
 80005ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fe11 	bl	8000218 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005fe:	4611      	mov	r1, r2
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fefd 	bl	8001400 <write>
		//HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adcm3, 60000);
		//while(flag1==1 && flag2==1 && flag3==1);


		HAL_Delay(500);
 8000606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060a:	f001 fc6b 	bl	8001ee4 <HAL_Delay>

		for (var = 100; var < 60000; ++var) {
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <main+0x1ac>)
 8000610:	2264      	movs	r2, #100	; 0x64
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	e031      	b.n	800067a <main+0x15a>

			if(adcm3[var]>600){
 8000616:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <main+0x1ac>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a2b      	ldr	r2, [pc, #172]	; (80006c8 <main+0x1a8>)
 800061c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000620:	b29b      	uxth	r3, r3
 8000622:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000626:	d923      	bls.n	8000670 <main+0x150>
//					itoa(adcm3[ii], snum1, 10);
//					strcat(snum1,"\r\n");
//					HAL_UART_Transmit(&hlpuart1, (uint8_t*) snum1, strlen(snum1),1);
//				}
				char snum1[50];
				itoa(var, snum1, 10);
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <main+0x1ac>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	1d39      	adds	r1, r7, #4
 800062e:	220a      	movs	r2, #10
 8000630:	4618      	mov	r0, r3
 8000632:	f006 ff93 	bl	800755c <itoa>
				strcat(snum1,"\r\n");
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fded 	bl	8000218 <strlen>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4413      	add	r3, r2
 8000646:	4a22      	ldr	r2, [pc, #136]	; (80006d0 <main+0x1b0>)
 8000648:	8811      	ldrh	r1, [r2, #0]
 800064a:	7892      	ldrb	r2, [r2, #2]
 800064c:	8019      	strh	r1, [r3, #0]
 800064e:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&hlpuart1, (uint8_t*) snum1, strlen(snum1),1);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fde0 	bl	8000218 <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	b29a      	uxth	r2, r3
 800065c:	1d39      	adds	r1, r7, #4
 800065e:	2301      	movs	r3, #1
 8000660:	481c      	ldr	r0, [pc, #112]	; (80006d4 <main+0x1b4>)
 8000662:	f006 f951 	bl	8006908 <HAL_UART_Transmit>

				var = 60000;
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <main+0x1ac>)
 8000668:	f64e 2260 	movw	r2, #60000	; 0xea60
 800066c:	601a      	str	r2, [r3, #0]
				break;
 800066e:	e00a      	b.n	8000686 <main+0x166>
		for (var = 100; var < 60000; ++var) {
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <main+0x1ac>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <main+0x1ac>)
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <main+0x1ac>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000682:	4293      	cmp	r3, r2
 8000684:	ddc7      	ble.n	8000616 <main+0xf6>
//		}
//		itoa(5000, snum1, 10);
//		strcat(snum1,"\r\n");
//		strcat(snum, snum1);
//		HAL_UART_Transmit(&hlpuart1, (uint8_t*) snum1, strlen(snum1),10);
	HAL_Delay(40);
 8000686:	2028      	movs	r0, #40	; 0x28
 8000688:	f001 fc2c 	bl	8001ee4 <HAL_Delay>
	isAckPayloadAvailable();
 800068c:	f000 ff72 	bl	8001574 <isAckPayloadAvailable>
		flag1 =0;
 8000690:	e798      	b.n	80005c4 <main+0xa4>
 8000692:	bf00      	nop
 8000694:	f3af 8000 	nop.w
 8000698:	e8f0f0e2 	.word	0xe8f0f0e2
 800069c:	000000e8 	.word	0x000000e8
 80006a0:	2001db9c 	.word	0x2001db9c
 80006a4:	2001d66c 	.word	0x2001d66c
 80006a8:	2001d6d8 	.word	0x2001d6d8
 80006ac:	2001da24 	.word	0x2001da24
 80006b0:	2001d7a4 	.word	0x2001d7a4
 80006b4:	2001db24 	.word	0x2001db24
 80006b8:	00615658 	.word	0x00615658
 80006bc:	2001d508 	.word	0x2001d508
 80006c0:	2001d50a 	.word	0x2001d50a
 80006c4:	2001d50c 	.word	0x2001d50c
 80006c8:	20000048 	.word	0x20000048
 80006cc:	2001db60 	.word	0x2001db60
 80006d0:	0800760c 	.word	0x0800760c
 80006d4:	2001d8a8 	.word	0x2001d8a8

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b0a8      	sub	sp, #160	; 0xa0
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006e2:	2238      	movs	r2, #56	; 0x38
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 ff3a 	bl	8007560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	2254      	movs	r2, #84	; 0x54
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f006 ff2c 	bl	8007560 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	f44f 7000 	mov.w	r0, #512	; 0x200
 800070c:	f004 fa96 	bl	8004c3c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000718:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000720:	2303      	movs	r3, #3
 8000722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 25;
 800072c:	2319      	movs	r3, #25
 800072e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800073e:	2302      	movs	r3, #2
 8000740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000748:	4618      	mov	r0, r3
 800074a:	f004 fb85 	bl	8004e58 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000754:	f000 fc32 	bl	8000fbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2303      	movs	r3, #3
 800075e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800076c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000770:	2104      	movs	r1, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f004 fe88 	bl	8005488 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800077e:	f000 fc1d 	bl	8000fbc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <SystemClock_Config+0xe0>)
 8000784:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000792:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000796:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000798:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	4618      	mov	r0, r3
 80007a2:	f005 f88d 	bl	80058c0 <HAL_RCCEx_PeriphCLKConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80007ac:	f000 fc06 	bl	8000fbc <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	37a0      	adds	r7, #160	; 0xa0
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	00018025 	.word	0x00018025

080007bc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007c2:	463b      	mov	r3, r7
 80007c4:	2220      	movs	r2, #32
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f006 fec9 	bl	8007560 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <MX_ADC2_Init+0xc0>)
 80007d0:	4a2b      	ldr	r2, [pc, #172]	; (8000880 <MX_ADC2_Init+0xc4>)
 80007d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_ADC2_Init+0xc0>)
 80007d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007da:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007dc:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_ADC2_Init+0xc0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_ADC2_Init+0xc0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80007e8:	4b24      	ldr	r3, [pc, #144]	; (800087c <MX_ADC2_Init+0xc0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_ADC2_Init+0xc0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_ADC2_Init+0xc0>)
 80007f6:	2204      	movs	r2, #4
 80007f8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007fa:	4b20      	ldr	r3, [pc, #128]	; (800087c <MX_ADC2_Init+0xc0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_ADC2_Init+0xc0>)
 8000802:	2201      	movs	r2, #1
 8000804:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_ADC2_Init+0xc0>)
 8000808:	2201      	movs	r2, #1
 800080a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_ADC2_Init+0xc0>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_ADC2_Init+0xc0>)
 8000816:	2200      	movs	r2, #0
 8000818:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_ADC2_Init+0xc0>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_ADC2_Init+0xc0>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_ADC2_Init+0xc0>)
 800082a:	2200      	movs	r2, #0
 800082c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_ADC2_Init+0xc0>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000836:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_ADC2_Init+0xc0>)
 8000838:	f001 fe04 	bl	8002444 <HAL_ADC_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000842:	f000 fbbb 	bl	8000fbc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_ADC2_Init+0xc8>)
 8000848:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084a:	2306      	movs	r3, #6
 800084c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800084e:	2304      	movs	r3, #4
 8000850:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000852:	237f      	movs	r3, #127	; 0x7f
 8000854:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000856:	2304      	movs	r3, #4
 8000858:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_ADC2_Init+0xc0>)
 8000864:	f002 fb1e 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800086e:	f000 fba5 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2001d66c 	.word	0x2001d66c
 8000880:	50000100 	.word	0x50000100
 8000884:	cb8c0000 	.word	0xcb8c0000

08000888 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2220      	movs	r2, #32
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f006 fe63 	bl	8007560 <memset>
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  hadc4.Instance = ADC4;
 800089a:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <MX_ADC4_Init+0xc0>)
 800089c:	4a2b      	ldr	r2, [pc, #172]	; (800094c <MX_ADC4_Init+0xc4>)
 800089e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a0:	4b29      	ldr	r3, [pc, #164]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008a6:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008a8:	4b27      	ldr	r3, [pc, #156]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ae:	4b26      	ldr	r3, [pc, #152]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008b4:	4b24      	ldr	r3, [pc, #144]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ba:	4b23      	ldr	r3, [pc, #140]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c0:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_ADC4_Init+0xc0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000902:	4811      	ldr	r0, [pc, #68]	; (8000948 <MX_ADC4_Init+0xc0>)
 8000904:	f001 fd9e 	bl	8002444 <HAL_ADC_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800090e:	f000 fb55 	bl	8000fbc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP6;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_ADC4_Init+0xc8>)
 8000914:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000916:	2306      	movs	r3, #6
 8000918:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800091a:	2304      	movs	r3, #4
 800091c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800091e:	237f      	movs	r3, #127	; 0x7f
 8000920:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000922:	2304      	movs	r3, #4
 8000924:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <MX_ADC4_Init+0xc0>)
 8000930:	f002 fab8 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 800093a:	f000 fb3f 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2001db9c 	.word	0x2001db9c
 800094c:	50000500 	.word	0x50000500
 8000950:	c75a0000 	.word	0xc75a0000

08000954 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2220      	movs	r2, #32
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f006 fdfd 	bl	8007560 <memset>
  /* USER CODE BEGIN ADC5_Init 1 */

  /* USER CODE END ADC5_Init 1 */
  /** Common config
  */
  hadc5.Instance = ADC5;
 8000966:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <MX_ADC5_Init+0xc0>)
 8000968:	4a2b      	ldr	r2, [pc, #172]	; (8000a18 <MX_ADC5_Init+0xc4>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800096c:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <MX_ADC5_Init+0xc0>)
 800096e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000972:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <MX_ADC5_Init+0xc0>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_ADC5_Init+0xc0>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <MX_ADC5_Init+0xc0>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <MX_ADC5_Init+0xc0>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_ADC5_Init+0xc0>)
 800098e:	2204      	movs	r2, #4
 8000990:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_ADC5_Init+0xc0>)
 8000994:	2200      	movs	r2, #0
 8000996:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_ADC5_Init+0xc0>)
 800099a:	2201      	movs	r2, #1
 800099c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_ADC5_Init+0xc0>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_ADC5_Init+0xc0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_ADC5_Init+0xc0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_ADC5_Init+0xc0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_ADC5_Init+0xc0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_ADC5_Init+0xc0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_ADC5_Init+0xc0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80009ce:	4811      	ldr	r0, [pc, #68]	; (8000a14 <MX_ADC5_Init+0xc0>)
 80009d0:	f001 fd38 	bl	8002444 <HAL_ADC_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80009da:	f000 faef 	bl	8000fbc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_ADC5_Init+0xc8>)
 80009e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e2:	2306      	movs	r3, #6
 80009e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ea:	237f      	movs	r3, #127	; 0x7f
 80009ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ee:	2304      	movs	r3, #4
 80009f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_ADC5_Init+0xc0>)
 80009fc:	f002 fa52 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000a06:	f000 fad9 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2001d6d8 	.word	0x2001d6d8
 8000a18:	50000600 	.word	0x50000600
 8000a1c:	8c900008 	.word	0x8c900008

08000a20 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MX_LPUART1_UART_Init+0x8c>)
 8000a26:	4a22      	ldr	r2, [pc, #136]	; (8000ab0 <MX_LPUART1_UART_Init+0x90>)
 8000a28:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_LPUART1_UART_Init+0x8c>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_LPUART1_UART_Init+0x8c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_LPUART1_UART_Init+0x8c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_LPUART1_UART_Init+0x8c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_LPUART1_UART_Init+0x8c>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_LPUART1_UART_Init+0x8c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_LPUART1_UART_Init+0x8c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_LPUART1_UART_Init+0x8c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_LPUART1_UART_Init+0x8c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a62:	4812      	ldr	r0, [pc, #72]	; (8000aac <MX_LPUART1_UART_Init+0x8c>)
 8000a64:	f005 ff00 	bl	8006868 <HAL_UART_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a6e:	f000 faa5 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a72:	2100      	movs	r1, #0
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_LPUART1_UART_Init+0x8c>)
 8000a76:	f006 fc50 	bl	800731a <HAL_UARTEx_SetTxFifoThreshold>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a80:	f000 fa9c 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4809      	ldr	r0, [pc, #36]	; (8000aac <MX_LPUART1_UART_Init+0x8c>)
 8000a88:	f006 fc85 	bl	8007396 <HAL_UARTEx_SetRxFifoThreshold>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a92:	f000 fa93 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_LPUART1_UART_Init+0x8c>)
 8000a98:	f006 fc06 	bl	80072a8 <HAL_UARTEx_DisableFifoMode>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000aa2:	f000 fa8b 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2001d8a8 	.word	0x2001d8a8
 8000ab0:	40008000 	.word	0x40008000

08000ab4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000aba:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <MX_USART1_UART_Init+0x94>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000ac0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000afc:	4811      	ldr	r0, [pc, #68]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000afe:	f005 feb3 	bl	8006868 <HAL_UART_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b08:	f000 fa58 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000b10:	f006 fc03 	bl	800731a <HAL_UARTEx_SetTxFifoThreshold>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b1a:	f000 fa4f 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4808      	ldr	r0, [pc, #32]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000b22:	f006 fc38 	bl	8007396 <HAL_UARTEx_SetRxFifoThreshold>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b2c:	f000 fa46 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_USART1_UART_Init+0x90>)
 8000b32:	f006 fbb9 	bl	80072a8 <HAL_UARTEx_DisableFifoMode>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b3c:	f000 fa3e 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2001d998 	.word	0x2001d998
 8000b48:	40013800 	.word	0x40013800

08000b4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000b52:	4a23      	ldr	r2, [pc, #140]	; (8000be0 <MX_USART3_UART_Init+0x94>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000b58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b94:	4811      	ldr	r0, [pc, #68]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000b96:	f005 fe67 	bl	8006868 <HAL_UART_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ba0:	f000 fa0c 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000ba8:	f006 fbb7 	bl	800731a <HAL_UARTEx_SetTxFifoThreshold>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bb2:	f000 fa03 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000bba:	f006 fbec 	bl	8007396 <HAL_UARTEx_SetRxFifoThreshold>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bc4:	f000 f9fa 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_USART3_UART_Init+0x90>)
 8000bca:	f006 fb6d 	bl	80072a8 <HAL_UARTEx_DisableFifoMode>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bd4:	f000 f9f2 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2001d5e0 	.word	0x2001d5e0
 8000be0:	40004800 	.word	0x40004800

08000be4 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_OPAMP3_Init+0x54>)
 8000bea:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <MX_OPAMP3_Init+0x58>)
 8000bec:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_OPAMP3_Init+0x54>)
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_OPAMP3_Init+0x54>)
 8000bf6:	2240      	movs	r2, #64	; 0x40
 8000bf8:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_OPAMP3_Init+0x54>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <MX_OPAMP3_Init+0x54>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_OPAMP3_Init+0x54>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <MX_OPAMP3_Init+0x54>)
 8000c0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_64_OR_MINUS_63;
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_OPAMP3_Init+0x54>)
 8000c16:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_OPAMP3_Init+0x54>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_OPAMP3_Init+0x54>)
 8000c24:	f003 ff02 	bl	8004a2c <HAL_OPAMP_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8000c2e:	f000 f9c5 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2001d7a4 	.word	0x2001d7a4
 8000c3c:	40010308 	.word	0x40010308

08000c40 <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_OPAMP5_Init+0x54>)
 8000c46:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <MX_OPAMP5_Init+0x58>)
 8000c48:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_OPAMP5_Init+0x54>)
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_PGA_MODE;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_OPAMP5_Init+0x54>)
 8000c52:	2240      	movs	r2, #64	; 0x40
 8000c54:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_OPAMP5_Init+0x54>)
 8000c58:	2208      	movs	r2, #8
 8000c5a:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <MX_OPAMP5_Init+0x54>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_OPAMP5_Init+0x54>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  hopamp5.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <MX_OPAMP5_Init+0x54>)
 8000c6a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp5.Init.PgaGain = OPAMP_PGA_GAIN_64_OR_MINUS_63;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_OPAMP5_Init+0x54>)
 8000c72:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_OPAMP5_Init+0x54>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_OPAMP5_Init+0x54>)
 8000c80:	f003 fed4 	bl	8004a2c <HAL_OPAMP_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_OPAMP5_Init+0x4e>
  {
    Error_Handler();
 8000c8a:	f000 f997 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2001db24 	.word	0x2001db24
 8000c98:	40010310 	.word	0x40010310

08000c9c <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_OPAMP6_Init+0x50>)
 8000ca2:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <MX_OPAMP6_Init+0x54>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_OPAMP6_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_OPAMP6_Init+0x50>)
 8000cae:	2240      	movs	r2, #64	; 0x40
 8000cb0:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_OPAMP6_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_OPAMP6_Init+0x50>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_OPAMP6_Init+0x50>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_OPAMP6_Init+0x50>)
 8000cc6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <MX_OPAMP6_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_OPAMP6_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <MX_OPAMP6_Init+0x50>)
 8000cda:	f003 fea7 	bl	8004a2c <HAL_OPAMP_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_OPAMP6_Init+0x4c>
  {
    Error_Handler();
 8000ce4:	f000 f96a 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2001da24 	.word	0x2001da24
 8000cf0:	40010314 	.word	0x40010314

08000cf4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000cfa:	4a1c      	ldr	r2, [pc, #112]	; (8000d6c <MX_SPI2_Init+0x78>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d12:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d26:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d2a:	2228      	movs	r2, #40	; 0x28
 8000d2c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d42:	2207      	movs	r2, #7
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d54:	f005 f800 	bl	8005d58 <HAL_SPI_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d5e:	f000 f92d 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2001d57c 	.word	0x2001d57c
 8000d6c:	40003800 	.word	0x40003800

08000d70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d76:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <MX_DMA_Init+0x98>)
 8000d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d7a:	4a23      	ldr	r2, [pc, #140]	; (8000e08 <MX_DMA_Init+0x98>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6493      	str	r3, [r2, #72]	; 0x48
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <MX_DMA_Init+0x98>)
 8000d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <MX_DMA_Init+0x98>)
 8000d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d92:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <MX_DMA_Init+0x98>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6493      	str	r3, [r2, #72]	; 0x48
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <MX_DMA_Init+0x98>)
 8000d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_DMA_Init+0x98>)
 8000da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <MX_DMA_Init+0x98>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6493      	str	r3, [r2, #72]	; 0x48
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_DMA_Init+0x98>)
 8000db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	200b      	movs	r0, #11
 8000dc4:	f003 f843 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dc8:	200b      	movs	r0, #11
 8000dca:	f003 f85a 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	200c      	movs	r0, #12
 8000dd4:	f003 f83b 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000dd8:	200c      	movs	r0, #12
 8000dda:	f003 f852 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	200d      	movs	r0, #13
 8000de4:	f003 f833 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000de8:	200d      	movs	r0, #13
 8000dea:	f003 f84a 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2038      	movs	r0, #56	; 0x38
 8000df4:	f003 f82b 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000df8:	2038      	movs	r0, #56	; 0x38
 8000dfa:	f003 f842 	bl	8003e82 <HAL_NVIC_EnableIRQ>

}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a3f      	ldr	r2, [pc, #252]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a39      	ldr	r2, [pc, #228]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e40:	f043 0320 	orr.w	r3, r3, #32
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0320 	and.w	r3, r3, #32
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a33      	ldr	r2, [pc, #204]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4a2d      	ldr	r2, [pc, #180]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2120      	movs	r1, #32
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8a:	f003 fd79 	bl	8004980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000e94:	4824      	ldr	r0, [pc, #144]	; (8000f28 <MX_GPIO_Init+0x11c>)
 8000e96:	f003 fd73 	bl	8004980 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin IRQ_Pin */
  GPIO_InitStruct.Pin = B1_Pin|IRQ_Pin;
 8000e9a:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <MX_GPIO_Init+0x120>)
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	481e      	ldr	r0, [pc, #120]	; (8000f28 <MX_GPIO_Init+0x11c>)
 8000eb0:	f003 fbe4 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eb4:	2320      	movs	r3, #32
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f003 fbd5 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480f      	ldr	r0, [pc, #60]	; (8000f28 <MX_GPIO_Init+0x11c>)
 8000eea:	f003 fbc7 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin;
 8000eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	4808      	ldr	r0, [pc, #32]	; (8000f28 <MX_GPIO_Init+0x11c>)
 8000f08:	f003 fbb8 	bl	800467c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2028      	movs	r0, #40	; 0x28
 8000f12:	f002 ff9c 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f16:	2028      	movs	r0, #40	; 0x28
 8000f18:	f002 ffb3 	bl	8003e82 <HAL_NVIC_EnableIRQ>

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48000800 	.word	0x48000800
 8000f2c:	10110000 	.word	0x10110000

08000f30 <HAL_ADC_ConvCpltCallback>:
	//HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\n", 1, 10);
	//HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r", 1, 10);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC5)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <HAL_ADC_ConvCpltCallback+0x54>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d105      	bne.n	8000f4e <HAL_ADC_ConvCpltCallback+0x1e>
	{

		HAL_ADC_Stop(&hadc5); // это необязательно
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <HAL_ADC_ConvCpltCallback+0x58>)
 8000f44:	f001 fc3e 	bl	80027c4 <HAL_ADC_Stop>
		flag3 =1;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x5c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	801a      	strh	r2, [r3, #0]

	}
	if(hadc->Instance == ADC2)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <HAL_ADC_ConvCpltCallback+0x60>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d105      	bne.n	8000f64 <HAL_ADC_ConvCpltCallback+0x34>
	{

		HAL_ADC_Stop(&hadc2); // это необязательно
 8000f58:	480e      	ldr	r0, [pc, #56]	; (8000f94 <HAL_ADC_ConvCpltCallback+0x64>)
 8000f5a:	f001 fc33 	bl	80027c4 <HAL_ADC_Stop>
		flag2 =1;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_ADC_ConvCpltCallback+0x68>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	801a      	strh	r2, [r3, #0]

	}
	if(hadc->Instance == ADC4)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d105      	bne.n	8000f7a <HAL_ADC_ConvCpltCallback+0x4a>
	{

		HAL_ADC_Stop(&hadc4); // это необязательно
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000f70:	f001 fc28 	bl	80027c4 <HAL_ADC_Stop>
		flag1 =1;
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	801a      	strh	r2, [r3, #0]

	}
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	50000600 	.word	0x50000600
 8000f88:	2001d6d8 	.word	0x2001d6d8
 8000f8c:	2001d50c 	.word	0x2001d50c
 8000f90:	50000100 	.word	0x50000100
 8000f94:	2001d66c 	.word	0x2001d66c
 8000f98:	2001d50a 	.word	0x2001d50a
 8000f9c:	50000500 	.word	0x50000500
 8000fa0:	2001db9c 	.word	0x2001db9c
 8000fa4:	2001d508 	.word	0x2001d508

08000fa8 <HAL_ADC_LevelOutOfWindowCallback>:
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
		//    		  HAL_UART_Transmit(&hlpuart1, (uint8_t*) snum, strlen(snum),10);
		// HAL_ADC_Stop_IT(&hadc3);
		//	HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t*) "1\n", 2);
		// HAL_ADC_Stop(&hadc3);
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <DWT_Init>:
uint8_t addr_width = 0; /**< The address width to use - 3,4 or 5 bytes. */
uint8_t txDelay = 0;
extern volatile uint16_t adcm3[60000];
extern ADC_HandleTypeDef hadc5;
void DWT_Init(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <DWT_Init+0x28>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <DWT_Init+0x28>)
 8000fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fda:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <DWT_Init+0x2c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <DWT_Init+0x2c>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000edfc 	.word	0xe000edfc
 8000ff8:	e0001000 	.word	0xe0001000

08000ffc <delay_us>:

void delay_us(uint32_t us) // DelayMicro
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <delay_us+0x3c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <delay_us+0x40>)
 800100a:	fba2 2303 	umull	r2, r3, r2, r3
 800100e:	0c9a      	lsrs	r2, r3, #18
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	fb02 f303 	mul.w	r3, r2, r3
 8001016:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <delay_us+0x44>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 800101e:	bf00      	nop
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <delay_us+0x44>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	429a      	cmp	r2, r3
 8001028:	d8fa      	bhi.n	8001020 <delay_us+0x24>
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	20000000 	.word	0x20000000
 800103c:	431bde83 	.word	0x431bde83
 8001040:	e0001000 	.word	0xe0001000

08001044 <csn>:

void csn(uint8_t level)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, level);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	461a      	mov	r2, r3
 8001052:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <csn+0x28>)
 8001058:	f003 fc92 	bl	8004980 <HAL_GPIO_WritePin>
	delay_us(5);
 800105c:	2005      	movs	r0, #5
 800105e:	f7ff ffcd 	bl	8000ffc <delay_us>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	48000800 	.word	0x48000800

08001070 <ce>:

void ce(uint8_t level)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, level);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	461a      	mov	r2, r3
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <ce+0x20>)
 8001082:	f003 fc7d 	bl	8004980 <HAL_GPIO_WritePin>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	48000800 	.word	0x48000800

08001094 <read_register>:

uint8_t read_register(uint8_t reg)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af02      	add	r7, sp, #8
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	73fb      	strb	r3, [r7, #15]
	uint8_t dt = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff ffc9 	bl	8001044 <csn>
	HAL_SPI_TransmitReceive(&hspi2, &addr, &dt, 1, 1000);
 80010b2:	f107 020e 	add.w	r2, r7, #14
 80010b6:	f107 010f 	add.w	r1, r7, #15
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	480a      	ldr	r0, [pc, #40]	; (80010ec <read_register+0x58>)
 80010c4:	f005 f861 	bl	800618a <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)0xff, &dt, 1, 1000);
 80010c8:	f107 020e 	add.w	r2, r7, #14
 80010cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	21ff      	movs	r1, #255	; 0xff
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <read_register+0x58>)
 80010d8:	f005 f857 	bl	800618a <HAL_SPI_TransmitReceive>
	csn(HIGH);
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff ffb1 	bl	8001044 <csn>
	return dt;
 80010e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2001d57c 	.word	0x2001d57c

080010f0 <write_registerMy>:

uint8_t write_registerMy(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	4613      	mov	r3, r2
 80010fe:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 031f 	and.w	r3, r3, #31
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f043 0320 	orr.w	r3, r3, #32
 8001110:	b2db      	uxtb	r3, r3
 8001112:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff ff95 	bl	8001044 <csn>
	HAL_SPI_TransmitReceive(&hspi2, &addr, &status, 1, 100);
 800111a:	f107 020f 	add.w	r2, r7, #15
 800111e:	f107 010e 	add.w	r1, r7, #14
 8001122:	2364      	movs	r3, #100	; 0x64
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <write_registerMy+0x5c>)
 800112a:	f005 f82e 	bl	800618a <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)buf, len, 100);
 800112e:	79bb      	ldrb	r3, [r7, #6]
 8001130:	b29a      	uxth	r2, r3
 8001132:	2364      	movs	r3, #100	; 0x64
 8001134:	6839      	ldr	r1, [r7, #0]
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <write_registerMy+0x5c>)
 8001138:	f004 feb9 	bl	8005eae <HAL_SPI_Transmit>
	csn(HIGH);
 800113c:	2001      	movs	r0, #1
 800113e:	f7ff ff81 	bl	8001044 <csn>
	return status;
 8001142:	7bfb      	ldrb	r3, [r7, #15]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2001d57c 	.word	0x2001d57c

08001150 <write_register>:

uint8_t write_register(uint8_t reg, uint8_t value)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af02      	add	r7, sp, #8
 8001156:	4603      	mov	r3, r0
 8001158:	460a      	mov	r2, r1
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	4613      	mov	r3, r2
 800115e:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 031f 	and.w	r3, r3, #31
 800116a:	b2db      	uxtb	r3, r3
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	b2db      	uxtb	r3, r3
 8001172:	73bb      	strb	r3, [r7, #14]
	csn(LOW);
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff ff65 	bl	8001044 <csn>
	HAL_SPI_TransmitReceive(&hspi2, &addr, &status, 1, 100);
 800117a:	f107 020f 	add.w	r2, r7, #15
 800117e:	f107 010e 	add.w	r1, r7, #14
 8001182:	2364      	movs	r3, #100	; 0x64
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <write_register+0x5c>)
 800118a:	f004 fffe 	bl	800618a <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi2, &value, 1, 1000);
 800118e:	1db9      	adds	r1, r7, #6
 8001190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001194:	2201      	movs	r2, #1
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <write_register+0x5c>)
 8001198:	f004 fe89 	bl	8005eae <HAL_SPI_Transmit>
	csn(HIGH);
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff ff51 	bl	8001044 <csn>
	return status;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2001d57c 	.word	0x2001d57c

080011b0 <write_payload>:

uint8_t write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	70fb      	strb	r3, [r7, #3]
 80011bc:	4613      	mov	r3, r2
 80011be:	70bb      	strb	r3, [r7, #2]
	uint8_t status = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]
	const uint8_t* current = (const uint8_t*)buf;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	613b      	str	r3, [r7, #16]
	uint8_t addr = writeType;
 80011c8:	78bb      	ldrb	r3, [r7, #2]
 80011ca:	73bb      	strb	r3, [r7, #14]

	data_len = rf24_min(data_len, payload_size);
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <write_payload+0x98>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	78fa      	ldrb	r2, [r7, #3]
 80011d2:	4293      	cmp	r3, r2
 80011d4:	bf28      	it	cs
 80011d6:	4613      	movcs	r3, r2
 80011d8:	70fb      	strb	r3, [r7, #3]
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <write_payload+0x9c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <write_payload+0x36>
 80011e2:	2300      	movs	r3, #0
 80011e4:	e004      	b.n	80011f0 <write_payload+0x40>
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <write_payload+0x98>)
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	75fb      	strb	r3, [r7, #23]

	csn(LOW);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff ff26 	bl	8001044 <csn>
	HAL_SPI_TransmitReceive(&hspi2, &addr, &status, 1, 100);
 80011f8:	f107 020f 	add.w	r2, r7, #15
 80011fc:	f107 010e 	add.w	r1, r7, #14
 8001200:	2364      	movs	r3, #100	; 0x64
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	4812      	ldr	r0, [pc, #72]	; (8001250 <write_payload+0xa0>)
 8001208:	f004 ffbf 	bl	800618a <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)current, data_len, 100);
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	b29a      	uxth	r2, r3
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	6939      	ldr	r1, [r7, #16]
 8001214:	480e      	ldr	r0, [pc, #56]	; (8001250 <write_payload+0xa0>)
 8001216:	f004 fe4a 	bl	8005eae <HAL_SPI_Transmit>

	while(blank_len--)
 800121a:	e008      	b.n	800122e <write_payload+0x7e>
	{
		uint8_t empt = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&hspi2, &empt, 1, 100);
 8001220:	f107 010d 	add.w	r1, r7, #13
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	2201      	movs	r2, #1
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <write_payload+0xa0>)
 800122a:	f004 fe40 	bl	8005eae <HAL_SPI_Transmit>
	while(blank_len--)
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	75fa      	strb	r2, [r7, #23]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f1      	bne.n	800121c <write_payload+0x6c>
	}

	csn(HIGH);
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff ff03 	bl	8001044 <csn>
	return status;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2001d50e 	.word	0x2001d50e
 800124c:	2001dc68 	.word	0x2001dc68
 8001250:	2001d57c 	.word	0x2001d57c

08001254 <flush_rx>:
	csn(HIGH);
	return status;
}

uint8_t flush_rx(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_RX);
 8001258:	20e2      	movs	r0, #226	; 0xe2
 800125a:	f000 f80b 	bl	8001274 <spiTrans>
 800125e:	4603      	mov	r3, r0
}
 8001260:	4618      	mov	r0, r3
 8001262:	bd80      	pop	{r7, pc}

08001264 <flush_tx>:

uint8_t flush_tx(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_TX);
 8001268:	20e1      	movs	r0, #225	; 0xe1
 800126a:	f000 f803 	bl	8001274 <spiTrans>
 800126e:	4603      	mov	r3, r0
}
 8001270:	4618      	mov	r0, r3
 8001272:	bd80      	pop	{r7, pc}

08001274 <spiTrans>:

uint8_t spiTrans(uint8_t cmd)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af02      	add	r7, sp, #8
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff fede 	bl	8001044 <csn>
	HAL_SPI_TransmitReceive(&hspi2, &cmd, &status, 1, 1000);
 8001288:	f107 020f 	add.w	r2, r7, #15
 800128c:	1df9      	adds	r1, r7, #7
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <spiTrans+0x38>)
 8001298:	f004 ff77 	bl	800618a <HAL_SPI_TransmitReceive>
	csn(HIGH);
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff fed1 	bl	8001044 <csn>
	return status;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2001d57c 	.word	0x2001d57c

080012b0 <get_status>:

uint8_t get_status(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	return spiTrans(NOP);
 80012b4:	20ff      	movs	r0, #255	; 0xff
 80012b6:	f7ff ffdd 	bl	8001274 <spiTrans>
 80012ba:	4603      	mov	r3, r0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	bd80      	pop	{r7, pc}

080012c0 <setChannel>:

void setChannel(uint8_t channel)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	write_register(RF_CH, channel);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4619      	mov	r1, r3
 80012ce:	2005      	movs	r0, #5
 80012d0:	f7ff ff3e 	bl	8001150 <write_register>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <NRF_Init>:
{
	return payload_size;
}

uint8_t NRF_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
	uint8_t setup = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	71fb      	strb	r3, [r7, #7]
	p_variant = false;
 80012e6:	4b33      	ldr	r3, [pc, #204]	; (80013b4 <NRF_Init+0xd8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
	payload_size = 32;
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <NRF_Init+0xdc>)
 80012ee:	2220      	movs	r2, #32
 80012f0:	701a      	strb	r2, [r3, #0]
	dynamic_payloads_enabled = false;
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <NRF_Init+0xe0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
	addr_width = 5;
 80012f8:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <NRF_Init+0xe4>)
 80012fa:	2205      	movs	r2, #5
 80012fc:	701a      	strb	r2, [r3, #0]
	pipe0_reading_address[0] = 0;
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <NRF_Init+0xe8>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]

	ce(LOW);
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff feb3 	bl	8001070 <ce>
	csn(HIGH);
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff fe9a 	bl	8001044 <csn>
	HAL_Delay(5);
 8001310:	2005      	movs	r0, #5
 8001312:	f000 fde7 	bl	8001ee4 <HAL_Delay>

	write_register(NRF_CONFIG, 0x0C); // Reset NRF_CONFIG and enable 16-bit CRC.
 8001316:	210c      	movs	r1, #12
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff ff19 	bl	8001150 <write_register>
	setRetries(5, 15);
 800131e:	210f      	movs	r1, #15
 8001320:	2005      	movs	r0, #5
 8001322:	f000 f99b 	bl	800165c <setRetries>
	setPALevel(RF24_PA_MAX); // Reset value is MAX
 8001326:	2003      	movs	r0, #3
 8001328:	f000 f933 	bl	8001592 <setPALevel>

	if(setDataRate(RF24_250KBPS)) // check for connected module and if this is a p nRF24l01 variant
 800132c:	2002      	movs	r0, #2
 800132e:	f000 f955 	bl	80015dc <setDataRate>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <NRF_Init+0x62>
	{
		p_variant = true;
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <NRF_Init+0xd8>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
	}

	setup = read_register(RF_SETUP);
 800133e:	2006      	movs	r0, #6
 8001340:	f7ff fea8 	bl	8001094 <read_register>
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
	setDataRate(RF24_1MBPS); // Then set the data rate to the slowest (and most reliable) speed supported by all hardware.
 8001348:	2000      	movs	r0, #0
 800134a:	f000 f947 	bl	80015dc <setDataRate>

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	toggle_features();
 800134e:	f000 f8d1 	bl	80014f4 <toggle_features>
	write_register(FEATURE, 0);
 8001352:	2100      	movs	r1, #0
 8001354:	201d      	movs	r0, #29
 8001356:	f7ff fefb 	bl	8001150 <write_register>
	write_register(DYNPD, 0);
 800135a:	2100      	movs	r1, #0
 800135c:	201c      	movs	r0, #28
 800135e:	f7ff fef7 	bl	8001150 <write_register>
	dynamic_payloads_enabled = false;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <NRF_Init+0xe0>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]

	// Reset current status. Notice reset and flush is the last thing we do
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8001368:	2170      	movs	r1, #112	; 0x70
 800136a:	2007      	movs	r0, #7
 800136c:	f7ff fef0 	bl	8001150 <write_register>
	setChannel(0x73);
 8001370:	2073      	movs	r0, #115	; 0x73
 8001372:	f7ff ffa5 	bl	80012c0 <setChannel>
	flush_rx();
 8001376:	f7ff ff6d 	bl	8001254 <flush_rx>
	flush_tx();
 800137a:	f7ff ff73 	bl	8001264 <flush_tx>
	powerUp(); //Power up by default when begin() is called
 800137e:	f000 f823 	bl	80013c8 <powerUp>
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff fe86 	bl	8001094 <read_register>
 8001388:	4603      	mov	r3, r0
 800138a:	f023 0301 	bic.w	r3, r3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	4619      	mov	r1, r3
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff fedc 	bl	8001150 <write_register>
	return (setup != 0 && setup != 0xff);
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d004      	beq.n	80013a8 <NRF_Init+0xcc>
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2bff      	cmp	r3, #255	; 0xff
 80013a2:	d001      	beq.n	80013a8 <NRF_Init+0xcc>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <NRF_Init+0xce>
 80013a8:	2300      	movs	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2001dc69 	.word	0x2001dc69
 80013b8:	2001d50e 	.word	0x2001d50e
 80013bc:	2001dc68 	.word	0x2001dc68
 80013c0:	2001d515 	.word	0x2001d515
 80013c4:	2001d510 	.word	0x2001d510

080013c8 <powerUp>:
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) & ~(1 << PWR_UP));
}

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void powerUp(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
	uint8_t cfg = read_register(NRF_CONFIG);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff fe60 	bl	8001094 <read_register>
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
	// if not powered up then power up and wait for the radio to initialize
	if(!(cfg & (1 << PWR_UP)))
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10a      	bne.n	80013f8 <powerUp+0x30>
	{
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4619      	mov	r1, r3
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff feaf 	bl	8001150 <write_register>
		HAL_Delay(5);
 80013f2:	2005      	movs	r0, #5
 80013f4:	f000 fd76 	bl	8001ee4 <HAL_Delay>
	}
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <write>:


//Similar to the previous write, clears the interrupt flags
bool write(const void* buf, uint8_t len)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
	startFastWrite(buf, len, 1, 1);
 800140c:	78f9      	ldrb	r1, [r7, #3]
 800140e:	2301      	movs	r3, #1
 8001410:	2201      	movs	r2, #1
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f82a 	bl	800146c <startFastWrite>
	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adcm3, 60000);
 8001418:	f64e 2260 	movw	r2, #60000	; 0xea60
 800141c:	4911      	ldr	r1, [pc, #68]	; (8001464 <write+0x64>)
 800141e:	4812      	ldr	r0, [pc, #72]	; (8001468 <write+0x68>)
 8001420:	f001 fa04 	bl	800282c <HAL_ADC_Start_DMA>
	while(!(get_status() & ((1 << TX_DS) | (1 << MAX_RT))))
 8001424:	bf00      	nop
 8001426:	f7ff ff43 	bl	80012b0 <get_status>
 800142a:	4603      	mov	r3, r0
 800142c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f8      	beq.n	8001426 <write+0x26>
	{}

	ce(LOW);
 8001434:	2000      	movs	r0, #0
 8001436:	f7ff fe1b 	bl	8001070 <ce>
	uint8_t status = write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 800143a:	2170      	movs	r1, #112	; 0x70
 800143c:	2007      	movs	r0, #7
 800143e:	f7ff fe87 	bl	8001150 <write_register>
 8001442:	4603      	mov	r3, r0
 8001444:	73fb      	strb	r3, [r7, #15]

	if(status & (1 << MAX_RT))
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <write+0x58>
	{
		flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
 8001450:	f7ff ff08 	bl	8001264 <flush_tx>
		return 0;
 8001454:	2300      	movs	r3, #0
 8001456:	e000      	b.n	800145a <write+0x5a>
	}

	//TX OK 1 or 0
	return 1;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000048 	.word	0x20000048
 8001468:	2001d6d8 	.word	0x2001d6d8

0800146c <startFastWrite>:

void startFastWrite(const void* buf, uint8_t len, const bool multicast, bool startTx)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4603      	mov	r3, r0
 800147c:	70fb      	strb	r3, [r7, #3]
 800147e:	460b      	mov	r3, r1
 8001480:	70bb      	strb	r3, [r7, #2]
 8001482:	4613      	mov	r3, r2
 8001484:	707b      	strb	r3, [r7, #1]
	write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
 8001486:	78bb      	ldrb	r3, [r7, #2]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <startFastWrite+0x24>
 800148c:	22b0      	movs	r2, #176	; 0xb0
 800148e:	e000      	b.n	8001492 <startFastWrite+0x26>
 8001490:	22a0      	movs	r2, #160	; 0xa0
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	4619      	mov	r1, r3
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fe8a 	bl	80011b0 <write_payload>

	if(startTx)
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <startFastWrite+0x3c>
	{
		ce(HIGH);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f7ff fde4 	bl	8001070 <ce>
	}
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <openWritingPipe>:
	uint8_t rx_ready = status & (1 << RX_DR);*/
	return status;
}

void openWritingPipe(uint64_t value)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	e9c7 0100 	strd	r0, r1, [r7]
	write_registerMy(RX_ADDR_P0, (uint8_t*)&value, addr_width);
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <openWritingPipe+0x3c>)
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	463b      	mov	r3, r7
 80014c0:	4619      	mov	r1, r3
 80014c2:	200a      	movs	r0, #10
 80014c4:	f7ff fe14 	bl	80010f0 <write_registerMy>
	write_registerMy(TX_ADDR, (uint8_t*)&value, addr_width);
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <openWritingPipe+0x3c>)
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	463b      	mov	r3, r7
 80014ce:	4619      	mov	r1, r3
 80014d0:	2010      	movs	r0, #16
 80014d2:	f7ff fe0d 	bl	80010f0 <write_registerMy>
	write_register(RX_PW_P0, payload_size);
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <openWritingPipe+0x40>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	4619      	mov	r1, r3
 80014dc:	2011      	movs	r0, #17
 80014de:	f7ff fe37 	bl	8001150 <write_register>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2001d515 	.word	0x2001d515
 80014f0:	2001d50e 	.word	0x2001d50e

080014f4 <toggle_features>:
{
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
}

void toggle_features(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
	uint8_t addr = ACTIVATE;
 80014fa:	2350      	movs	r3, #80	; 0x50
 80014fc:	71fb      	strb	r3, [r7, #7]
	csn(LOW);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff fda0 	bl	8001044 <csn>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 1000);
 8001504:	1df9      	adds	r1, r7, #7
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	2201      	movs	r2, #1
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <toggle_features+0x3c>)
 800150e:	f004 fcce 	bl	8005eae <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)0x73, 1, 1000);
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	2201      	movs	r2, #1
 8001518:	2173      	movs	r1, #115	; 0x73
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <toggle_features+0x3c>)
 800151c:	f004 fcc7 	bl	8005eae <HAL_SPI_Transmit>
	csn(HIGH);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fd8f 	bl	8001044 <csn>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2001d57c 	.word	0x2001d57c

08001534 <enableAckPayload>:
	write_register(DYNPD, 0);
	dynamic_payloads_enabled = false;
}

void enableAckPayload(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_ACK_PAY) | (1 << EN_DPL));
 8001538:	201d      	movs	r0, #29
 800153a:	f7ff fdab 	bl	8001094 <read_register>
 800153e:	4603      	mov	r3, r0
 8001540:	f043 0306 	orr.w	r3, r3, #6
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4619      	mov	r1, r3
 8001548:	201d      	movs	r0, #29
 800154a:	f7ff fe01 	bl	8001150 <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P1) | (1 << DPL_P0));
 800154e:	201c      	movs	r0, #28
 8001550:	f7ff fda0 	bl	8001094 <read_register>
 8001554:	4603      	mov	r3, r0
 8001556:	f043 0303 	orr.w	r3, r3, #3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4619      	mov	r1, r3
 800155e:	201c      	movs	r0, #28
 8001560:	f7ff fdf6 	bl	8001150 <write_register>
	dynamic_payloads_enabled = true;
 8001564:	4b02      	ldr	r3, [pc, #8]	; (8001570 <enableAckPayload+0x3c>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2001dc68 	.word	0x2001dc68

08001574 <isAckPayloadAvailable>:
	HAL_SPI_Transmit(&hspi2, (uint8_t*)current, data_len, 1000);
	csn(HIGH);
}

bool isAckPayloadAvailable(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	return !(read_register(FIFO_STATUS) & (1 << RX_EMPTY));
 8001578:	2017      	movs	r0, #23
 800157a:	f7ff fd8b 	bl	8001094 <read_register>
 800157e:	4603      	mov	r3, r0
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}

08001592 <setPALevel>:
		write_register(EN_AA, en_aa);
	}
}

void setPALevel(uint8_t level)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b084      	sub	sp, #16
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 800159c:	2006      	movs	r0, #6
 800159e:	f7ff fd79 	bl	8001094 <read_register>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f023 0307 	bic.w	r3, r3, #7
 80015a8:	73fb      	strb	r3, [r7, #15]

  if(level > 3) // If invalid level, go to max PA
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d902      	bls.n	80015b6 <setPALevel+0x24>
  {
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
 80015b0:	2307      	movs	r3, #7
 80015b2:	71fb      	strb	r3, [r7, #7]
 80015b4:	e004      	b.n	80015c0 <setPALevel+0x2e>
  }
  else
  {
	  level = (level << 1) + 1;	 		// Else set level as requested
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	71fb      	strb	r3, [r7, #7]
  }

  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	4619      	mov	r1, r3
 80015cc:	2006      	movs	r0, #6
 80015ce:	f7ff fdbf 	bl	8001150 <write_register>
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <setDataRate>:
{
	return (read_register(RF_SETUP) & ((1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH))) >> 1;
}

bool setDataRate(rf24_datarate_e speed)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = read_register(RF_SETUP);
 80015ea:	2006      	movs	r0, #6
 80015ec:	f7ff fd52 	bl	8001094 <read_register>
 80015f0:	4603      	mov	r3, r0
 80015f2:	73bb      	strb	r3, [r7, #14]
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 80015f4:	7bbb      	ldrb	r3, [r7, #14]
 80015f6:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80015fa:	73bb      	strb	r3, [r7, #14]
	txDelay = 85;
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <setDataRate+0x7c>)
 80015fe:	2255      	movs	r2, #85	; 0x55
 8001600:	701a      	strb	r2, [r3, #0]

	if(speed == RF24_250KBPS)
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d107      	bne.n	8001618 <setDataRate+0x3c>
	{
		setup |= (1 << RF_DR_LOW);
 8001608:	7bbb      	ldrb	r3, [r7, #14]
 800160a:	f043 0320 	orr.w	r3, r3, #32
 800160e:	73bb      	strb	r3, [r7, #14]
		txDelay = 155;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <setDataRate+0x7c>)
 8001612:	229b      	movs	r2, #155	; 0x9b
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	e009      	b.n	800162c <setDataRate+0x50>
	}
	else
	{
		if(speed == RF24_2MBPS)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d106      	bne.n	800162c <setDataRate+0x50>
		{
			setup |= (1 << RF_DR_HIGH);
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	73bb      	strb	r3, [r7, #14]
			txDelay = 65;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <setDataRate+0x7c>)
 8001628:	2241      	movs	r2, #65	; 0x41
 800162a:	701a      	strb	r2, [r3, #0]
		}
	}

	write_register(RF_SETUP, setup);
 800162c:	7bbb      	ldrb	r3, [r7, #14]
 800162e:	4619      	mov	r1, r3
 8001630:	2006      	movs	r0, #6
 8001632:	f7ff fd8d 	bl	8001150 <write_register>
	uint8_t ggg = read_register(RF_SETUP);
 8001636:	2006      	movs	r0, #6
 8001638:	f7ff fd2c 	bl	8001094 <read_register>
 800163c:	4603      	mov	r3, r0
 800163e:	737b      	strb	r3, [r7, #13]

	if(ggg == setup)
 8001640:	7b7a      	ldrb	r2, [r7, #13]
 8001642:	7bbb      	ldrb	r3, [r7, #14]
 8001644:	429a      	cmp	r2, r3
 8001646:	d101      	bne.n	800164c <setDataRate+0x70>
	{
		result = true;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2001d516 	.word	0x2001d516

0800165c <setRetries>:
	uint8_t disable = read_register(NRF_CONFIG) & ~(1 << EN_CRC);
	write_register(NRF_CONFIG, disable);
}

void setRetries(uint8_t delay, uint8_t count)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	460a      	mov	r2, r1
 8001666:	71fb      	strb	r3, [r7, #7]
 8001668:	4613      	mov	r3, r2
 800166a:	71bb      	strb	r3, [r7, #6]
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	b25a      	sxtb	r2, r3
 8001672:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	b25b      	sxtb	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b25b      	sxtb	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	2004      	movs	r0, #4
 8001686:	f7ff fd63 	bl	8001150 <write_register>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_MspInit+0x64>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	4a16      	ldr	r2, [pc, #88]	; (80016f8 <HAL_MspInit+0x64>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6613      	str	r3, [r2, #96]	; 0x60
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_MspInit+0x64>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_MspInit+0x64>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_MspInit+0x64>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	6593      	str	r3, [r2, #88]	; 0x58
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_MspInit+0x64>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	2001      	movs	r0, #1
 80016d0:	f002 fbbd 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 80016d4:	2001      	movs	r0, #1
 80016d6:	f002 fbd4 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	2004      	movs	r0, #4
 80016e0:	f002 fbb5 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80016e4:	2004      	movs	r0, #4
 80016e6:	f002 fbcc 	bl	8003e82 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016ea:	f003 fba5 	bl	8004e38 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000

080016fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a6a      	ldr	r2, [pc, #424]	; (80018b4 <HAL_ADC_MspInit+0x1b8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d140      	bne.n	8001790 <HAL_ADC_MspInit+0x94>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800170e:	4b6a      	ldr	r3, [pc, #424]	; (80018b8 <HAL_ADC_MspInit+0x1bc>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	4a69      	ldr	r2, [pc, #420]	; (80018b8 <HAL_ADC_MspInit+0x1bc>)
 8001714:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171a:	4b67      	ldr	r3, [pc, #412]	; (80018b8 <HAL_ADC_MspInit+0x1bc>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8001726:	4b65      	ldr	r3, [pc, #404]	; (80018bc <HAL_ADC_MspInit+0x1c0>)
 8001728:	4a65      	ldr	r2, [pc, #404]	; (80018c0 <HAL_ADC_MspInit+0x1c4>)
 800172a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800172c:	4b63      	ldr	r3, [pc, #396]	; (80018bc <HAL_ADC_MspInit+0x1c0>)
 800172e:	2224      	movs	r2, #36	; 0x24
 8001730:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001732:	4b62      	ldr	r3, [pc, #392]	; (80018bc <HAL_ADC_MspInit+0x1c0>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001738:	4b60      	ldr	r3, [pc, #384]	; (80018bc <HAL_ADC_MspInit+0x1c0>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <HAL_ADC_MspInit+0x1c0>)
 8001740:	2280      	movs	r2, #128	; 0x80
 8001742:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001744:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <HAL_ADC_MspInit+0x1c0>)
 8001746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800174a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800174c:	4b5b      	ldr	r3, [pc, #364]	; (80018bc <HAL_ADC_MspInit+0x1c0>)
 800174e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001752:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001754:	4b59      	ldr	r3, [pc, #356]	; (80018bc <HAL_ADC_MspInit+0x1c0>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800175a:	4b58      	ldr	r3, [pc, #352]	; (80018bc <HAL_ADC_MspInit+0x1c0>)
 800175c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001760:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001762:	4856      	ldr	r0, [pc, #344]	; (80018bc <HAL_ADC_MspInit+0x1c0>)
 8001764:	f002 fba8 	bl	8003eb8 <HAL_DMA_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800176e:	f7ff fc25 	bl	8000fbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a51      	ldr	r2, [pc, #324]	; (80018bc <HAL_ADC_MspInit+0x1c0>)
 8001776:	655a      	str	r2, [r3, #84]	; 0x54
 8001778:	4a50      	ldr	r2, [pc, #320]	; (80018bc <HAL_ADC_MspInit+0x1c0>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	2012      	movs	r0, #18
 8001784:	f002 fb63 	bl	8003e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001788:	2012      	movs	r0, #18
 800178a:	f002 fb7a 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 800178e:	e08c      	b.n	80018aa <HAL_ADC_MspInit+0x1ae>
  else if(hadc->Instance==ADC4)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a4b      	ldr	r2, [pc, #300]	; (80018c4 <HAL_ADC_MspInit+0x1c8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d141      	bne.n	800181e <HAL_ADC_MspInit+0x122>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800179a:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <HAL_ADC_MspInit+0x1cc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a49      	ldr	r2, [pc, #292]	; (80018c8 <HAL_ADC_MspInit+0x1cc>)
 80017a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80017a4:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <HAL_ADC_MspInit+0x1cc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10b      	bne.n	80017c4 <HAL_ADC_MspInit+0xc8>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80017ac:	4b42      	ldr	r3, [pc, #264]	; (80018b8 <HAL_ADC_MspInit+0x1bc>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	4a41      	ldr	r2, [pc, #260]	; (80018b8 <HAL_ADC_MspInit+0x1bc>)
 80017b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <HAL_ADC_MspInit+0x1bc>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
    hdma_adc4.Instance = DMA1_Channel2;
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <HAL_ADC_MspInit+0x1d0>)
 80017c6:	4a42      	ldr	r2, [pc, #264]	; (80018d0 <HAL_ADC_MspInit+0x1d4>)
 80017c8:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80017ca:	4b40      	ldr	r3, [pc, #256]	; (80018cc <HAL_ADC_MspInit+0x1d0>)
 80017cc:	2226      	movs	r2, #38	; 0x26
 80017ce:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d0:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <HAL_ADC_MspInit+0x1d0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <HAL_ADC_MspInit+0x1d0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80017dc:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_ADC_MspInit+0x1d0>)
 80017de:	2280      	movs	r2, #128	; 0x80
 80017e0:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017e2:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <HAL_ADC_MspInit+0x1d0>)
 80017e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e8:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ea:	4b38      	ldr	r3, [pc, #224]	; (80018cc <HAL_ADC_MspInit+0x1d0>)
 80017ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f0:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 80017f2:	4b36      	ldr	r3, [pc, #216]	; (80018cc <HAL_ADC_MspInit+0x1d0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017f8:	4b34      	ldr	r3, [pc, #208]	; (80018cc <HAL_ADC_MspInit+0x1d0>)
 80017fa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80017fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001800:	4832      	ldr	r0, [pc, #200]	; (80018cc <HAL_ADC_MspInit+0x1d0>)
 8001802:	f002 fb59 	bl	8003eb8 <HAL_DMA_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_ADC_MspInit+0x114>
      Error_Handler();
 800180c:	f7ff fbd6 	bl	8000fbc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a2e      	ldr	r2, [pc, #184]	; (80018cc <HAL_ADC_MspInit+0x1d0>)
 8001814:	655a      	str	r2, [r3, #84]	; 0x54
 8001816:	4a2d      	ldr	r2, [pc, #180]	; (80018cc <HAL_ADC_MspInit+0x1d0>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800181c:	e045      	b.n	80018aa <HAL_ADC_MspInit+0x1ae>
  else if(hadc->Instance==ADC5)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a2c      	ldr	r2, [pc, #176]	; (80018d4 <HAL_ADC_MspInit+0x1d8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d140      	bne.n	80018aa <HAL_ADC_MspInit+0x1ae>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_ADC_MspInit+0x1cc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <HAL_ADC_MspInit+0x1cc>)
 8001830:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001832:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_ADC_MspInit+0x1cc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d10b      	bne.n	8001852 <HAL_ADC_MspInit+0x156>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HAL_ADC_MspInit+0x1bc>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <HAL_ADC_MspInit+0x1bc>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_ADC_MspInit+0x1bc>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel1;
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_ADC_MspInit+0x1dc>)
 8001854:	4a21      	ldr	r2, [pc, #132]	; (80018dc <HAL_ADC_MspInit+0x1e0>)
 8001856:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <HAL_ADC_MspInit+0x1dc>)
 800185a:	2227      	movs	r2, #39	; 0x27
 800185c:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800185e:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <HAL_ADC_MspInit+0x1dc>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001864:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <HAL_ADC_MspInit+0x1dc>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_ADC_MspInit+0x1dc>)
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_ADC_MspInit+0x1dc>)
 8001872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001876:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_ADC_MspInit+0x1dc>)
 800187a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800187e:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_ADC_MspInit+0x1dc>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_ADC_MspInit+0x1dc>)
 8001888:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800188c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800188e:	4812      	ldr	r0, [pc, #72]	; (80018d8 <HAL_ADC_MspInit+0x1dc>)
 8001890:	f002 fb12 	bl	8003eb8 <HAL_DMA_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_ADC_MspInit+0x1a2>
      Error_Handler();
 800189a:	f7ff fb8f 	bl	8000fbc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <HAL_ADC_MspInit+0x1dc>)
 80018a2:	655a      	str	r2, [r3, #84]	; 0x54
 80018a4:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <HAL_ADC_MspInit+0x1dc>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	50000100 	.word	0x50000100
 80018b8:	40021000 	.word	0x40021000
 80018bc:	2001dc08 	.word	0x2001dc08
 80018c0:	40020408 	.word	0x40020408
 80018c4:	50000500 	.word	0x50000500
 80018c8:	2001d518 	.word	0x2001d518
 80018cc:	2001d51c 	.word	0x2001d51c
 80018d0:	4002001c 	.word	0x4002001c
 80018d4:	50000600 	.word	0x50000600
 80018d8:	2001d744 	.word	0x2001d744
 80018dc:	40020008 	.word	0x40020008

080018e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08e      	sub	sp, #56	; 0x38
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a5b      	ldr	r2, [pc, #364]	; (8001a6c <HAL_UART_MspInit+0x18c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d152      	bne.n	80019a8 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001902:	4b5b      	ldr	r3, [pc, #364]	; (8001a70 <HAL_UART_MspInit+0x190>)
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	4a5a      	ldr	r2, [pc, #360]	; (8001a70 <HAL_UART_MspInit+0x190>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800190e:	4b58      	ldr	r3, [pc, #352]	; (8001a70 <HAL_UART_MspInit+0x190>)
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	623b      	str	r3, [r7, #32]
 8001918:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	4b55      	ldr	r3, [pc, #340]	; (8001a70 <HAL_UART_MspInit+0x190>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a54      	ldr	r2, [pc, #336]	; (8001a70 <HAL_UART_MspInit+0x190>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001926:	4b52      	ldr	r3, [pc, #328]	; (8001a70 <HAL_UART_MspInit+0x190>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001932:	230c      	movs	r3, #12
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001942:	230c      	movs	r3, #12
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001950:	f002 fe94 	bl	800467c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 8001954:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <HAL_UART_MspInit+0x194>)
 8001956:	4a48      	ldr	r2, [pc, #288]	; (8001a78 <HAL_UART_MspInit+0x198>)
 8001958:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800195a:	4b46      	ldr	r3, [pc, #280]	; (8001a74 <HAL_UART_MspInit+0x194>)
 800195c:	2223      	movs	r2, #35	; 0x23
 800195e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001960:	4b44      	ldr	r3, [pc, #272]	; (8001a74 <HAL_UART_MspInit+0x194>)
 8001962:	2210      	movs	r2, #16
 8001964:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001966:	4b43      	ldr	r3, [pc, #268]	; (8001a74 <HAL_UART_MspInit+0x194>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800196c:	4b41      	ldr	r3, [pc, #260]	; (8001a74 <HAL_UART_MspInit+0x194>)
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001972:	4b40      	ldr	r3, [pc, #256]	; (8001a74 <HAL_UART_MspInit+0x194>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001978:	4b3e      	ldr	r3, [pc, #248]	; (8001a74 <HAL_UART_MspInit+0x194>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800197e:	4b3d      	ldr	r3, [pc, #244]	; (8001a74 <HAL_UART_MspInit+0x194>)
 8001980:	2200      	movs	r2, #0
 8001982:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001984:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <HAL_UART_MspInit+0x194>)
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800198a:	483a      	ldr	r0, [pc, #232]	; (8001a74 <HAL_UART_MspInit+0x194>)
 800198c:	f002 fa94 	bl	8003eb8 <HAL_DMA_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8001996:	f7ff fb11 	bl	8000fbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a35      	ldr	r2, [pc, #212]	; (8001a74 <HAL_UART_MspInit+0x194>)
 800199e:	675a      	str	r2, [r3, #116]	; 0x74
 80019a0:	4a34      	ldr	r2, [pc, #208]	; (8001a74 <HAL_UART_MspInit+0x194>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019a6:	e05d      	b.n	8001a64 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a33      	ldr	r2, [pc, #204]	; (8001a7c <HAL_UART_MspInit+0x19c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d12a      	bne.n	8001a08 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b2:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_UART_MspInit+0x190>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b6:	4a2e      	ldr	r2, [pc, #184]	; (8001a70 <HAL_UART_MspInit+0x190>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	6613      	str	r3, [r2, #96]	; 0x60
 80019be:	4b2c      	ldr	r3, [pc, #176]	; (8001a70 <HAL_UART_MspInit+0x190>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <HAL_UART_MspInit+0x190>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	4a28      	ldr	r2, [pc, #160]	; (8001a70 <HAL_UART_MspInit+0x190>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <HAL_UART_MspInit+0x190>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f4:	2307      	movs	r3, #7
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fc:	4619      	mov	r1, r3
 80019fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a02:	f002 fe3b 	bl	800467c <HAL_GPIO_Init>
}
 8001a06:	e02d      	b.n	8001a64 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <HAL_UART_MspInit+0x1a0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d128      	bne.n	8001a64 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_UART_MspInit+0x190>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	4a16      	ldr	r2, [pc, #88]	; (8001a70 <HAL_UART_MspInit+0x190>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_UART_MspInit+0x190>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_UART_MspInit+0x190>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <HAL_UART_MspInit+0x190>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_UART_MspInit+0x190>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a54:	2307      	movs	r3, #7
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4809      	ldr	r0, [pc, #36]	; (8001a84 <HAL_UART_MspInit+0x1a4>)
 8001a60:	f002 fe0c 	bl	800467c <HAL_GPIO_Init>
}
 8001a64:	bf00      	nop
 8001a66:	3738      	adds	r7, #56	; 0x38
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40008000 	.word	0x40008000
 8001a70:	40021000 	.word	0x40021000
 8001a74:	2001dac4 	.word	0x2001dac4
 8001a78:	40020030 	.word	0x40020030
 8001a7c:	40013800 	.word	0x40013800
 8001a80:	40004800 	.word	0x40004800
 8001a84:	48000400 	.word	0x48000400

08001a88 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	; 0x30
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP3)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a46      	ldr	r2, [pc, #280]	; (8001bc0 <HAL_OPAMP_MspInit+0x138>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d118      	bne.n	8001adc <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP3_MspInit 0 */

  /* USER CODE END OPAMP3_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	4b46      	ldr	r3, [pc, #280]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	4a45      	ldr	r2, [pc, #276]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab6:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP3 GPIO Configuration
    PB0     ------> OPAMP3_VINP
    PB2     ------> OPAMP3_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	483c      	ldr	r0, [pc, #240]	; (8001bc8 <HAL_OPAMP_MspInit+0x140>)
 8001ad6:	f002 fdd1 	bl	800467c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8001ada:	e06d      	b.n	8001bb8 <HAL_OPAMP_MspInit+0x130>
  else if(hopamp->Instance==OPAMP5)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a3a      	ldr	r2, [pc, #232]	; (8001bcc <HAL_OPAMP_MspInit+0x144>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d131      	bne.n	8001b4a <HAL_OPAMP_MspInit+0xc2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae6:	4b37      	ldr	r3, [pc, #220]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	4a36      	ldr	r2, [pc, #216]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af2:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	4a30      	ldr	r2, [pc, #192]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0a:	4b2e      	ldr	r3, [pc, #184]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b16:	2308      	movs	r3, #8
 8001b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4619      	mov	r1, r3
 8001b28:	4829      	ldr	r0, [pc, #164]	; (8001bd0 <HAL_OPAMP_MspInit+0x148>)
 8001b2a:	f002 fda7 	bl	800467c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b34:	2303      	movs	r3, #3
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	4821      	ldr	r0, [pc, #132]	; (8001bc8 <HAL_OPAMP_MspInit+0x140>)
 8001b44:	f002 fd9a 	bl	800467c <HAL_GPIO_Init>
}
 8001b48:	e036      	b.n	8001bb8 <HAL_OPAMP_MspInit+0x130>
  else if(hopamp->Instance==OPAMP6)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <HAL_OPAMP_MspInit+0x14c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d131      	bne.n	8001bb8 <HAL_OPAMP_MspInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b58:	4a1a      	ldr	r2, [pc, #104]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_OPAMP_MspInit+0x13c>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9a:	f002 fd6f 	bl	800467c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <HAL_OPAMP_MspInit+0x140>)
 8001bb4:	f002 fd62 	bl	800467c <HAL_GPIO_Init>
}
 8001bb8:	bf00      	nop
 8001bba:	3730      	adds	r7, #48	; 0x30
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40010308 	.word	0x40010308
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	48000400 	.word	0x48000400
 8001bcc:	40010310 	.word	0x40010310
 8001bd0:	48000800 	.word	0x48000800
 8001bd4:	40010314 	.word	0x40010314

08001bd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a26      	ldr	r2, [pc, #152]	; (8001c90 <HAL_SPI_MspInit+0xb8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d146      	bne.n	8001c88 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <HAL_SPI_MspInit+0xbc>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <HAL_SPI_MspInit+0xbc>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c04:	6593      	str	r3, [r2, #88]	; 0x58
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <HAL_SPI_MspInit+0xbc>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <HAL_SPI_MspInit+0xbc>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <HAL_SPI_MspInit+0xbc>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_SPI_MspInit+0xbc>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_SPI_MspInit+0xbc>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <HAL_SPI_MspInit+0xbc>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_SPI_MspInit+0xbc>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001c42:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c54:	2305      	movs	r3, #5
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480e      	ldr	r0, [pc, #56]	; (8001c98 <HAL_SPI_MspInit+0xc0>)
 8001c60:	f002 fd0c 	bl	800467c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c76:	2305      	movs	r3, #5
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c84:	f002 fcfa 	bl	800467c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c88:	bf00      	nop
 8001c8a:	3728      	adds	r7, #40	; 0x28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40003800 	.word	0x40003800
 8001c94:	40021000 	.word	0x40021000
 8001c98:	48000400 	.word	0x48000400

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <HardFault_Handler+0x4>

08001cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <MemManage_Handler+0x4>

08001cb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf0:	f000 f8da 	bl	8001ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/38/39/40/41.
  */
void PVD_PVM_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8001cfc:	f003 f842 	bl	8004d84 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001d08:	f002 fb48 	bl	800439c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <DMA1_Channel1_IRQHandler+0x10>)
 8001d16:	f002 f9f2 	bl	80040fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2001d744 	.word	0x2001d744

08001d24 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <DMA1_Channel2_IRQHandler+0x10>)
 8001d2a:	f002 f9e8 	bl	80040fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2001d51c 	.word	0x2001d51c

08001d38 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <DMA1_Channel3_IRQHandler+0x10>)
 8001d3e:	f002 f9de 	bl	80040fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2001dac4 	.word	0x2001dac4

08001d4c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <ADC1_2_IRQHandler+0x10>)
 8001d52:	f000 fe39 	bl	80029c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2001d66c 	.word	0x2001d66c

08001d60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d68:	f002 fe3c 	bl	80049e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <DMA2_Channel1_IRQHandler+0x10>)
 8001d76:	f002 f9c2 	bl	80040fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2001dc08 	.word	0x2001dc08

08001d84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <SystemInit+0x28>)
 8001d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8e:	4a07      	ldr	r2, [pc, #28]	; (8001dac <SystemInit+0x28>)
 8001d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <SystemInit+0x28>)
 8001d9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d9e:	609a      	str	r2, [r3, #8]
#endif
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001db0:	480d      	ldr	r0, [pc, #52]	; (8001de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001db2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <LoopForever+0x6>)
  ldr r1, =_edata
 8001db6:	490e      	ldr	r1, [pc, #56]	; (8001df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001db8:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <LoopForever+0xe>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001dbc:	e002      	b.n	8001dc4 <LoopCopyDataInit>

08001dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc2:	3304      	adds	r3, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc8:	d3f9      	bcc.n	8001dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dcc:	4c0b      	ldr	r4, [pc, #44]	; (8001dfc <LoopForever+0x16>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd0:	e001      	b.n	8001dd6 <LoopFillZerobss>

08001dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd4:	3204      	adds	r2, #4

08001dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd8:	d3fb      	bcc.n	8001dd2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dda:	f7ff ffd3 	bl	8001d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dde:	f005 fb81 	bl	80074e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001de2:	f7fe fb9d 	bl	8000520 <main>

08001de6 <LoopForever>:

LoopForever:
    b LoopForever
 8001de6:	e7fe      	b.n	8001de6 <LoopForever>
  ldr   r0, =_estack
 8001de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001df4:	08007688 	.word	0x08007688
  ldr r2, =_sbss
 8001df8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001dfc:	2001dc70 	.word	0x2001dc70

08001e00 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC3_IRQHandler>

08001e02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f002 f813 	bl	8003e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e12:	2000      	movs	r0, #0
 8001e14:	f000 f80e 	bl	8001e34 <HAL_InitTick>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	71fb      	strb	r3, [r7, #7]
 8001e22:	e001      	b.n	8001e28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e24:	f7ff fc36 	bl	8001694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e28:	79fb      	ldrb	r3, [r7, #7]

}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_InitTick+0x68>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d022      	beq.n	8001e8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_InitTick+0x6c>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <HAL_InitTick+0x68>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 f81e 	bl	8003e9e <HAL_SYSTICK_Config>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10f      	bne.n	8001e88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b0f      	cmp	r3, #15
 8001e6c:	d809      	bhi.n	8001e82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	f04f 30ff 	mov.w	r0, #4294967295
 8001e76:	f001 ffea 	bl	8003e4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <HAL_InitTick+0x70>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	e007      	b.n	8001e92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	e004      	b.n	8001e92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e001      	b.n	8001e92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000004 	.word	0x20000004

08001ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_IncTick+0x1c>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_IncTick+0x20>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <HAL_IncTick+0x1c>)
 8001eb8:	6013      	str	r3, [r2, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	2001dc6c 	.word	0x2001dc6c
 8001ec8:	20000008 	.word	0x20000008

08001ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_GetTick+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	2001dc6c 	.word	0x2001dc6c

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff ffee 	bl	8001ecc <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d004      	beq.n	8001f08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_Delay+0x40>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f08:	bf00      	nop
 8001f0a:	f7ff ffdf 	bl	8001ecc <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d8f7      	bhi.n	8001f0a <HAL_Delay+0x26>
  {
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000008 	.word	0x20000008

08001f28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	609a      	str	r2, [r3, #8]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	609a      	str	r2, [r3, #8]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3360      	adds	r3, #96	; 0x60
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <LL_ADC_SetOffset+0x44>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fc8:	bf00      	nop
 8001fca:	371c      	adds	r7, #28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	03fff000 	.word	0x03fff000

08001fd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3360      	adds	r3, #96	; 0x60
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3360      	adds	r3, #96	; 0x60
 8002014:	461a      	mov	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	431a      	orrs	r2, r3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800202e:	bf00      	nop
 8002030:	371c      	adds	r7, #28
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800203a:	b480      	push	{r7}
 800203c:	b087      	sub	sp, #28
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3360      	adds	r3, #96	; 0x60
 800204a:	461a      	mov	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	431a      	orrs	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002064:	bf00      	nop
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3360      	adds	r3, #96	; 0x60
 8002080:	461a      	mov	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	431a      	orrs	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800209a:	bf00      	nop
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	615a      	str	r2, [r3, #20]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b087      	sub	sp, #28
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	3330      	adds	r3, #48	; 0x30
 8002102:	461a      	mov	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	4413      	add	r3, r2
 8002110:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	211f      	movs	r1, #31
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	401a      	ands	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0e9b      	lsrs	r3, r3, #26
 800212a:	f003 011f 	and.w	r1, r3, #31
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	431a      	orrs	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800213e:	bf00      	nop
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3314      	adds	r3, #20
 8002180:	461a      	mov	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	0e5b      	lsrs	r3, r3, #25
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	4413      	add	r3, r2
 800218e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	0d1b      	lsrs	r3, r3, #20
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	2107      	movs	r1, #7
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	401a      	ands	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	0d1b      	lsrs	r3, r3, #20
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	431a      	orrs	r2, r3
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e0:	43db      	mvns	r3, r3
 80021e2:	401a      	ands	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f003 0318 	and.w	r3, r3, #24
 80021ea:	4908      	ldr	r1, [pc, #32]	; (800220c <LL_ADC_SetChannelSingleDiff+0x44>)
 80021ec:	40d9      	lsrs	r1, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	400b      	ands	r3, r1
 80021f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f6:	431a      	orrs	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	0007ffff 	.word	0x0007ffff

08002210 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 031f 	and.w	r3, r3, #31
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6093      	str	r3, [r2, #8]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800227c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002280:	d101      	bne.n	8002286 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022d0:	d101      	bne.n	80022d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800231c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002320:	f043 0202 	orr.w	r2, r3, #2
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <LL_ADC_IsEnabled+0x18>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <LL_ADC_IsEnabled+0x1a>
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b02      	cmp	r3, #2
 800236c:	d101      	bne.n	8002372 <LL_ADC_IsDisableOngoing+0x18>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <LL_ADC_IsDisableOngoing+0x1a>
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002390:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002394:	f043 0204 	orr.w	r2, r3, #4
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023bc:	f043 0210 	orr.w	r2, r3, #16
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d101      	bne.n	80023e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002406:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800240a:	f043 0220 	orr.w	r2, r3, #32
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b08      	cmp	r3, #8
 8002430:	d101      	bne.n	8002436 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e1ad      	b.n	80027ba <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff f945 	bl	80016fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fef1 	bl	800226c <LL_ADC_IsDeepPowerDownEnabled>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d004      	beq.n	800249a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fed7 	bl	8002248 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff0c 	bl	80022bc <LL_ADC_IsInternalRegulatorEnabled>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d113      	bne.n	80024d2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fef0 	bl	8002294 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80024b4:	4b9e      	ldr	r3, [pc, #632]	; (8002730 <HAL_ADC_Init+0x2ec>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	099b      	lsrs	r3, r3, #6
 80024ba:	4a9e      	ldr	r2, [pc, #632]	; (8002734 <HAL_ADC_Init+0x2f0>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024c4:	e002      	b.n	80024cc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f9      	bne.n	80024c6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fef0 	bl	80022bc <LL_ADC_IsInternalRegulatorEnabled>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10d      	bne.n	80024fe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e6:	f043 0210 	orr.w	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ff64 	bl	80023d0 <LL_ADC_REG_IsConversionOngoing>
 8002508:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 8148 	bne.w	80027a8 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 8144 	bne.w	80027a8 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002524:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002528:	f043 0202 	orr.w	r2, r3, #2
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fefd 	bl	8002334 <LL_ADC_IsEnabled>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d141      	bne.n	80025c4 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002548:	d004      	beq.n	8002554 <HAL_ADC_Init+0x110>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a7a      	ldr	r2, [pc, #488]	; (8002738 <HAL_ADC_Init+0x2f4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d10f      	bne.n	8002574 <HAL_ADC_Init+0x130>
 8002554:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002558:	f7ff feec 	bl	8002334 <LL_ADC_IsEnabled>
 800255c:	4604      	mov	r4, r0
 800255e:	4876      	ldr	r0, [pc, #472]	; (8002738 <HAL_ADC_Init+0x2f4>)
 8002560:	f7ff fee8 	bl	8002334 <LL_ADC_IsEnabled>
 8002564:	4603      	mov	r3, r0
 8002566:	4323      	orrs	r3, r4
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	e012      	b.n	800259a <HAL_ADC_Init+0x156>
 8002574:	4871      	ldr	r0, [pc, #452]	; (800273c <HAL_ADC_Init+0x2f8>)
 8002576:	f7ff fedd 	bl	8002334 <LL_ADC_IsEnabled>
 800257a:	4604      	mov	r4, r0
 800257c:	4870      	ldr	r0, [pc, #448]	; (8002740 <HAL_ADC_Init+0x2fc>)
 800257e:	f7ff fed9 	bl	8002334 <LL_ADC_IsEnabled>
 8002582:	4603      	mov	r3, r0
 8002584:	431c      	orrs	r4, r3
 8002586:	486f      	ldr	r0, [pc, #444]	; (8002744 <HAL_ADC_Init+0x300>)
 8002588:	f7ff fed4 	bl	8002334 <LL_ADC_IsEnabled>
 800258c:	4603      	mov	r3, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d012      	beq.n	80025c4 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a6:	d004      	beq.n	80025b2 <HAL_ADC_Init+0x16e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a62      	ldr	r2, [pc, #392]	; (8002738 <HAL_ADC_Init+0x2f4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_Init+0x172>
 80025b2:	4a65      	ldr	r2, [pc, #404]	; (8002748 <HAL_ADC_Init+0x304>)
 80025b4:	e000      	b.n	80025b8 <HAL_ADC_Init+0x174>
 80025b6:	4a65      	ldr	r2, [pc, #404]	; (800274c <HAL_ADC_Init+0x308>)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4619      	mov	r1, r3
 80025be:	4610      	mov	r0, r2
 80025c0:	f7ff fcb2 	bl	8001f28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7f5b      	ldrb	r3, [r3, #29]
 80025c8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025ce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80025d4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80025da:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025e2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d106      	bne.n	8002600 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	3b01      	subs	r3, #1
 80025f8:	045b      	lsls	r3, r3, #17
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	4b4b      	ldr	r3, [pc, #300]	; (8002750 <HAL_ADC_Init+0x30c>)
 8002624:	4013      	ands	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	430b      	orrs	r3, r1
 800262e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fec0 	bl	80023d0 <LL_ADC_REG_IsConversionOngoing>
 8002650:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fee1 	bl	800241e <LL_ADC_INJ_IsConversionOngoing>
 800265c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d17f      	bne.n	8002764 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d17c      	bne.n	8002764 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800266e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002676:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002686:	f023 0302 	bic.w	r3, r3, #2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	69b9      	ldr	r1, [r7, #24]
 8002690:	430b      	orrs	r3, r1
 8002692:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d017      	beq.n	80026cc <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80026aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6911      	ldr	r1, [r2, #16]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80026ca:	e013      	b.n	80026f4 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026f0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d12a      	bne.n	8002754 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002708:	f023 0304 	bic.w	r3, r3, #4
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002714:	4311      	orrs	r1, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800271a:	4311      	orrs	r1, r2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002720:	430a      	orrs	r2, r1
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0201 	orr.w	r2, r2, #1
 800272c:	611a      	str	r2, [r3, #16]
 800272e:	e019      	b.n	8002764 <HAL_ADC_Init+0x320>
 8002730:	20000000 	.word	0x20000000
 8002734:	053e2d63 	.word	0x053e2d63
 8002738:	50000100 	.word	0x50000100
 800273c:	50000400 	.word	0x50000400
 8002740:	50000500 	.word	0x50000500
 8002744:	50000600 	.word	0x50000600
 8002748:	50000300 	.word	0x50000300
 800274c:	50000700 	.word	0x50000700
 8002750:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d10c      	bne.n	8002786 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f023 010f 	bic.w	r1, r3, #15
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	1e5a      	subs	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
 8002784:	e007      	b.n	8002796 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 020f 	bic.w	r2, r2, #15
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	f023 0303 	bic.w	r3, r3, #3
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80027a6:	e007      	b.n	80027b8 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	f043 0210 	orr.w	r2, r3, #16
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd90      	pop	{r4, r7, pc}
 80027c2:	bf00      	nop

080027c4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_ADC_Stop+0x16>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e023      	b.n	8002822 <HAL_ADC_Stop+0x5e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80027e2:	2103      	movs	r1, #3
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 ff9b 	bl	8003720 <ADC_ConversionStop>
 80027ea:	4603      	mov	r3, r0
 80027ec:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d111      	bne.n	8002818 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f001 f8a1 	bl	800393c <ADC_Disable>
 80027fa:	4603      	mov	r3, r0
 80027fc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d109      	bne.n	8002818 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002808:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002820:	7bfb      	ldrb	r3, [r7, #15]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002840:	d004      	beq.n	800284c <HAL_ADC_Start_DMA+0x20>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_ADC_Start_DMA+0x17c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d101      	bne.n	8002850 <HAL_ADC_Start_DMA+0x24>
 800284c:	4b57      	ldr	r3, [pc, #348]	; (80029ac <HAL_ADC_Start_DMA+0x180>)
 800284e:	e000      	b.n	8002852 <HAL_ADC_Start_DMA+0x26>
 8002850:	4b57      	ldr	r3, [pc, #348]	; (80029b0 <HAL_ADC_Start_DMA+0x184>)
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fcdc 	bl	8002210 <LL_ADC_GetMultimode>
 8002858:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fdb6 	bl	80023d0 <LL_ADC_REG_IsConversionOngoing>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 8096 	bne.w	8002998 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_ADC_Start_DMA+0x4e>
 8002876:	2302      	movs	r3, #2
 8002878:	e091      	b.n	800299e <HAL_ADC_Start_DMA+0x172>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d002      	beq.n	8002894 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b09      	cmp	r3, #9
 8002892:	d17a      	bne.n	800298a <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fff7 	bl	8003888 <ADC_Enable>
 800289a:	4603      	mov	r3, r0
 800289c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d16d      	bne.n	8002980 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a3a      	ldr	r2, [pc, #232]	; (80029a8 <HAL_ADC_Start_DMA+0x17c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d009      	beq.n	80028d6 <HAL_ADC_Start_DMA+0xaa>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a3b      	ldr	r2, [pc, #236]	; (80029b4 <HAL_ADC_Start_DMA+0x188>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d002      	beq.n	80028d2 <HAL_ADC_Start_DMA+0xa6>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	e003      	b.n	80028da <HAL_ADC_Start_DMA+0xae>
 80028d2:	4b39      	ldr	r3, [pc, #228]	; (80029b8 <HAL_ADC_Start_DMA+0x18c>)
 80028d4:	e001      	b.n	80028da <HAL_ADC_Start_DMA+0xae>
 80028d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	4293      	cmp	r3, r2
 80028e0:	d002      	beq.n	80028e8 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002904:	f023 0206 	bic.w	r2, r3, #6
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	661a      	str	r2, [r3, #96]	; 0x60
 800290c:	e002      	b.n	8002914 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002918:	4a28      	ldr	r2, [pc, #160]	; (80029bc <HAL_ADC_Start_DMA+0x190>)
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	4a27      	ldr	r2, [pc, #156]	; (80029c0 <HAL_ADC_Start_DMA+0x194>)
 8002922:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002928:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <HAL_ADC_Start_DMA+0x198>)
 800292a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	221c      	movs	r2, #28
 8002932:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0210 	orr.w	r2, r2, #16
 800294a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3340      	adds	r3, #64	; 0x40
 8002966:	4619      	mov	r1, r3
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f001 fb4c 	bl	8004008 <HAL_DMA_Start_IT>
 8002970:	4603      	mov	r3, r0
 8002972:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fd01 	bl	8002380 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800297e:	e00d      	b.n	800299c <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002988:	e008      	b.n	800299c <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002996:	e001      	b.n	800299c <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002998:	2302      	movs	r3, #2
 800299a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800299c:	7dfb      	ldrb	r3, [r7, #23]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	50000100 	.word	0x50000100
 80029ac:	50000300 	.word	0x50000300
 80029b0:	50000700 	.word	0x50000700
 80029b4:	50000500 	.word	0x50000500
 80029b8:	50000400 	.word	0x50000400
 80029bc:	080039ed 	.word	0x080039ed
 80029c0:	08003ac5 	.word	0x08003ac5
 80029c4:	08003ae1 	.word	0x08003ae1

080029c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029ec:	d004      	beq.n	80029f8 <HAL_ADC_IRQHandler+0x30>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a95      	ldr	r2, [pc, #596]	; (8002c48 <HAL_ADC_IRQHandler+0x280>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_IRQHandler+0x34>
 80029f8:	4b94      	ldr	r3, [pc, #592]	; (8002c4c <HAL_ADC_IRQHandler+0x284>)
 80029fa:	e000      	b.n	80029fe <HAL_ADC_IRQHandler+0x36>
 80029fc:	4b94      	ldr	r3, [pc, #592]	; (8002c50 <HAL_ADC_IRQHandler+0x288>)
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fc06 	bl	8002210 <LL_ADC_GetMultimode>
 8002a04:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d017      	beq.n	8002a40 <HAL_ADC_IRQHandler+0x78>
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d012      	beq.n	8002a40 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d105      	bne.n	8002a32 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f001 f926 	bl	8003c84 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <HAL_ADC_IRQHandler+0x8c>
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10b      	bne.n	8002a6c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8094 	beq.w	8002b88 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 808e 	beq.w	8002b88 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d105      	bne.n	8002a84 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fb1f 	bl	80020cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d072      	beq.n	8002b7a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6b      	ldr	r2, [pc, #428]	; (8002c48 <HAL_ADC_IRQHandler+0x280>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d009      	beq.n	8002ab2 <HAL_ADC_IRQHandler+0xea>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6c      	ldr	r2, [pc, #432]	; (8002c54 <HAL_ADC_IRQHandler+0x28c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d002      	beq.n	8002aae <HAL_ADC_IRQHandler+0xe6>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	e003      	b.n	8002ab6 <HAL_ADC_IRQHandler+0xee>
 8002aae:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_ADC_IRQHandler+0x290>)
 8002ab0:	e001      	b.n	8002ab6 <HAL_ADC_IRQHandler+0xee>
 8002ab2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d008      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d002      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b09      	cmp	r3, #9
 8002ace:	d104      	bne.n	8002ada <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	e014      	b.n	8002b04 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a5a      	ldr	r2, [pc, #360]	; (8002c48 <HAL_ADC_IRQHandler+0x280>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d009      	beq.n	8002af8 <HAL_ADC_IRQHandler+0x130>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a5a      	ldr	r2, [pc, #360]	; (8002c54 <HAL_ADC_IRQHandler+0x28c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d002      	beq.n	8002af4 <HAL_ADC_IRQHandler+0x12c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	e003      	b.n	8002afc <HAL_ADC_IRQHandler+0x134>
 8002af4:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <HAL_ADC_IRQHandler+0x290>)
 8002af6:	e001      	b.n	8002afc <HAL_ADC_IRQHandler+0x134>
 8002af8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002afc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d135      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d12e      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fc55 	bl	80023d0 <LL_ADC_REG_IsConversionOngoing>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11a      	bne.n	8002b62 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 020c 	bic.w	r2, r2, #12
 8002b3a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d112      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b60:	e00b      	b.n	8002b7a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	f043 0210 	orr.w	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe f9d8 	bl	8000f30 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	220c      	movs	r2, #12
 8002b86:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <HAL_ADC_IRQHandler+0x1d4>
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80b2 	beq.w	8002d0c <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80ac 	beq.w	8002d0c <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d105      	bne.n	8002bcc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff faba 	bl	800214a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002bd6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fa75 	bl	80020cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002be2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <HAL_ADC_IRQHandler+0x280>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d009      	beq.n	8002c02 <HAL_ADC_IRQHandler+0x23a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <HAL_ADC_IRQHandler+0x28c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d002      	beq.n	8002bfe <HAL_ADC_IRQHandler+0x236>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	e003      	b.n	8002c06 <HAL_ADC_IRQHandler+0x23e>
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_ADC_IRQHandler+0x290>)
 8002c00:	e001      	b.n	8002c06 <HAL_ADC_IRQHandler+0x23e>
 8002c02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d008      	beq.n	8002c20 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d002      	beq.n	8002c20 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b07      	cmp	r3, #7
 8002c1e:	d104      	bne.n	8002c2a <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	623b      	str	r3, [r7, #32]
 8002c28:	e01e      	b.n	8002c68 <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a06      	ldr	r2, [pc, #24]	; (8002c48 <HAL_ADC_IRQHandler+0x280>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d013      	beq.n	8002c5c <HAL_ADC_IRQHandler+0x294>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a06      	ldr	r2, [pc, #24]	; (8002c54 <HAL_ADC_IRQHandler+0x28c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d002      	beq.n	8002c44 <HAL_ADC_IRQHandler+0x27c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	e00d      	b.n	8002c60 <HAL_ADC_IRQHandler+0x298>
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <HAL_ADC_IRQHandler+0x290>)
 8002c46:	e00b      	b.n	8002c60 <HAL_ADC_IRQHandler+0x298>
 8002c48:	50000100 	.word	0x50000100
 8002c4c:	50000300 	.word	0x50000300
 8002c50:	50000700 	.word	0x50000700
 8002c54:	50000500 	.word	0x50000500
 8002c58:	50000400 	.word	0x50000400
 8002c5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c60:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10c      	bne.n	8002c88 <HAL_ADC_IRQHandler+0x2c0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d142      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x336>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d03f      	beq.n	8002cfe <HAL_ADC_IRQHandler+0x336>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d13a      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x336>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d133      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x336>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d12e      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x336>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fbba 	bl	800241e <LL_ADC_INJ_IsConversionOngoing>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d11a      	bne.n	8002ce6 <HAL_ADC_IRQHandler+0x31e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cbe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d112      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x336>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	f043 0201 	orr.w	r2, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ce4:	e00b      	b.n	8002cfe <HAL_ADC_IRQHandler+0x336>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	f043 0210 	orr.w	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf6:	f043 0201 	orr.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 ff98 	bl	8003c34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2260      	movs	r2, #96	; 0x60
 8002d0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d011      	beq.n	8002d3a <HAL_ADC_IRQHandler+0x372>
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00c      	beq.n	8002d3a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7fe f93b 	bl	8000fa8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2280      	movs	r2, #128	; 0x80
 8002d38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d012      	beq.n	8002d6a <HAL_ADC_IRQHandler+0x3a2>
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00d      	beq.n	8002d6a <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 ff7e 	bl	8003c5c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d012      	beq.n	8002d9a <HAL_ADC_IRQHandler+0x3d2>
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00d      	beq.n	8002d9a <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 ff70 	bl	8003c70 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d043      	beq.n	8002e2c <HAL_ADC_IRQHandler+0x464>
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d03e      	beq.n	8002e2c <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 8002db6:	2301      	movs	r3, #1
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	e021      	b.n	8002e00 <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d015      	beq.n	8002dee <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dca:	d004      	beq.n	8002dd6 <HAL_ADC_IRQHandler+0x40e>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a27      	ldr	r2, [pc, #156]	; (8002e70 <HAL_ADC_IRQHandler+0x4a8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_ADC_IRQHandler+0x412>
 8002dd6:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_ADC_IRQHandler+0x4ac>)
 8002dd8:	e000      	b.n	8002ddc <HAL_ADC_IRQHandler+0x414>
 8002dda:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <HAL_ADC_IRQHandler+0x4b0>)
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fa25 	bl	800222c <LL_ADC_GetMultiDMATransfer>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8002de8:	2301      	movs	r3, #1
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
 8002dec:	e008      	b.n	8002e00 <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d10e      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e16:	f043 0202 	orr.w	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f836 	bl	8002e90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2210      	movs	r2, #16
 8002e2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d018      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x4a0>
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d013      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	f043 0208 	orr.w	r2, r3, #8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e60:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fef0 	bl	8003c48 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002e68:	bf00      	nop
 8002e6a:	3728      	adds	r7, #40	; 0x28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	50000100 	.word	0x50000100
 8002e74:	50000300 	.word	0x50000300
 8002e78:	50000700 	.word	0x50000700

08002e7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b0b6      	sub	sp, #216	; 0xd8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d102      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x24>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	f000 bc12 	b.w	80036ec <HAL_ADC_ConfigChannel+0x848>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fa7b 	bl	80023d0 <LL_ADC_REG_IsConversionOngoing>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f040 83f2 	bne.w	80036c6 <HAL_ADC_ConfigChannel+0x822>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f7ff f8ff 	bl	80020f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fa69 	bl	80023d0 <LL_ADC_REG_IsConversionOngoing>
 8002efe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fa89 	bl	800241e <LL_ADC_INJ_IsConversionOngoing>
 8002f0c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 81d9 	bne.w	80032cc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 81d4 	bne.w	80032cc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f2c:	d10f      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f7ff f919 	bl	8002170 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff f8ad 	bl	80020a6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002f4c:	e00e      	b.n	8002f6c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6819      	ldr	r1, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f7ff f908 	bl	8002170 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff f89d 	bl	80020a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	08db      	lsrs	r3, r3, #3
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d022      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6919      	ldr	r1, [r3, #16]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f9e:	f7fe fff7 	bl	8001f90 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6919      	ldr	r1, [r3, #16]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f7ff f843 	bl	800203a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6919      	ldr	r1, [r3, #16]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	7f1b      	ldrb	r3, [r3, #28]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d102      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x126>
 8002fc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc8:	e000      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x128>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f7ff f84f 	bl	8002070 <LL_ADC_SetOffsetSaturation>
 8002fd2:	e17b      	b.n	80032cc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fffc 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x15c>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe fff1 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	0e9b      	lsrs	r3, r3, #26
 8002ffa:	f003 021f 	and.w	r2, r3, #31
 8002ffe:	e01e      	b.n	800303e <HAL_ADC_ConfigChannel+0x19a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe ffe6 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 800300c:	4603      	mov	r3, r0
 800300e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800301e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003022:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003026:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800302e:	2320      	movs	r3, #32
 8003030:	e004      	b.n	800303c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003032:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x1b2>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	0e9b      	lsrs	r3, r3, #26
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	e018      	b.n	8003088 <HAL_ADC_ConfigChannel+0x1e4>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003062:	fa93 f3a3 	rbit	r3, r3
 8003066:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800306a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800306e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003072:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800307a:	2320      	movs	r3, #32
 800307c:	e004      	b.n	8003088 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800307e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	429a      	cmp	r2, r3
 800308a:	d106      	bne.n	800309a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2200      	movs	r2, #0
 8003092:	2100      	movs	r1, #0
 8003094:	4618      	mov	r0, r3
 8003096:	f7fe ffb5 	bl	8002004 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2101      	movs	r1, #1
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe ff99 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10a      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x222>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2101      	movs	r1, #1
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe ff8e 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 80030bc:	4603      	mov	r3, r0
 80030be:	0e9b      	lsrs	r3, r3, #26
 80030c0:	f003 021f 	and.w	r2, r3, #31
 80030c4:	e01e      	b.n	8003104 <HAL_ADC_ConfigChannel+0x260>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2101      	movs	r1, #1
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe ff83 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80030ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80030f4:	2320      	movs	r3, #32
 80030f6:	e004      	b.n	8003102 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80030f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030fc:	fab3 f383 	clz	r3, r3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <HAL_ADC_ConfigChannel+0x278>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	0e9b      	lsrs	r3, r3, #26
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	e018      	b.n	800314e <HAL_ADC_ConfigChannel+0x2aa>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003130:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003138:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003140:	2320      	movs	r3, #32
 8003142:	e004      	b.n	800314e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003144:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	429a      	cmp	r2, r3
 8003150:	d106      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	2101      	movs	r1, #1
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe ff52 	bl	8002004 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2102      	movs	r1, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe ff36 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 800316c:	4603      	mov	r3, r0
 800316e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10a      	bne.n	800318c <HAL_ADC_ConfigChannel+0x2e8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2102      	movs	r1, #2
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe ff2b 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8003182:	4603      	mov	r3, r0
 8003184:	0e9b      	lsrs	r3, r3, #26
 8003186:	f003 021f 	and.w	r2, r3, #31
 800318a:	e01e      	b.n	80031ca <HAL_ADC_ConfigChannel+0x326>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2102      	movs	r1, #2
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe ff20 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8003198:	4603      	mov	r3, r0
 800319a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80031aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80031b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e004      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80031be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d105      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x33e>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	0e9b      	lsrs	r3, r3, #26
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	e016      	b.n	8003210 <HAL_ADC_ConfigChannel+0x36c>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80031f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80031fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003202:	2320      	movs	r3, #32
 8003204:	e004      	b.n	8003210 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003206:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	429a      	cmp	r2, r3
 8003212:	d106      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2200      	movs	r2, #0
 800321a:	2102      	movs	r1, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe fef1 	bl	8002004 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2103      	movs	r1, #3
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe fed5 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 800322e:	4603      	mov	r3, r0
 8003230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <HAL_ADC_ConfigChannel+0x3aa>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2103      	movs	r1, #3
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe feca 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 8003244:	4603      	mov	r3, r0
 8003246:	0e9b      	lsrs	r3, r3, #26
 8003248:	f003 021f 	and.w	r2, r3, #31
 800324c:	e017      	b.n	800327e <HAL_ADC_ConfigChannel+0x3da>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2103      	movs	r1, #3
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe febf 	bl	8001fd8 <LL_ADC_GetOffsetChannel>
 800325a:	4603      	mov	r3, r0
 800325c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003268:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800326a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003270:	2320      	movs	r3, #32
 8003272:	e003      	b.n	800327c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003286:	2b00      	cmp	r3, #0
 8003288:	d105      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x3f2>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	0e9b      	lsrs	r3, r3, #26
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	e011      	b.n	80032ba <HAL_ADC_ConfigChannel+0x416>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80032a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80032a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80032ae:	2320      	movs	r3, #32
 80032b0:	e003      	b.n	80032ba <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80032b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d106      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	2103      	movs	r1, #3
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fe9c 	bl	8002004 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff f82f 	bl	8002334 <LL_ADC_IsEnabled>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f040 813d 	bne.w	8003558 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f7fe ff6c 	bl	80021c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4aa2      	ldr	r2, [pc, #648]	; (8003580 <HAL_ADC_ConfigChannel+0x6dc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	f040 812e 	bne.w	8003558 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x480>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	0e9b      	lsrs	r3, r3, #26
 8003312:	3301      	adds	r3, #1
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2b09      	cmp	r3, #9
 800331a:	bf94      	ite	ls
 800331c:	2301      	movls	r3, #1
 800331e:	2300      	movhi	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e019      	b.n	8003358 <HAL_ADC_ConfigChannel+0x4b4>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800332c:	fa93 f3a3 	rbit	r3, r3
 8003330:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003334:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800333c:	2320      	movs	r3, #32
 800333e:	e003      	b.n	8003348 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	3301      	adds	r3, #1
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	2b09      	cmp	r3, #9
 8003350:	bf94      	ite	ls
 8003352:	2301      	movls	r3, #1
 8003354:	2300      	movhi	r3, #0
 8003356:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003358:	2b00      	cmp	r3, #0
 800335a:	d079      	beq.n	8003450 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003364:	2b00      	cmp	r3, #0
 8003366:	d107      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x4d4>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	3301      	adds	r3, #1
 8003370:	069b      	lsls	r3, r3, #26
 8003372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003376:	e015      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x500>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003380:	fa93 f3a3 	rbit	r3, r3
 8003384:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003388:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800338a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003390:	2320      	movs	r3, #32
 8003392:	e003      	b.n	800339c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003396:	fab3 f383 	clz	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	3301      	adds	r3, #1
 800339e:	069b      	lsls	r3, r3, #26
 80033a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x520>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0e9b      	lsrs	r3, r3, #26
 80033b6:	3301      	adds	r3, #1
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	2101      	movs	r1, #1
 80033be:	fa01 f303 	lsl.w	r3, r1, r3
 80033c2:	e017      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x550>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80033d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80033dc:	2320      	movs	r3, #32
 80033de:	e003      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80033e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	3301      	adds	r3, #1
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	ea42 0103 	orr.w	r1, r2, r3
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <HAL_ADC_ConfigChannel+0x576>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	0e9b      	lsrs	r3, r3, #26
 800340a:	3301      	adds	r3, #1
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4613      	mov	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4413      	add	r3, r2
 8003416:	051b      	lsls	r3, r3, #20
 8003418:	e018      	b.n	800344c <HAL_ADC_ConfigChannel+0x5a8>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800342c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003432:	2320      	movs	r3, #32
 8003434:	e003      	b.n	800343e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	3301      	adds	r3, #1
 8003440:	f003 021f 	and.w	r2, r3, #31
 8003444:	4613      	mov	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4413      	add	r3, r2
 800344a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800344c:	430b      	orrs	r3, r1
 800344e:	e07e      	b.n	800354e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003458:	2b00      	cmp	r3, #0
 800345a:	d107      	bne.n	800346c <HAL_ADC_ConfigChannel+0x5c8>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0e9b      	lsrs	r3, r3, #26
 8003462:	3301      	adds	r3, #1
 8003464:	069b      	lsls	r3, r3, #26
 8003466:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800346a:	e015      	b.n	8003498 <HAL_ADC_ConfigChannel+0x5f4>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800347e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003484:	2320      	movs	r3, #32
 8003486:	e003      	b.n	8003490 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	3301      	adds	r3, #1
 8003492:	069b      	lsls	r3, r3, #26
 8003494:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x614>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	0e9b      	lsrs	r3, r3, #26
 80034aa:	3301      	adds	r3, #1
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2101      	movs	r1, #1
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	e017      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x644>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	61fb      	str	r3, [r7, #28]
  return result;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80034d0:	2320      	movs	r3, #32
 80034d2:	e003      	b.n	80034dc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	2101      	movs	r1, #1
 80034e4:	fa01 f303 	lsl.w	r3, r1, r3
 80034e8:	ea42 0103 	orr.w	r1, r2, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10d      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x670>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	0e9b      	lsrs	r3, r3, #26
 80034fe:	3301      	adds	r3, #1
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	4613      	mov	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	3b1e      	subs	r3, #30
 800350c:	051b      	lsls	r3, r3, #20
 800350e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003512:	e01b      	b.n	800354c <HAL_ADC_ConfigChannel+0x6a8>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	613b      	str	r3, [r7, #16]
  return result;
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800352c:	2320      	movs	r3, #32
 800352e:	e003      	b.n	8003538 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	3301      	adds	r3, #1
 800353a:	f003 021f 	and.w	r2, r3, #31
 800353e:	4613      	mov	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4413      	add	r3, r2
 8003544:	3b1e      	subs	r3, #30
 8003546:	051b      	lsls	r3, r3, #20
 8003548:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800354c:	430b      	orrs	r3, r1
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	6892      	ldr	r2, [r2, #8]
 8003552:	4619      	mov	r1, r3
 8003554:	f7fe fe0c 	bl	8002170 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_ADC_ConfigChannel+0x6e0>)
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80bd 	beq.w	80036e0 <HAL_ADC_ConfigChannel+0x83c>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800356e:	d004      	beq.n	800357a <HAL_ADC_ConfigChannel+0x6d6>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a04      	ldr	r2, [pc, #16]	; (8003588 <HAL_ADC_ConfigChannel+0x6e4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10a      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x6ec>
 800357a:	4b04      	ldr	r3, [pc, #16]	; (800358c <HAL_ADC_ConfigChannel+0x6e8>)
 800357c:	e009      	b.n	8003592 <HAL_ADC_ConfigChannel+0x6ee>
 800357e:	bf00      	nop
 8003580:	407f0000 	.word	0x407f0000
 8003584:	80080000 	.word	0x80080000
 8003588:	50000100 	.word	0x50000100
 800358c:	50000300 	.word	0x50000300
 8003590:	4b58      	ldr	r3, [pc, #352]	; (80036f4 <HAL_ADC_ConfigChannel+0x850>)
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe fcee 	bl	8001f74 <LL_ADC_GetCommonPathInternalCh>
 8003598:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a55      	ldr	r2, [pc, #340]	; (80036f8 <HAL_ADC_ConfigChannel+0x854>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d004      	beq.n	80035b0 <HAL_ADC_ConfigChannel+0x70c>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a54      	ldr	r2, [pc, #336]	; (80036fc <HAL_ADC_ConfigChannel+0x858>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d139      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x780>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d133      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035c4:	d005      	beq.n	80035d2 <HAL_ADC_ConfigChannel+0x72e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a4d      	ldr	r2, [pc, #308]	; (8003700 <HAL_ADC_ConfigChannel+0x85c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	f040 8084 	bne.w	80036da <HAL_ADC_ConfigChannel+0x836>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035da:	d004      	beq.n	80035e6 <HAL_ADC_ConfigChannel+0x742>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a48      	ldr	r2, [pc, #288]	; (8003704 <HAL_ADC_ConfigChannel+0x860>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x746>
 80035e6:	4a48      	ldr	r2, [pc, #288]	; (8003708 <HAL_ADC_ConfigChannel+0x864>)
 80035e8:	e000      	b.n	80035ec <HAL_ADC_ConfigChannel+0x748>
 80035ea:	4a42      	ldr	r2, [pc, #264]	; (80036f4 <HAL_ADC_ConfigChannel+0x850>)
 80035ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f7fe fca9 	bl	8001f4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80035fc:	4b43      	ldr	r3, [pc, #268]	; (800370c <HAL_ADC_ConfigChannel+0x868>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	099b      	lsrs	r3, r3, #6
 8003602:	4a43      	ldr	r2, [pc, #268]	; (8003710 <HAL_ADC_ConfigChannel+0x86c>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	099a      	lsrs	r2, r3, #6
 800360a:	4613      	mov	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003614:	e002      	b.n	800361c <HAL_ADC_ConfigChannel+0x778>
          {
            wait_loop_index--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3b01      	subs	r3, #1
 800361a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f9      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x772>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003622:	e05a      	b.n	80036da <HAL_ADC_ConfigChannel+0x836>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a3a      	ldr	r2, [pc, #232]	; (8003714 <HAL_ADC_ConfigChannel+0x870>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d125      	bne.n	800367a <HAL_ADC_ConfigChannel+0x7d6>
 800362e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d11f      	bne.n	800367a <HAL_ADC_ConfigChannel+0x7d6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a31      	ldr	r2, [pc, #196]	; (8003704 <HAL_ADC_ConfigChannel+0x860>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d104      	bne.n	800364e <HAL_ADC_ConfigChannel+0x7aa>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a33      	ldr	r2, [pc, #204]	; (8003718 <HAL_ADC_ConfigChannel+0x874>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d047      	beq.n	80036de <HAL_ADC_ConfigChannel+0x83a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003656:	d004      	beq.n	8003662 <HAL_ADC_ConfigChannel+0x7be>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a29      	ldr	r2, [pc, #164]	; (8003704 <HAL_ADC_ConfigChannel+0x860>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d101      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x7c2>
 8003662:	4a29      	ldr	r2, [pc, #164]	; (8003708 <HAL_ADC_ConfigChannel+0x864>)
 8003664:	e000      	b.n	8003668 <HAL_ADC_ConfigChannel+0x7c4>
 8003666:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <HAL_ADC_ConfigChannel+0x850>)
 8003668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800366c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f7fe fc6b 	bl	8001f4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003678:	e031      	b.n	80036de <HAL_ADC_ConfigChannel+0x83a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a27      	ldr	r2, [pc, #156]	; (800371c <HAL_ADC_ConfigChannel+0x878>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d12d      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x83c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d127      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x83c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <HAL_ADC_ConfigChannel+0x860>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d022      	beq.n	80036e0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036a2:	d004      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x80a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a16      	ldr	r2, [pc, #88]	; (8003704 <HAL_ADC_ConfigChannel+0x860>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d101      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x80e>
 80036ae:	4a16      	ldr	r2, [pc, #88]	; (8003708 <HAL_ADC_ConfigChannel+0x864>)
 80036b0:	e000      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x810>
 80036b2:	4a10      	ldr	r2, [pc, #64]	; (80036f4 <HAL_ADC_ConfigChannel+0x850>)
 80036b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f7fe fc45 	bl	8001f4e <LL_ADC_SetCommonPathInternalCh>
 80036c4:	e00c      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x83c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	f043 0220 	orr.w	r2, r3, #32
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80036d8:	e002      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036da:	bf00      	nop
 80036dc:	e000      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036de:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036e8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	37d8      	adds	r7, #216	; 0xd8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	50000700 	.word	0x50000700
 80036f8:	c3210000 	.word	0xc3210000
 80036fc:	90c00010 	.word	0x90c00010
 8003700:	50000600 	.word	0x50000600
 8003704:	50000100 	.word	0x50000100
 8003708:	50000300 	.word	0x50000300
 800370c:	20000000 	.word	0x20000000
 8003710:	053e2d63 	.word	0x053e2d63
 8003714:	c7520000 	.word	0xc7520000
 8003718:	50000500 	.word	0x50000500
 800371c:	cb840000 	.word	0xcb840000

08003720 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe fe4a 	bl	80023d0 <LL_ADC_REG_IsConversionOngoing>
 800373c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe fe6b 	bl	800241e <LL_ADC_INJ_IsConversionOngoing>
 8003748:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d103      	bne.n	8003758 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8091 	beq.w	800387a <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d02a      	beq.n	80037bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7f5b      	ldrb	r3, [r3, #29]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d126      	bne.n	80037bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7f1b      	ldrb	r3, [r3, #28]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d122      	bne.n	80037bc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003776:	2301      	movs	r3, #1
 8003778:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800377a:	e014      	b.n	80037a6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	4a41      	ldr	r2, [pc, #260]	; (8003884 <ADC_ConversionStop+0x164>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d90d      	bls.n	80037a0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	f043 0210 	orr.w	r2, r3, #16
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003794:	f043 0201 	orr.w	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e06d      	b.n	800387c <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	3301      	adds	r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d1e3      	bne.n	800377c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2240      	movs	r2, #64	; 0x40
 80037ba:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d014      	beq.n	80037ec <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe fe02 	bl	80023d0 <LL_ADC_REG_IsConversionOngoing>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00c      	beq.n	80037ec <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fdbf 	bl	800235a <LL_ADC_IsDisableOngoing>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d104      	bne.n	80037ec <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe fdde 	bl	80023a8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d014      	beq.n	800381c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fe11 	bl	800241e <LL_ADC_INJ_IsConversionOngoing>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00c      	beq.n	800381c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe fda7 	bl	800235a <LL_ADC_IsDisableOngoing>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d104      	bne.n	800381c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe fded 	bl	80023f6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d005      	beq.n	800382e <ADC_ConversionStop+0x10e>
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b03      	cmp	r3, #3
 8003826:	d105      	bne.n	8003834 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003828:	230c      	movs	r3, #12
 800382a:	617b      	str	r3, [r7, #20]
        break;
 800382c:	e005      	b.n	800383a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800382e:	2308      	movs	r3, #8
 8003830:	617b      	str	r3, [r7, #20]
        break;
 8003832:	e002      	b.n	800383a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003834:	2304      	movs	r3, #4
 8003836:	617b      	str	r3, [r7, #20]
        break;
 8003838:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800383a:	f7fe fb47 	bl	8001ecc <HAL_GetTick>
 800383e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003840:	e014      	b.n	800386c <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003842:	f7fe fb43 	bl	8001ecc <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b05      	cmp	r3, #5
 800384e:	d90d      	bls.n	800386c <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	f043 0210 	orr.w	r2, r3, #16
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003860:	f043 0201 	orr.w	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e007      	b.n	800387c <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	4013      	ands	r3, r2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e3      	bne.n	8003842 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3720      	adds	r7, #32
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	a33fffff 	.word	0xa33fffff

08003888 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe fd4d 	bl	8002334 <LL_ADC_IsEnabled>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d146      	bne.n	800392e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	4b24      	ldr	r3, [pc, #144]	; (8003938 <ADC_Enable+0xb0>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00d      	beq.n	80038ca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	f043 0210 	orr.w	r2, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038be:	f043 0201 	orr.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e032      	b.n	8003930 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fd08 	bl	80022e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038d4:	f7fe fafa 	bl	8001ecc <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038da:	e021      	b.n	8003920 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe fd27 	bl	8002334 <LL_ADC_IsEnabled>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d104      	bne.n	80038f6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fe fcf7 	bl	80022e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038f6:	f7fe fae9 	bl	8001ecc <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d90d      	bls.n	8003920 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003908:	f043 0210 	orr.w	r2, r3, #16
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003914:	f043 0201 	orr.w	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e007      	b.n	8003930 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d1d6      	bne.n	80038dc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	8000003f 	.word	0x8000003f

0800393c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe fd06 	bl	800235a <LL_ADC_IsDisableOngoing>
 800394e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe fced 	bl	8002334 <LL_ADC_IsEnabled>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d040      	beq.n	80039e2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d13d      	bne.n	80039e2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 030d 	and.w	r3, r3, #13
 8003970:	2b01      	cmp	r3, #1
 8003972:	d10c      	bne.n	800398e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe fcc7 	bl	800230c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2203      	movs	r2, #3
 8003984:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003986:	f7fe faa1 	bl	8001ecc <HAL_GetTick>
 800398a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800398c:	e022      	b.n	80039d4 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	f043 0210 	orr.w	r2, r3, #16
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399e:	f043 0201 	orr.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e01c      	b.n	80039e4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039aa:	f7fe fa8f 	bl	8001ecc <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d90d      	bls.n	80039d4 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	f043 0210 	orr.w	r2, r3, #16
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c8:	f043 0201 	orr.w	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e007      	b.n	80039e4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e3      	bne.n	80039aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d14b      	bne.n	8003a9e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d021      	beq.n	8003a64 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe fb51 	bl	80020cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d032      	beq.n	8003a96 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d12b      	bne.n	8003a96 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d11f      	bne.n	8003a96 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a62:	e018      	b.n	8003a96 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d111      	bne.n	8003a96 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d105      	bne.n	8003a96 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	f043 0201 	orr.w	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f7fd fa4a 	bl	8000f30 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a9c:	e00e      	b.n	8003abc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f7ff f9f0 	bl	8002e90 <HAL_ADC_ErrorCallback>
}
 8003ab0:	e004      	b.n	8003abc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f7ff f9d2 	bl	8002e7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afe:	f043 0204 	orr.w	r2, r3, #4
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f7ff f9c2 	bl	8002e90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <LL_ADC_StartCalibration>:
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003b26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	609a      	str	r2, [r3, #8]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <LL_ADC_IsCalibrationOnGoing>:
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b5a:	d101      	bne.n	8003b60 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_ADCEx_Calibration_Start+0x1c>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e04d      	b.n	8003c28 <HAL_ADCEx_Calibration_Start+0xb8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff fed1 	bl	800393c <ADC_Disable>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d136      	bne.n	8003c12 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bac:	f023 0302 	bic.w	r3, r3, #2
 8003bb0:	f043 0202 	orr.w	r2, r3, #2
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6839      	ldr	r1, [r7, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff ffa8 	bl	8003b14 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bc4:	e014      	b.n	8003bf0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4a18      	ldr	r2, [pc, #96]	; (8003c30 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d90d      	bls.n	8003bf0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	f023 0312 	bic.w	r3, r3, #18
 8003bdc:	f043 0210 	orr.w	r2, r3, #16
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e01b      	b.n	8003c28 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ffa6 	bl	8003b46 <LL_ADC_IsCalibrationOnGoing>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e2      	bne.n	8003bc6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	f023 0303 	bic.w	r3, r3, #3
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c10:	e005      	b.n	8003c1e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c16:	f043 0210 	orr.w	r2, r3, #16
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	0004de01 	.word	0x0004de01

08003c34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cca:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	60d3      	str	r3, [r2, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	f003 0307 	and.w	r3, r3, #7
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	db0b      	blt.n	8003d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	4907      	ldr	r1, [pc, #28]	; (8003d34 <__NVIC_EnableIRQ+0x38>)
 8003d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	e000e100 	.word	0xe000e100

08003d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	6039      	str	r1, [r7, #0]
 8003d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	db0a      	blt.n	8003d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	490c      	ldr	r1, [pc, #48]	; (8003d84 <__NVIC_SetPriority+0x4c>)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	0112      	lsls	r2, r2, #4
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d60:	e00a      	b.n	8003d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	4908      	ldr	r1, [pc, #32]	; (8003d88 <__NVIC_SetPriority+0x50>)
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	3b04      	subs	r3, #4
 8003d70:	0112      	lsls	r2, r2, #4
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	440b      	add	r3, r1
 8003d76:	761a      	strb	r2, [r3, #24]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	e000e100 	.word	0xe000e100
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b089      	sub	sp, #36	; 0x24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f1c3 0307 	rsb	r3, r3, #7
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	bf28      	it	cs
 8003daa:	2304      	movcs	r3, #4
 8003dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3304      	adds	r3, #4
 8003db2:	2b06      	cmp	r3, #6
 8003db4:	d902      	bls.n	8003dbc <NVIC_EncodePriority+0x30>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3b03      	subs	r3, #3
 8003dba:	e000      	b.n	8003dbe <NVIC_EncodePriority+0x32>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	401a      	ands	r2, r3
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	43d9      	mvns	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de4:	4313      	orrs	r3, r2
         );
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3724      	adds	r7, #36	; 0x24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e04:	d301      	bcc.n	8003e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e06:	2301      	movs	r3, #1
 8003e08:	e00f      	b.n	8003e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <SysTick_Config+0x40>)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e12:	210f      	movs	r1, #15
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	f7ff ff8e 	bl	8003d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <SysTick_Config+0x40>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e22:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <SysTick_Config+0x40>)
 8003e24:	2207      	movs	r2, #7
 8003e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	e000e010 	.word	0xe000e010

08003e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff ff29 	bl	8003c98 <__NVIC_SetPriorityGrouping>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	4603      	mov	r3, r0
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e5c:	f7ff ff40 	bl	8003ce0 <__NVIC_GetPriorityGrouping>
 8003e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	6978      	ldr	r0, [r7, #20]
 8003e68:	f7ff ff90 	bl	8003d8c <NVIC_EncodePriority>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff5f 	bl	8003d38 <__NVIC_SetPriority>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ff33 	bl	8003cfc <__NVIC_EnableIRQ>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ffa4 	bl	8003df4 <SysTick_Config>
 8003eac:	4603      	mov	r3, r0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e08d      	b.n	8003fe6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b47      	ldr	r3, [pc, #284]	; (8003ff0 <HAL_DMA_Init+0x138>)
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d80f      	bhi.n	8003ef6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b45      	ldr	r3, [pc, #276]	; (8003ff4 <HAL_DMA_Init+0x13c>)
 8003ede:	4413      	add	r3, r2
 8003ee0:	4a45      	ldr	r2, [pc, #276]	; (8003ff8 <HAL_DMA_Init+0x140>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	009a      	lsls	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a42      	ldr	r2, [pc, #264]	; (8003ffc <HAL_DMA_Init+0x144>)
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ef4:	e00e      	b.n	8003f14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b40      	ldr	r3, [pc, #256]	; (8004000 <HAL_DMA_Init+0x148>)
 8003efe:	4413      	add	r3, r2
 8003f00:	4a3d      	ldr	r2, [pc, #244]	; (8003ff8 <HAL_DMA_Init+0x140>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	009a      	lsls	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a3c      	ldr	r2, [pc, #240]	; (8004004 <HAL_DMA_Init+0x14c>)
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f9b6 	bl	80042d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f74:	d102      	bne.n	8003f7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d010      	beq.n	8003fbc <HAL_DMA_Init+0x104>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d80c      	bhi.n	8003fbc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f9d6 	bl	8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	e008      	b.n	8003fce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40020407 	.word	0x40020407
 8003ff4:	bffdfff8 	.word	0xbffdfff8
 8003ff8:	cccccccd 	.word	0xcccccccd
 8003ffc:	40020000 	.word	0x40020000
 8004000:	bffdfbf8 	.word	0xbffdfbf8
 8004004:	40020400 	.word	0x40020400

08004008 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_DMA_Start_IT+0x20>
 8004024:	2302      	movs	r3, #2
 8004026:	e066      	b.n	80040f6 <HAL_DMA_Start_IT+0xee>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d155      	bne.n	80040e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f8fb 	bl	800425c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	2b00      	cmp	r3, #0
 800406c:	d008      	beq.n	8004080 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 020e 	orr.w	r2, r2, #14
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e00f      	b.n	80040a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0204 	bic.w	r2, r2, #4
 800408e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 020a 	orr.w	r2, r2, #10
 800409e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e005      	b.n	80040f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
 80040f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	2204      	movs	r2, #4
 8004120:	409a      	lsls	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d026      	beq.n	8004178 <HAL_DMA_IRQHandler+0x7a>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d021      	beq.n	8004178 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d107      	bne.n	8004152 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0204 	bic.w	r2, r2, #4
 8004150:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	f003 021f 	and.w	r2, r3, #31
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	2104      	movs	r1, #4
 8004160:	fa01 f202 	lsl.w	r2, r1, r2
 8004164:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	2b00      	cmp	r3, #0
 800416c:	d071      	beq.n	8004252 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004176:	e06c      	b.n	8004252 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2202      	movs	r2, #2
 8004182:	409a      	lsls	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d02e      	beq.n	80041ea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d029      	beq.n	80041ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10b      	bne.n	80041bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 020a 	bic.w	r2, r2, #10
 80041b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c0:	f003 021f 	and.w	r2, r3, #31
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	2102      	movs	r1, #2
 80041ca:	fa01 f202 	lsl.w	r2, r1, r2
 80041ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d038      	beq.n	8004252 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041e8:	e033      	b.n	8004252 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	2208      	movs	r2, #8
 80041f4:	409a      	lsls	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d02a      	beq.n	8004254 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d025      	beq.n	8004254 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 020e 	bic.w	r2, r2, #14
 8004216:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421c:	f003 021f 	and.w	r2, r3, #31
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	2101      	movs	r1, #1
 8004226:	fa01 f202 	lsl.w	r2, r1, r2
 800422a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004246:	2b00      	cmp	r3, #0
 8004248:	d004      	beq.n	8004254 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004252:	bf00      	nop
 8004254:	bf00      	nop
}
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004272:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	2b00      	cmp	r3, #0
 800427a:	d004      	beq.n	8004286 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004284:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	f003 021f 	and.w	r2, r3, #31
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	2101      	movs	r1, #1
 8004294:	fa01 f202 	lsl.w	r2, r1, r2
 8004298:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b10      	cmp	r3, #16
 80042a8:	d108      	bne.n	80042bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042ba:	e007      	b.n	80042cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	60da      	str	r2, [r3, #12]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b16      	ldr	r3, [pc, #88]	; (8004340 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d802      	bhi.n	80042f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80042ec:	4b15      	ldr	r3, [pc, #84]	; (8004344 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	e001      	b.n	80042f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80042f2:	4b15      	ldr	r3, [pc, #84]	; (8004348 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80042f4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	3b08      	subs	r3, #8
 8004302:	4a12      	ldr	r2, [pc, #72]	; (800434c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004304:	fba2 2303 	umull	r2, r3, r2, r3
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004310:	089b      	lsrs	r3, r3, #2
 8004312:	009a      	lsls	r2, r3, #2
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4413      	add	r3, r2
 8004318:	461a      	mov	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a0b      	ldr	r2, [pc, #44]	; (8004350 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004322:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	2201      	movs	r2, #1
 800432c:	409a      	lsls	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40020407 	.word	0x40020407
 8004344:	40020800 	.word	0x40020800
 8004348:	40020820 	.word	0x40020820
 800434c:	cccccccd 	.word	0xcccccccd
 8004350:	40020880 	.word	0x40020880

08004354 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	461a      	mov	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a08      	ldr	r2, [pc, #32]	; (8004398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004376:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3b01      	subs	r3, #1
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	2201      	movs	r2, #1
 8004382:	409a      	lsls	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004388:	bf00      	nop
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	1000823f 	.word	0x1000823f
 8004398:	40020940 	.word	0x40020940

0800439c <HAL_FLASH_IRQHandler>:
/**
  * @brief  Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 80043a2:	4b66      	ldr	r3, [pc, #408]	; (800453c <HAL_FLASH_IRQHandler+0x1a0>)
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	4a65      	ldr	r2, [pc, #404]	; (800453c <HAL_FLASH_IRQHandler+0x1a0>)
 80043a8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043ac:	f023 0303 	bic.w	r3, r3, #3
 80043b0:	6153      	str	r3, [r2, #20]
#if defined (FLASH_OPTR_DBANK)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 80043b2:	4b62      	ldr	r3, [pc, #392]	; (800453c <HAL_FLASH_IRQHandler+0x1a0>)
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	4a61      	ldr	r2, [pc, #388]	; (800453c <HAL_FLASH_IRQHandler+0x1a0>)
 80043b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043bc:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 80043be:	4b60      	ldr	r3, [pc, #384]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 80043c0:	7a1b      	ldrb	r3, [r3, #8]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d105      	bne.n	80043d4 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80043c8:	4b5c      	ldr	r3, [pc, #368]	; (800453c <HAL_FLASH_IRQHandler+0x1a0>)
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	4a5b      	ldr	r2, [pc, #364]	; (800453c <HAL_FLASH_IRQHandler+0x1a0>)
 80043ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d2:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80043d4:	4b59      	ldr	r3, [pc, #356]	; (800453c <HAL_FLASH_IRQHandler+0x1a0>)
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80043dc:	4013      	ands	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d041      	beq.n	800446a <HAL_FLASH_IRQHandler+0xce>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80043e6:	4b56      	ldr	r3, [pc, #344]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	4a54      	ldr	r2, [pc, #336]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 80043f0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <HAL_FLASH_IRQHandler+0x70>
 80043fc:	4b4f      	ldr	r3, [pc, #316]	; (800453c <HAL_FLASH_IRQHandler+0x1a0>)
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004406:	494d      	ldr	r1, [pc, #308]	; (800453c <HAL_FLASH_IRQHandler+0x1a0>)
 8004408:	4313      	orrs	r3, r2
 800440a:	618b      	str	r3, [r1, #24]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d004      	beq.n	8004420 <HAL_FLASH_IRQHandler+0x84>
 8004416:	4a49      	ldr	r2, [pc, #292]	; (800453c <HAL_FLASH_IRQHandler+0x1a0>)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800441e:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8004420:	f000 f8e8 	bl	80045f4 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8004424:	4b46      	ldr	r3, [pc, #280]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 8004426:	7a1b      	ldrb	r3, [r3, #8]
 8004428:	72fb      	strb	r3, [r7, #11]
    if (procedure == FLASH_PROC_PAGE_ERASE)
 800442a:	7afb      	ldrb	r3, [r7, #11]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d105      	bne.n	800443c <HAL_FLASH_IRQHandler+0xa0>
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8004430:	4b43      	ldr	r3, [pc, #268]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	4618      	mov	r0, r3
 8004436:	f000 f88f 	bl	8004558 <HAL_FLASH_OperationErrorCallback>
 800443a:	e013      	b.n	8004464 <HAL_FLASH_IRQHandler+0xc8>
    }
    else if (procedure == FLASH_PROC_MASS_ERASE)
 800443c:	7afb      	ldrb	r3, [r7, #11]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d105      	bne.n	800444e <HAL_FLASH_IRQHandler+0xb2>
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8004442:	4b3f      	ldr	r3, [pc, #252]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f886 	bl	8004558 <HAL_FLASH_OperationErrorCallback>
 800444c:	e00a      	b.n	8004464 <HAL_FLASH_IRQHandler+0xc8>
    }
    else if ((procedure == FLASH_PROC_PROGRAM) ||
 800444e:	7afb      	ldrb	r3, [r7, #11]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d002      	beq.n	800445a <HAL_FLASH_IRQHandler+0xbe>
 8004454:	7afb      	ldrb	r3, [r7, #11]
 8004456:	2b04      	cmp	r3, #4
 8004458:	d104      	bne.n	8004464 <HAL_FLASH_IRQHandler+0xc8>
             (procedure == FLASH_PROC_PROGRAM_LAST))
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Address);
 800445a:	4b39      	ldr	r3, [pc, #228]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f87a 	bl	8004558 <HAL_FLASH_OperationErrorCallback>
    {
      /* Nothing to do */
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004464:	4b36      	ldr	r3, [pc, #216]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 8004466:	2200      	movs	r2, #0
 8004468:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800446a:	4b34      	ldr	r3, [pc, #208]	; (800453c <HAL_FLASH_IRQHandler+0x1a0>)
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b01      	cmp	r3, #1
 8004474:	d14f      	bne.n	8004516 <HAL_FLASH_IRQHandler+0x17a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004476:	4b31      	ldr	r3, [pc, #196]	; (800453c <HAL_FLASH_IRQHandler+0x1a0>)
 8004478:	2201      	movs	r2, #1
 800447a:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 800447c:	4b30      	ldr	r3, [pc, #192]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 800447e:	7a1b      	ldrb	r3, [r3, #8]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	d12b      	bne.n	80044de <HAL_FLASH_IRQHandler+0x142>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8004486:	4b2e      	ldr	r3, [pc, #184]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	3b01      	subs	r3, #1
 800448c:	4a2c      	ldr	r2, [pc, #176]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 800448e:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 8004490:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d013      	beq.n	80044c0 <HAL_FLASH_IRQHandler+0x124>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8004498:	4b29      	ldr	r3, [pc, #164]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 f851 	bl	8004544 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 80044a2:	4b27      	ldr	r3, [pc, #156]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	3301      	adds	r3, #1
 80044a8:	4a25      	ldr	r2, [pc, #148]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 80044aa:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 80044ac:	4b24      	ldr	r3, [pc, #144]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 80044b2:	4b23      	ldr	r3, [pc, #140]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	4619      	mov	r1, r3
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f857 	bl	800456c <FLASH_PageErase>
 80044be:	e02a      	b.n	8004516 <HAL_FLASH_IRQHandler+0x17a>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 80044c0:	4b1f      	ldr	r3, [pc, #124]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 80044c2:	f04f 32ff 	mov.w	r2, #4294967295
 80044c6:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80044c8:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80044ce:	f000 f891 	bl	80045f4 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 80044d2:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f834 	bl	8004544 <HAL_FLASH_EndOfOperationCallback>
 80044dc:	e01b      	b.n	8004516 <HAL_FLASH_IRQHandler+0x17a>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 80044de:	f000 f889 	bl	80045f4 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 80044e2:	4b17      	ldr	r3, [pc, #92]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 80044e4:	7a1b      	ldrb	r3, [r3, #8]
 80044e6:	72fb      	strb	r3, [r7, #11]
      if (procedure == FLASH_PROC_MASS_ERASE)
 80044e8:	7afb      	ldrb	r3, [r7, #11]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d105      	bne.n	80044fa <HAL_FLASH_IRQHandler+0x15e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80044ee:	4b14      	ldr	r3, [pc, #80]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 f826 	bl	8004544 <HAL_FLASH_EndOfOperationCallback>
 80044f8:	e00a      	b.n	8004510 <HAL_FLASH_IRQHandler+0x174>
      }
      else if ((procedure == FLASH_PROC_PROGRAM) ||
 80044fa:	7afb      	ldrb	r3, [r7, #11]
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d002      	beq.n	8004506 <HAL_FLASH_IRQHandler+0x16a>
 8004500:	7afb      	ldrb	r3, [r7, #11]
 8004502:	2b04      	cmp	r3, #4
 8004504:	d104      	bne.n	8004510 <HAL_FLASH_IRQHandler+0x174>
               (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8004506:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f81a 	bl	8004544 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 8004512:	2200      	movs	r2, #0
 8004514:	721a      	strb	r2, [r3, #8]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8004516:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 8004518:	7a1b      	ldrb	r3, [r3, #8]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d108      	bne.n	8004532 <HAL_FLASH_IRQHandler+0x196>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_FLASH_IRQHandler+0x1a0>)
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	4a05      	ldr	r2, [pc, #20]	; (800453c <HAL_FLASH_IRQHandler+0x1a0>)
 8004526:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800452a:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <HAL_FLASH_IRQHandler+0x1a4>)
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
  }
}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40022000 	.word	0x40022000
 8004540:	2000000c 	.word	0x2000000c

08004544 <HAL_FLASH_EndOfOperationCallback>:
  *                            (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *           @arg Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_FLASH_OperationErrorCallback>:
  *           @arg Page Erase: Page number which returned an error
  *           @arg Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8004576:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <FLASH_PageErase+0x84>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8004582:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <FLASH_PageErase+0x84>)
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <FLASH_PageErase+0x84>)
 8004588:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800458c:	6153      	str	r3, [r2, #20]
 800458e:	e011      	b.n	80045b4 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d006      	beq.n	80045a8 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800459a:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <FLASH_PageErase+0x84>)
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	4a14      	ldr	r2, [pc, #80]	; (80045f0 <FLASH_PageErase+0x84>)
 80045a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045a4:	6153      	str	r3, [r2, #20]
 80045a6:	e005      	b.n	80045b4 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80045a8:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <FLASH_PageErase+0x84>)
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	4a10      	ldr	r2, [pc, #64]	; (80045f0 <FLASH_PageErase+0x84>)
 80045ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045b2:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80045b4:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <FLASH_PageErase+0x84>)
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80045c4:	490a      	ldr	r1, [pc, #40]	; (80045f0 <FLASH_PageErase+0x84>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <FLASH_PageErase+0x84>)
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	4a08      	ldr	r2, [pc, #32]	; (80045f0 <FLASH_PageErase+0x84>)
 80045d0:	f043 0302 	orr.w	r3, r3, #2
 80045d4:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <FLASH_PageErase+0x84>)
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	4a05      	ldr	r2, [pc, #20]	; (80045f0 <FLASH_PageErase+0x84>)
 80045dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e0:	6153      	str	r3, [r2, #20]
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40022000 	.word	0x40022000

080045f4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80045fa:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <FLASH_FlushCaches+0x80>)
 80045fc:	7f1b      	ldrb	r3, [r3, #28]
 80045fe:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d002      	beq.n	800460c <FLASH_FlushCaches+0x18>
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	2b03      	cmp	r3, #3
 800460a:	d111      	bne.n	8004630 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800460c:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <FLASH_FlushCaches+0x84>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a19      	ldr	r2, [pc, #100]	; (8004678 <FLASH_FlushCaches+0x84>)
 8004612:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4b17      	ldr	r3, [pc, #92]	; (8004678 <FLASH_FlushCaches+0x84>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a16      	ldr	r2, [pc, #88]	; (8004678 <FLASH_FlushCaches+0x84>)
 800461e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004622:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004624:	4b14      	ldr	r3, [pc, #80]	; (8004678 <FLASH_FlushCaches+0x84>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a13      	ldr	r2, [pc, #76]	; (8004678 <FLASH_FlushCaches+0x84>)
 800462a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800462e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d002      	beq.n	800463c <FLASH_FlushCaches+0x48>
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	2b03      	cmp	r3, #3
 800463a:	d111      	bne.n	8004660 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800463c:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <FLASH_FlushCaches+0x84>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a0d      	ldr	r2, [pc, #52]	; (8004678 <FLASH_FlushCaches+0x84>)
 8004642:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <FLASH_FlushCaches+0x84>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <FLASH_FlushCaches+0x84>)
 800464e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004652:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004654:	4b08      	ldr	r3, [pc, #32]	; (8004678 <FLASH_FlushCaches+0x84>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a07      	ldr	r2, [pc, #28]	; (8004678 <FLASH_FlushCaches+0x84>)
 800465a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800465e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <FLASH_FlushCaches+0x80>)
 8004662:	2200      	movs	r2, #0
 8004664:	771a      	strb	r2, [r3, #28]
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	2000000c 	.word	0x2000000c
 8004678:	40022000 	.word	0x40022000

0800467c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800468a:	e15a      	b.n	8004942 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	2101      	movs	r1, #1
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	fa01 f303 	lsl.w	r3, r1, r3
 8004698:	4013      	ands	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 814c 	beq.w	800493c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d00b      	beq.n	80046c4 <HAL_GPIO_Init+0x48>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d007      	beq.n	80046c4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046b8:	2b11      	cmp	r3, #17
 80046ba:	d003      	beq.n	80046c4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b12      	cmp	r3, #18
 80046c2:	d130      	bne.n	8004726 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	2203      	movs	r2, #3
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4013      	ands	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046fa:	2201      	movs	r2, #1
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	43db      	mvns	r3, r3
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4013      	ands	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	f003 0201 	and.w	r2, r3, #1
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	2203      	movs	r2, #3
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	43db      	mvns	r3, r3
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4013      	ands	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_Init+0xea>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b12      	cmp	r3, #18
 8004764:	d123      	bne.n	80047ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	08da      	lsrs	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3208      	adds	r2, #8
 800476e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004772:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	220f      	movs	r2, #15
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	08da      	lsrs	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3208      	adds	r2, #8
 80047a8:	6939      	ldr	r1, [r7, #16]
 80047aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	2203      	movs	r2, #3
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43db      	mvns	r3, r3
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4013      	ands	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 0203 	and.w	r2, r3, #3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 80a6 	beq.w	800493c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047f0:	4b5b      	ldr	r3, [pc, #364]	; (8004960 <HAL_GPIO_Init+0x2e4>)
 80047f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f4:	4a5a      	ldr	r2, [pc, #360]	; (8004960 <HAL_GPIO_Init+0x2e4>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6613      	str	r3, [r2, #96]	; 0x60
 80047fc:	4b58      	ldr	r3, [pc, #352]	; (8004960 <HAL_GPIO_Init+0x2e4>)
 80047fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004808:	4a56      	ldr	r2, [pc, #344]	; (8004964 <HAL_GPIO_Init+0x2e8>)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	089b      	lsrs	r3, r3, #2
 800480e:	3302      	adds	r3, #2
 8004810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004814:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	220f      	movs	r2, #15
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004832:	d01f      	beq.n	8004874 <HAL_GPIO_Init+0x1f8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a4c      	ldr	r2, [pc, #304]	; (8004968 <HAL_GPIO_Init+0x2ec>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d019      	beq.n	8004870 <HAL_GPIO_Init+0x1f4>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a4b      	ldr	r2, [pc, #300]	; (800496c <HAL_GPIO_Init+0x2f0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d013      	beq.n	800486c <HAL_GPIO_Init+0x1f0>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a4a      	ldr	r2, [pc, #296]	; (8004970 <HAL_GPIO_Init+0x2f4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00d      	beq.n	8004868 <HAL_GPIO_Init+0x1ec>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a49      	ldr	r2, [pc, #292]	; (8004974 <HAL_GPIO_Init+0x2f8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d007      	beq.n	8004864 <HAL_GPIO_Init+0x1e8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a48      	ldr	r2, [pc, #288]	; (8004978 <HAL_GPIO_Init+0x2fc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d101      	bne.n	8004860 <HAL_GPIO_Init+0x1e4>
 800485c:	2305      	movs	r3, #5
 800485e:	e00a      	b.n	8004876 <HAL_GPIO_Init+0x1fa>
 8004860:	2306      	movs	r3, #6
 8004862:	e008      	b.n	8004876 <HAL_GPIO_Init+0x1fa>
 8004864:	2304      	movs	r3, #4
 8004866:	e006      	b.n	8004876 <HAL_GPIO_Init+0x1fa>
 8004868:	2303      	movs	r3, #3
 800486a:	e004      	b.n	8004876 <HAL_GPIO_Init+0x1fa>
 800486c:	2302      	movs	r3, #2
 800486e:	e002      	b.n	8004876 <HAL_GPIO_Init+0x1fa>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <HAL_GPIO_Init+0x1fa>
 8004874:	2300      	movs	r3, #0
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	f002 0203 	and.w	r2, r2, #3
 800487c:	0092      	lsls	r2, r2, #2
 800487e:	4093      	lsls	r3, r2
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004886:	4937      	ldr	r1, [pc, #220]	; (8004964 <HAL_GPIO_Init+0x2e8>)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	089b      	lsrs	r3, r3, #2
 800488c:	3302      	adds	r3, #2
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004894:	4b39      	ldr	r3, [pc, #228]	; (800497c <HAL_GPIO_Init+0x300>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	43db      	mvns	r3, r3
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4013      	ands	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048b8:	4a30      	ldr	r2, [pc, #192]	; (800497c <HAL_GPIO_Init+0x300>)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80048be:	4b2f      	ldr	r3, [pc, #188]	; (800497c <HAL_GPIO_Init+0x300>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	43db      	mvns	r3, r3
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4013      	ands	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048e2:	4a26      	ldr	r2, [pc, #152]	; (800497c <HAL_GPIO_Init+0x300>)
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048e8:	4b24      	ldr	r3, [pc, #144]	; (800497c <HAL_GPIO_Init+0x300>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4013      	ands	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800490c:	4a1b      	ldr	r2, [pc, #108]	; (800497c <HAL_GPIO_Init+0x300>)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004912:	4b1a      	ldr	r3, [pc, #104]	; (800497c <HAL_GPIO_Init+0x300>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	43db      	mvns	r3, r3
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004936:	4a11      	ldr	r2, [pc, #68]	; (800497c <HAL_GPIO_Init+0x300>)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	3301      	adds	r3, #1
 8004940:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	f47f ae9d 	bne.w	800468c <HAL_GPIO_Init+0x10>
  }
}
 8004952:	bf00      	nop
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	40021000 	.word	0x40021000
 8004964:	40010000 	.word	0x40010000
 8004968:	48000400 	.word	0x48000400
 800496c:	48000800 	.word	0x48000800
 8004970:	48000c00 	.word	0x48000c00
 8004974:	48001000 	.word	0x48001000
 8004978:	48001400 	.word	0x48001400
 800497c:	40010400 	.word	0x40010400

08004980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	807b      	strh	r3, [r7, #2]
 800498c:	4613      	mov	r3, r2
 800498e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004990:	787b      	ldrb	r3, [r7, #1]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004996:	887a      	ldrh	r2, [r7, #2]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800499c:	e002      	b.n	80049a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800499e:	887a      	ldrh	r2, [r7, #2]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049c2:	887a      	ldrh	r2, [r7, #2]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4013      	ands	r3, r2
 80049c8:	041a      	lsls	r2, r3, #16
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	43d9      	mvns	r1, r3
 80049ce:	887b      	ldrh	r3, [r7, #2]
 80049d0:	400b      	ands	r3, r1
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	619a      	str	r2, [r3, #24]
}
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049ee:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049f0:	695a      	ldr	r2, [r3, #20]
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	4013      	ands	r3, r2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d006      	beq.n	8004a08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049fa:	4a05      	ldr	r2, [pc, #20]	; (8004a10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049fc:	88fb      	ldrh	r3, [r7, #6]
 80049fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a00:	88fb      	ldrh	r3, [r7, #6]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 f806 	bl	8004a14 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40010400 	.word	0x40010400

08004a14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e0bb      	b.n	8004bba <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b05      	cmp	r3, #5
 8004a4c:	d101      	bne.n	8004a52 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e0b3      	b.n	8004bba <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d101      	bne.n	8004a62 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e0ab      	b.n	8004bba <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a62:	4b58      	ldr	r3, [pc, #352]	; (8004bc4 <HAL_OPAMP_Init+0x198>)
 8004a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a66:	4a57      	ldr	r2, [pc, #348]	; (8004bc4 <HAL_OPAMP_Init+0x198>)
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	6613      	str	r3, [r2, #96]	; 0x60
 8004a6e:	4b55      	ldr	r3, [pc, #340]	; (8004bc4 <HAL_OPAMP_Init+0x198>)
 8004a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d103      	bne.n	8004a8e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fc fffa 	bl	8001a88 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b40      	cmp	r3, #64	; 0x40
 8004a9a:	d003      	beq.n	8004aa4 <HAL_OPAMP_Init+0x78>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b60      	cmp	r3, #96	; 0x60
 8004aa2:	d133      	bne.n	8004b0c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 0110 	bic.w	r1, r3, #16
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	4b41      	ldr	r3, [pc, #260]	; (8004bc8 <HAL_OPAMP_Init+0x19c>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6851      	ldr	r1, [r2, #4]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6892      	ldr	r2, [r2, #8]
 8004acc:	4311      	orrs	r1, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6912      	ldr	r2, [r2, #16]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	7d09      	ldrb	r1, [r1, #20]
 8004ad8:	2901      	cmp	r1, #1
 8004ada:	d102      	bne.n	8004ae2 <HAL_OPAMP_Init+0xb6>
 8004adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ae0:	e000      	b.n	8004ae4 <HAL_OPAMP_Init+0xb8>
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	4311      	orrs	r1, r2
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aea:	4311      	orrs	r1, r2
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004af0:	4311      	orrs	r1, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004af6:	04d2      	lsls	r2, r2, #19
 8004af8:	4311      	orrs	r1, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004afe:	0612      	lsls	r2, r2, #24
 8004b00:	4311      	orrs	r1, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6812      	ldr	r2, [r2, #0]
 8004b06:	430b      	orrs	r3, r1
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e035      	b.n	8004b78 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f023 0110 	bic.w	r1, r3, #16
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b27      	ldr	r3, [pc, #156]	; (8004bc8 <HAL_OPAMP_Init+0x19c>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6851      	ldr	r1, [r2, #4]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6892      	ldr	r2, [r2, #8]
 8004b34:	4311      	orrs	r1, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68d2      	ldr	r2, [r2, #12]
 8004b3a:	4311      	orrs	r1, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6912      	ldr	r2, [r2, #16]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	7d09      	ldrb	r1, [r1, #20]
 8004b46:	2901      	cmp	r1, #1
 8004b48:	d102      	bne.n	8004b50 <HAL_OPAMP_Init+0x124>
 8004b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b4e:	e000      	b.n	8004b52 <HAL_OPAMP_Init+0x126>
 8004b50:	2100      	movs	r1, #0
 8004b52:	4311      	orrs	r1, r2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b58:	4311      	orrs	r1, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004b5e:	4311      	orrs	r1, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b64:	04d2      	lsls	r2, r2, #19
 8004b66:	4311      	orrs	r1, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b6c:	0612      	lsls	r2, r2, #24
 8004b6e:	4311      	orrs	r1, r2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	430b      	orrs	r3, r1
 8004b76:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	db10      	blt.n	8004ba4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699a      	ldr	r2, [r3, #24]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d103      	bne.n	8004bb8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	e0003e11 	.word	0xe0003e11

08004bcc <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	73fb      	strb	r3, [r7, #15]
 8004be2:	e01d      	b.n	8004c20 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b05      	cmp	r3, #5
 8004bee:	d102      	bne.n	8004bf6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
 8004bf4:	e014      	b.n	8004c20 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d10c      	bne.n	8004c1c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0201 	orr.w	r2, r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2204      	movs	r2, #4
 8004c16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004c1a:	e001      	b.n	8004c20 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d141      	bne.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c4a:	4b4b      	ldr	r3, [pc, #300]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c56:	d131      	bne.n	8004cbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c58:	4b47      	ldr	r3, [pc, #284]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c5e:	4a46      	ldr	r2, [pc, #280]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c68:	4b43      	ldr	r3, [pc, #268]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c70:	4a41      	ldr	r2, [pc, #260]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c78:	4b40      	ldr	r3, [pc, #256]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2232      	movs	r2, #50	; 0x32
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	4a3f      	ldr	r2, [pc, #252]	; (8004d80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	0c9b      	lsrs	r3, r3, #18
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c8e:	e002      	b.n	8004c96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c96:	4b38      	ldr	r3, [pc, #224]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca2:	d102      	bne.n	8004caa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f2      	bne.n	8004c90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004caa:	4b33      	ldr	r3, [pc, #204]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb6:	d158      	bne.n	8004d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e057      	b.n	8004d6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cbc:	4b2e      	ldr	r3, [pc, #184]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc2:	4a2d      	ldr	r2, [pc, #180]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ccc:	e04d      	b.n	8004d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd4:	d141      	bne.n	8004d5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cd6:	4b28      	ldr	r3, [pc, #160]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce2:	d131      	bne.n	8004d48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ce4:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cea:	4a23      	ldr	r2, [pc, #140]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cf4:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cfc:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d04:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2232      	movs	r2, #50	; 0x32
 8004d0a:	fb02 f303 	mul.w	r3, r2, r3
 8004d0e:	4a1c      	ldr	r2, [pc, #112]	; (8004d80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	0c9b      	lsrs	r3, r3, #18
 8004d16:	3301      	adds	r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d1a:	e002      	b.n	8004d22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d22:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2e:	d102      	bne.n	8004d36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f2      	bne.n	8004d1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d36:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d42:	d112      	bne.n	8004d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e011      	b.n	8004d6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d4e:	4a0a      	ldr	r2, [pc, #40]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d58:	e007      	b.n	8004d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d5a:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d62:	4a05      	ldr	r2, [pc, #20]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d68:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	40007000 	.word	0x40007000
 8004d7c:	20000000 	.word	0x20000000
 8004d80:	431bde83 	.word	0x431bde83

08004d84 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8004d88:	4b1c      	ldr	r3, [pc, #112]	; (8004dfc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004d94:	f7ff ff4b 	bl	8004c2e <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004d98:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004d9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d9e:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 8004da0:	4b16      	ldr	r3, [pc, #88]	; (8004dfc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d004      	beq.n	8004db6 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8004dac:	f000 f828 	bl	8004e00 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8004db0:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004db2:	2208      	movs	r2, #8
 8004db4:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0U)
 8004db6:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d004      	beq.n	8004dcc <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8004dc2:	f000 f824 	bl	8004e0e <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004dc8:	2210      	movs	r2, #16
 8004dca:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d004      	beq.n	8004de2 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8004dd8:	f000 f820 	bl	8004e1c <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8004ddc:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004dde:	2220      	movs	r2, #32
 8004de0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0U)
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d004      	beq.n	8004df8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8004dee:	f000 f81c 	bl	8004e2a <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8004df2:	4b02      	ldr	r3, [pc, #8]	; (8004dfc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004df4:	2240      	movs	r2, #64	; 0x40
 8004df6:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8004df8:	bf00      	nop
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40010400 	.word	0x40010400

08004e00 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e46:	6093      	str	r3, [r2, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40007000 	.word	0x40007000

08004e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e308      	b.n	800547c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d075      	beq.n	8004f62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e76:	4ba3      	ldr	r3, [pc, #652]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 030c 	and.w	r3, r3, #12
 8004e7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e80:	4ba0      	ldr	r3, [pc, #640]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b0c      	cmp	r3, #12
 8004e8e:	d102      	bne.n	8004e96 <HAL_RCC_OscConfig+0x3e>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d002      	beq.n	8004e9c <HAL_RCC_OscConfig+0x44>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d10b      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e9c:	4b99      	ldr	r3, [pc, #612]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d05b      	beq.n	8004f60 <HAL_RCC_OscConfig+0x108>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d157      	bne.n	8004f60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e2e3      	b.n	800547c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ebc:	d106      	bne.n	8004ecc <HAL_RCC_OscConfig+0x74>
 8004ebe:	4b91      	ldr	r3, [pc, #580]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a90      	ldr	r2, [pc, #576]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	e01d      	b.n	8004f08 <HAL_RCC_OscConfig+0xb0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x98>
 8004ed6:	4b8b      	ldr	r3, [pc, #556]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a8a      	ldr	r2, [pc, #552]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	4b88      	ldr	r3, [pc, #544]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a87      	ldr	r2, [pc, #540]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e00b      	b.n	8004f08 <HAL_RCC_OscConfig+0xb0>
 8004ef0:	4b84      	ldr	r3, [pc, #528]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a83      	ldr	r2, [pc, #524]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4b81      	ldr	r3, [pc, #516]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a80      	ldr	r2, [pc, #512]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fc ffdc 	bl	8001ecc <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f18:	f7fc ffd8 	bl	8001ecc <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	; 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e2a8      	b.n	800547c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f2a:	4b76      	ldr	r3, [pc, #472]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0xc0>
 8004f36:	e014      	b.n	8004f62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fc ffc8 	bl	8001ecc <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f40:	f7fc ffc4 	bl	8001ecc <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	; 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e294      	b.n	800547c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f52:	4b6c      	ldr	r3, [pc, #432]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0xe8>
 8004f5e:	e000      	b.n	8004f62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d075      	beq.n	800505a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f6e:	4b65      	ldr	r3, [pc, #404]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f78:	4b62      	ldr	r3, [pc, #392]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	2b0c      	cmp	r3, #12
 8004f86:	d102      	bne.n	8004f8e <HAL_RCC_OscConfig+0x136>
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d002      	beq.n	8004f94 <HAL_RCC_OscConfig+0x13c>
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d11f      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f94:	4b5b      	ldr	r3, [pc, #364]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_OscConfig+0x154>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e267      	b.n	800547c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fac:	4b55      	ldr	r3, [pc, #340]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	061b      	lsls	r3, r3, #24
 8004fba:	4952      	ldr	r1, [pc, #328]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fc0:	4b51      	ldr	r3, [pc, #324]	; (8005108 <HAL_RCC_OscConfig+0x2b0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fc ff35 	bl	8001e34 <HAL_InitTick>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d043      	beq.n	8005058 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e253      	b.n	800547c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d023      	beq.n	8005024 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fdc:	4b49      	ldr	r3, [pc, #292]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a48      	ldr	r2, [pc, #288]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8004fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fc ff70 	bl	8001ecc <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ff0:	f7fc ff6c 	bl	8001ecc <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e23c      	b.n	800547c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005002:	4b40      	ldr	r3, [pc, #256]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800500e:	4b3d      	ldr	r3, [pc, #244]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	061b      	lsls	r3, r3, #24
 800501c:	4939      	ldr	r1, [pc, #228]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 800501e:	4313      	orrs	r3, r2
 8005020:	604b      	str	r3, [r1, #4]
 8005022:	e01a      	b.n	800505a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005024:	4b37      	ldr	r3, [pc, #220]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a36      	ldr	r2, [pc, #216]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 800502a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800502e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fc ff4c 	bl	8001ecc <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005038:	f7fc ff48 	bl	8001ecc <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e218      	b.n	800547c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800504a:	4b2e      	ldr	r3, [pc, #184]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x1e0>
 8005056:	e000      	b.n	800505a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005058:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d03c      	beq.n	80050e0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d01c      	beq.n	80050a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800506e:	4b25      	ldr	r3, [pc, #148]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8005070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005074:	4a23      	ldr	r2, [pc, #140]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507e:	f7fc ff25 	bl	8001ecc <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005086:	f7fc ff21 	bl	8001ecc <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e1f1      	b.n	800547c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005098:	4b1a      	ldr	r3, [pc, #104]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 800509a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0ef      	beq.n	8005086 <HAL_RCC_OscConfig+0x22e>
 80050a6:	e01b      	b.n	80050e0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a8:	4b16      	ldr	r3, [pc, #88]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 80050aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ae:	4a15      	ldr	r2, [pc, #84]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 80050b0:	f023 0301 	bic.w	r3, r3, #1
 80050b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b8:	f7fc ff08 	bl	8001ecc <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050c0:	f7fc ff04 	bl	8001ecc <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e1d4      	b.n	800547c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 80050d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1ef      	bne.n	80050c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80ab 	beq.w	8005244 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ee:	2300      	movs	r3, #0
 80050f0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050f2:	4b04      	ldr	r3, [pc, #16]	; (8005104 <HAL_RCC_OscConfig+0x2ac>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_RCC_OscConfig+0x2b4>
 80050fe:	2301      	movs	r3, #1
 8005100:	e005      	b.n	800510e <HAL_RCC_OscConfig+0x2b6>
 8005102:	bf00      	nop
 8005104:	40021000 	.word	0x40021000
 8005108:	20000004 	.word	0x20000004
 800510c:	2300      	movs	r3, #0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00d      	beq.n	800512e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005112:	4baf      	ldr	r3, [pc, #700]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005116:	4aae      	ldr	r2, [pc, #696]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511c:	6593      	str	r3, [r2, #88]	; 0x58
 800511e:	4bac      	ldr	r3, [pc, #688]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800512a:	2301      	movs	r3, #1
 800512c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800512e:	4ba9      	ldr	r3, [pc, #676]	; (80053d4 <HAL_RCC_OscConfig+0x57c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d118      	bne.n	800516c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800513a:	4ba6      	ldr	r3, [pc, #664]	; (80053d4 <HAL_RCC_OscConfig+0x57c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4aa5      	ldr	r2, [pc, #660]	; (80053d4 <HAL_RCC_OscConfig+0x57c>)
 8005140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005146:	f7fc fec1 	bl	8001ecc <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800514e:	f7fc febd 	bl	8001ecc <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e18d      	b.n	800547c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005160:	4b9c      	ldr	r3, [pc, #624]	; (80053d4 <HAL_RCC_OscConfig+0x57c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f0      	beq.n	800514e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d108      	bne.n	8005186 <HAL_RCC_OscConfig+0x32e>
 8005174:	4b96      	ldr	r3, [pc, #600]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517a:	4a95      	ldr	r2, [pc, #596]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005184:	e024      	b.n	80051d0 <HAL_RCC_OscConfig+0x378>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b05      	cmp	r3, #5
 800518c:	d110      	bne.n	80051b0 <HAL_RCC_OscConfig+0x358>
 800518e:	4b90      	ldr	r3, [pc, #576]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005194:	4a8e      	ldr	r2, [pc, #568]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005196:	f043 0304 	orr.w	r3, r3, #4
 800519a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800519e:	4b8c      	ldr	r3, [pc, #560]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a4:	4a8a      	ldr	r2, [pc, #552]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051ae:	e00f      	b.n	80051d0 <HAL_RCC_OscConfig+0x378>
 80051b0:	4b87      	ldr	r3, [pc, #540]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80051b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b6:	4a86      	ldr	r2, [pc, #536]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051c0:	4b83      	ldr	r3, [pc, #524]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	4a82      	ldr	r2, [pc, #520]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80051c8:	f023 0304 	bic.w	r3, r3, #4
 80051cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d016      	beq.n	8005206 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fc fe78 	bl	8001ecc <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e0:	f7fc fe74 	bl	8001ecc <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e142      	b.n	800547c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f6:	4b76      	ldr	r3, [pc, #472]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80051f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ed      	beq.n	80051e0 <HAL_RCC_OscConfig+0x388>
 8005204:	e015      	b.n	8005232 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005206:	f7fc fe61 	bl	8001ecc <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800520c:	e00a      	b.n	8005224 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fc fe5d 	bl	8001ecc <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	; 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e12b      	b.n	800547c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005224:	4b6a      	ldr	r3, [pc, #424]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1ed      	bne.n	800520e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005232:	7ffb      	ldrb	r3, [r7, #31]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d105      	bne.n	8005244 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005238:	4b65      	ldr	r3, [pc, #404]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	4a64      	ldr	r2, [pc, #400]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 800523e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005242:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b00      	cmp	r3, #0
 800524e:	d03c      	beq.n	80052ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01c      	beq.n	8005292 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005258:	4b5d      	ldr	r3, [pc, #372]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 800525a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800525e:	4a5c      	ldr	r2, [pc, #368]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005268:	f7fc fe30 	bl	8001ecc <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005270:	f7fc fe2c 	bl	8001ecc <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e0fc      	b.n	800547c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005282:	4b53      	ldr	r3, [pc, #332]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ef      	beq.n	8005270 <HAL_RCC_OscConfig+0x418>
 8005290:	e01b      	b.n	80052ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005292:	4b4f      	ldr	r3, [pc, #316]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005298:	4a4d      	ldr	r2, [pc, #308]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 800529a:	f023 0301 	bic.w	r3, r3, #1
 800529e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a2:	f7fc fe13 	bl	8001ecc <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052aa:	f7fc fe0f 	bl	8001ecc <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e0df      	b.n	800547c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052bc:	4b44      	ldr	r3, [pc, #272]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80052be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1ef      	bne.n	80052aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 80d3 	beq.w	800547a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052d4:	4b3e      	ldr	r3, [pc, #248]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 030c 	and.w	r3, r3, #12
 80052dc:	2b0c      	cmp	r3, #12
 80052de:	f000 808d 	beq.w	80053fc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d15a      	bne.n	80053a0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ea:	4b39      	ldr	r3, [pc, #228]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a38      	ldr	r2, [pc, #224]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80052f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f6:	f7fc fde9 	bl	8001ecc <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fe:	f7fc fde5 	bl	8001ecc <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e0b5      	b.n	800547c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005310:	4b2f      	ldr	r3, [pc, #188]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1f0      	bne.n	80052fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800531c:	4b2c      	ldr	r3, [pc, #176]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	4b2d      	ldr	r3, [pc, #180]	; (80053d8 <HAL_RCC_OscConfig+0x580>)
 8005322:	4013      	ands	r3, r2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6a11      	ldr	r1, [r2, #32]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800532c:	3a01      	subs	r2, #1
 800532e:	0112      	lsls	r2, r2, #4
 8005330:	4311      	orrs	r1, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005336:	0212      	lsls	r2, r2, #8
 8005338:	4311      	orrs	r1, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800533e:	0852      	lsrs	r2, r2, #1
 8005340:	3a01      	subs	r2, #1
 8005342:	0552      	lsls	r2, r2, #21
 8005344:	4311      	orrs	r1, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800534a:	0852      	lsrs	r2, r2, #1
 800534c:	3a01      	subs	r2, #1
 800534e:	0652      	lsls	r2, r2, #25
 8005350:	4311      	orrs	r1, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005356:	06d2      	lsls	r2, r2, #27
 8005358:	430a      	orrs	r2, r1
 800535a:	491d      	ldr	r1, [pc, #116]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 800535c:	4313      	orrs	r3, r2
 800535e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005360:	4b1b      	ldr	r3, [pc, #108]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1a      	ldr	r2, [pc, #104]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800536a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800536c:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4a17      	ldr	r2, [pc, #92]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005376:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fc fda8 	bl	8001ecc <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005380:	f7fc fda4 	bl	8001ecc <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e074      	b.n	800547c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005392:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0x528>
 800539e:	e06c      	b.n	800547a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a0:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80053a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053aa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80053ac:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4a07      	ldr	r2, [pc, #28]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80053b8:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4a04      	ldr	r2, [pc, #16]	; (80053d0 <HAL_RCC_OscConfig+0x578>)
 80053be:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80053c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fc fd80 	bl	8001ecc <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ce:	e00e      	b.n	80053ee <HAL_RCC_OscConfig+0x596>
 80053d0:	40021000 	.word	0x40021000
 80053d4:	40007000 	.word	0x40007000
 80053d8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fc fd76 	bl	8001ecc <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e046      	b.n	800547c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ee:	4b25      	ldr	r3, [pc, #148]	; (8005484 <HAL_RCC_OscConfig+0x62c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x584>
 80053fa:	e03e      	b.n	800547a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e039      	b.n	800547c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005408:	4b1e      	ldr	r3, [pc, #120]	; (8005484 <HAL_RCC_OscConfig+0x62c>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f003 0203 	and.w	r2, r3, #3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	429a      	cmp	r2, r3
 800541a:	d12c      	bne.n	8005476 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	3b01      	subs	r3, #1
 8005428:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d123      	bne.n	8005476 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800543a:	429a      	cmp	r2, r3
 800543c:	d11b      	bne.n	8005476 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800544a:	429a      	cmp	r2, r3
 800544c:	d113      	bne.n	8005476 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	085b      	lsrs	r3, r3, #1
 800545a:	3b01      	subs	r3, #1
 800545c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800545e:	429a      	cmp	r2, r3
 8005460:	d109      	bne.n	8005476 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	085b      	lsrs	r3, r3, #1
 800546e:	3b01      	subs	r3, #1
 8005470:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005472:	429a      	cmp	r2, r3
 8005474:	d001      	beq.n	800547a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40021000 	.word	0x40021000

08005488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e11e      	b.n	80056de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054a0:	4b91      	ldr	r3, [pc, #580]	; (80056e8 <HAL_RCC_ClockConfig+0x260>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d910      	bls.n	80054d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b8e      	ldr	r3, [pc, #568]	; (80056e8 <HAL_RCC_ClockConfig+0x260>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f023 020f 	bic.w	r2, r3, #15
 80054b6:	498c      	ldr	r1, [pc, #560]	; (80056e8 <HAL_RCC_ClockConfig+0x260>)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b8a      	ldr	r3, [pc, #552]	; (80056e8 <HAL_RCC_ClockConfig+0x260>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e106      	b.n	80056de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d073      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d129      	bne.n	8005538 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054e4:	4b81      	ldr	r3, [pc, #516]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0f4      	b.n	80056de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80054f4:	f000 f99e 	bl	8005834 <RCC_GetSysClockFreqFromPLLSource>
 80054f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4a7c      	ldr	r2, [pc, #496]	; (80056f0 <HAL_RCC_ClockConfig+0x268>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d93f      	bls.n	8005582 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005502:	4b7a      	ldr	r3, [pc, #488]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005516:	2b00      	cmp	r3, #0
 8005518:	d033      	beq.n	8005582 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800551e:	2b00      	cmp	r3, #0
 8005520:	d12f      	bne.n	8005582 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005522:	4b72      	ldr	r3, [pc, #456]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800552a:	4a70      	ldr	r2, [pc, #448]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 800552c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005530:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005532:	2380      	movs	r3, #128	; 0x80
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	e024      	b.n	8005582 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d107      	bne.n	8005550 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005540:	4b6a      	ldr	r3, [pc, #424]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d109      	bne.n	8005560 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0c6      	b.n	80056de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005550:	4b66      	ldr	r3, [pc, #408]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e0be      	b.n	80056de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005560:	f000 f8ce 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 8005564:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	4a61      	ldr	r2, [pc, #388]	; (80056f0 <HAL_RCC_ClockConfig+0x268>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d909      	bls.n	8005582 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800556e:	4b5f      	ldr	r3, [pc, #380]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005576:	4a5d      	ldr	r2, [pc, #372]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 8005578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005582:	4b5a      	ldr	r3, [pc, #360]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f023 0203 	bic.w	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	4957      	ldr	r1, [pc, #348]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 8005590:	4313      	orrs	r3, r2
 8005592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005594:	f7fc fc9a 	bl	8001ecc <HAL_GetTick>
 8005598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559a:	e00a      	b.n	80055b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800559c:	f7fc fc96 	bl	8001ecc <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e095      	b.n	80056de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b2:	4b4e      	ldr	r3, [pc, #312]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 020c 	and.w	r2, r3, #12
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d1eb      	bne.n	800559c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d023      	beq.n	8005618 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055dc:	4b43      	ldr	r3, [pc, #268]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	4a42      	ldr	r2, [pc, #264]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 80055e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d007      	beq.n	8005604 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80055f4:	4b3d      	ldr	r3, [pc, #244]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80055fc:	4a3b      	ldr	r2, [pc, #236]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 80055fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005602:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005604:	4b39      	ldr	r3, [pc, #228]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4936      	ldr	r1, [pc, #216]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 8005612:	4313      	orrs	r3, r2
 8005614:	608b      	str	r3, [r1, #8]
 8005616:	e008      	b.n	800562a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b80      	cmp	r3, #128	; 0x80
 800561c:	d105      	bne.n	800562a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800561e:	4b33      	ldr	r3, [pc, #204]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	4a32      	ldr	r2, [pc, #200]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 8005624:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005628:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800562a:	4b2f      	ldr	r3, [pc, #188]	; (80056e8 <HAL_RCC_ClockConfig+0x260>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d21d      	bcs.n	8005674 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005638:	4b2b      	ldr	r3, [pc, #172]	; (80056e8 <HAL_RCC_ClockConfig+0x260>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f023 020f 	bic.w	r2, r3, #15
 8005640:	4929      	ldr	r1, [pc, #164]	; (80056e8 <HAL_RCC_ClockConfig+0x260>)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	4313      	orrs	r3, r2
 8005646:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005648:	f7fc fc40 	bl	8001ecc <HAL_GetTick>
 800564c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800564e:	e00a      	b.n	8005666 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005650:	f7fc fc3c 	bl	8001ecc <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	; 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e03b      	b.n	80056de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005666:	4b20      	ldr	r3, [pc, #128]	; (80056e8 <HAL_RCC_ClockConfig+0x260>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d1ed      	bne.n	8005650 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005680:	4b1a      	ldr	r3, [pc, #104]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	4917      	ldr	r1, [pc, #92]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 800568e:	4313      	orrs	r3, r2
 8005690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800569e:	4b13      	ldr	r3, [pc, #76]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	490f      	ldr	r1, [pc, #60]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056b2:	f000 f825 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 80056b6:	4602      	mov	r2, r0
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <HAL_RCC_ClockConfig+0x264>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	091b      	lsrs	r3, r3, #4
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	490c      	ldr	r1, [pc, #48]	; (80056f4 <HAL_RCC_ClockConfig+0x26c>)
 80056c4:	5ccb      	ldrb	r3, [r1, r3]
 80056c6:	f003 031f 	and.w	r3, r3, #31
 80056ca:	fa22 f303 	lsr.w	r3, r2, r3
 80056ce:	4a0a      	ldr	r2, [pc, #40]	; (80056f8 <HAL_RCC_ClockConfig+0x270>)
 80056d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056d2:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <HAL_RCC_ClockConfig+0x274>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fc fbac 	bl	8001e34 <HAL_InitTick>
 80056dc:	4603      	mov	r3, r0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40022000 	.word	0x40022000
 80056ec:	40021000 	.word	0x40021000
 80056f0:	04c4b400 	.word	0x04c4b400
 80056f4:	08007620 	.word	0x08007620
 80056f8:	20000000 	.word	0x20000000
 80056fc:	20000004 	.word	0x20000004

08005700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005706:	4b2c      	ldr	r3, [pc, #176]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b04      	cmp	r3, #4
 8005710:	d102      	bne.n	8005718 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005712:	4b2a      	ldr	r3, [pc, #168]	; (80057bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	e047      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005718:	4b27      	ldr	r3, [pc, #156]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 030c 	and.w	r3, r3, #12
 8005720:	2b08      	cmp	r3, #8
 8005722:	d102      	bne.n	800572a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005724:	4b26      	ldr	r3, [pc, #152]	; (80057c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	e03e      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800572a:	4b23      	ldr	r3, [pc, #140]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 030c 	and.w	r3, r3, #12
 8005732:	2b0c      	cmp	r3, #12
 8005734:	d136      	bne.n	80057a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005736:	4b20      	ldr	r3, [pc, #128]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005740:	4b1d      	ldr	r3, [pc, #116]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	091b      	lsrs	r3, r3, #4
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	3301      	adds	r3, #1
 800574c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b03      	cmp	r3, #3
 8005752:	d10c      	bne.n	800576e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005754:	4a1a      	ldr	r2, [pc, #104]	; (80057c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	fbb2 f3f3 	udiv	r3, r2, r3
 800575c:	4a16      	ldr	r2, [pc, #88]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800575e:	68d2      	ldr	r2, [r2, #12]
 8005760:	0a12      	lsrs	r2, r2, #8
 8005762:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005766:	fb02 f303 	mul.w	r3, r2, r3
 800576a:	617b      	str	r3, [r7, #20]
      break;
 800576c:	e00c      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800576e:	4a13      	ldr	r2, [pc, #76]	; (80057bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	fbb2 f3f3 	udiv	r3, r2, r3
 8005776:	4a10      	ldr	r2, [pc, #64]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005778:	68d2      	ldr	r2, [r2, #12]
 800577a:	0a12      	lsrs	r2, r2, #8
 800577c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005780:	fb02 f303 	mul.w	r3, r2, r3
 8005784:	617b      	str	r3, [r7, #20]
      break;
 8005786:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005788:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	0e5b      	lsrs	r3, r3, #25
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	3301      	adds	r3, #1
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	e001      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80057a8:	693b      	ldr	r3, [r7, #16]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40021000 	.word	0x40021000
 80057bc:	00f42400 	.word	0x00f42400
 80057c0:	016e3600 	.word	0x016e3600

080057c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c8:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057ca:	681b      	ldr	r3, [r3, #0]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20000000 	.word	0x20000000

080057dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057e0:	f7ff fff0 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 80057e4:	4602      	mov	r2, r0
 80057e6:	4b06      	ldr	r3, [pc, #24]	; (8005800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	0a1b      	lsrs	r3, r3, #8
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	4904      	ldr	r1, [pc, #16]	; (8005804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057f2:	5ccb      	ldrb	r3, [r1, r3]
 80057f4:	f003 031f 	and.w	r3, r3, #31
 80057f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40021000 	.word	0x40021000
 8005804:	08007630 	.word	0x08007630

08005808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800580c:	f7ff ffda 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 8005810:	4602      	mov	r2, r0
 8005812:	4b06      	ldr	r3, [pc, #24]	; (800582c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	0adb      	lsrs	r3, r3, #11
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	4904      	ldr	r1, [pc, #16]	; (8005830 <HAL_RCC_GetPCLK2Freq+0x28>)
 800581e:	5ccb      	ldrb	r3, [r1, r3]
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005828:	4618      	mov	r0, r3
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40021000 	.word	0x40021000
 8005830:	08007630 	.word	0x08007630

08005834 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800583a:	4b1e      	ldr	r3, [pc, #120]	; (80058b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005844:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	091b      	lsrs	r3, r3, #4
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	3301      	adds	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b03      	cmp	r3, #3
 8005856:	d10c      	bne.n	8005872 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005858:	4a17      	ldr	r2, [pc, #92]	; (80058b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005860:	4a14      	ldr	r2, [pc, #80]	; (80058b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005862:	68d2      	ldr	r2, [r2, #12]
 8005864:	0a12      	lsrs	r2, r2, #8
 8005866:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	617b      	str	r3, [r7, #20]
    break;
 8005870:	e00c      	b.n	800588c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005872:	4a12      	ldr	r2, [pc, #72]	; (80058bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	fbb2 f3f3 	udiv	r3, r2, r3
 800587a:	4a0e      	ldr	r2, [pc, #56]	; (80058b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800587c:	68d2      	ldr	r2, [r2, #12]
 800587e:	0a12      	lsrs	r2, r2, #8
 8005880:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005884:	fb02 f303 	mul.w	r3, r2, r3
 8005888:	617b      	str	r3, [r7, #20]
    break;
 800588a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800588c:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	0e5b      	lsrs	r3, r3, #25
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	3301      	adds	r3, #1
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80058a6:	687b      	ldr	r3, [r7, #4]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	371c      	adds	r7, #28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	40021000 	.word	0x40021000
 80058b8:	016e3600 	.word	0x016e3600
 80058bc:	00f42400 	.word	0x00f42400

080058c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058c8:	2300      	movs	r3, #0
 80058ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058cc:	2300      	movs	r3, #0
 80058ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8098 	beq.w	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058de:	2300      	movs	r3, #0
 80058e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058e2:	4b43      	ldr	r3, [pc, #268]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10d      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ee:	4b40      	ldr	r3, [pc, #256]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f2:	4a3f      	ldr	r2, [pc, #252]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f8:	6593      	str	r3, [r2, #88]	; 0x58
 80058fa:	4b3d      	ldr	r3, [pc, #244]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005906:	2301      	movs	r3, #1
 8005908:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800590a:	4b3a      	ldr	r3, [pc, #232]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a39      	ldr	r2, [pc, #228]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005914:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005916:	f7fc fad9 	bl	8001ecc <HAL_GetTick>
 800591a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800591c:	e009      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800591e:	f7fc fad5 	bl	8001ecc <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d902      	bls.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	74fb      	strb	r3, [r7, #19]
        break;
 8005930:	e005      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005932:	4b30      	ldr	r3, [pc, #192]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0ef      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800593e:	7cfb      	ldrb	r3, [r7, #19]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d159      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005944:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d01e      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	429a      	cmp	r2, r3
 800595e:	d019      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005960:	4b23      	ldr	r3, [pc, #140]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800596a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800596c:	4b20      	ldr	r3, [pc, #128]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800596e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005972:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800597c:	4b1c      	ldr	r3, [pc, #112]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800597e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005982:	4a1b      	ldr	r2, [pc, #108]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800598c:	4a18      	ldr	r2, [pc, #96]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d016      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599e:	f7fc fa95 	bl	8001ecc <HAL_GetTick>
 80059a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059a4:	e00b      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059a6:	f7fc fa91 	bl	8001ecc <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d902      	bls.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	74fb      	strb	r3, [r7, #19]
            break;
 80059bc:	e006      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059be:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0ec      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80059cc:	7cfb      	ldrb	r3, [r7, #19]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10b      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059d2:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e0:	4903      	ldr	r1, [pc, #12]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059e8:	e008      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059ea:	7cfb      	ldrb	r3, [r7, #19]
 80059ec:	74bb      	strb	r3, [r7, #18]
 80059ee:	e005      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80059f0:	40021000 	.word	0x40021000
 80059f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f8:	7cfb      	ldrb	r3, [r7, #19]
 80059fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059fc:	7c7b      	ldrb	r3, [r7, #17]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d105      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a02:	4baf      	ldr	r3, [pc, #700]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a06:	4aae      	ldr	r2, [pc, #696]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a1a:	4ba9      	ldr	r3, [pc, #676]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a20:	f023 0203 	bic.w	r2, r3, #3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	49a5      	ldr	r1, [pc, #660]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a3c:	4ba0      	ldr	r3, [pc, #640]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a42:	f023 020c 	bic.w	r2, r3, #12
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	499d      	ldr	r1, [pc, #628]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a5e:	4b98      	ldr	r3, [pc, #608]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4994      	ldr	r1, [pc, #592]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a80:	4b8f      	ldr	r3, [pc, #572]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	498c      	ldr	r1, [pc, #560]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005aa2:	4b87      	ldr	r3, [pc, #540]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	4983      	ldr	r1, [pc, #524]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ac4:	4b7e      	ldr	r3, [pc, #504]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	497b      	ldr	r1, [pc, #492]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ae6:	4b76      	ldr	r3, [pc, #472]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	4972      	ldr	r1, [pc, #456]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b08:	4b6d      	ldr	r3, [pc, #436]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	496a      	ldr	r1, [pc, #424]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b2a:	4b65      	ldr	r3, [pc, #404]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	4961      	ldr	r1, [pc, #388]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b4c:	4b5c      	ldr	r3, [pc, #368]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b52:	f023 0203 	bic.w	r2, r3, #3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	4959      	ldr	r1, [pc, #356]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b6e:	4b54      	ldr	r3, [pc, #336]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	4950      	ldr	r1, [pc, #320]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d015      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b90:	4b4b      	ldr	r3, [pc, #300]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	4948      	ldr	r1, [pc, #288]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bae:	d105      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bb0:	4b43      	ldr	r3, [pc, #268]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	4a42      	ldr	r2, [pc, #264]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d015      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005bc8:	4b3d      	ldr	r3, [pc, #244]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd6:	493a      	ldr	r1, [pc, #232]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005be6:	d105      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005be8:	4b35      	ldr	r3, [pc, #212]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4a34      	ldr	r2, [pc, #208]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bf2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d015      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c00:	4b2f      	ldr	r3, [pc, #188]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c06:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	492c      	ldr	r1, [pc, #176]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c1e:	d105      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c20:	4b27      	ldr	r3, [pc, #156]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	4a26      	ldr	r2, [pc, #152]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d015      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c38:	4b21      	ldr	r3, [pc, #132]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c46:	491e      	ldr	r1, [pc, #120]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c56:	d105      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c58:	4b19      	ldr	r3, [pc, #100]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	4a18      	ldr	r2, [pc, #96]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d015      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c70:	4b13      	ldr	r3, [pc, #76]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	4910      	ldr	r1, [pc, #64]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c8e:	d105      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	4a0a      	ldr	r2, [pc, #40]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d018      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ca8:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	4902      	ldr	r1, [pc, #8]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005cbe:	e001      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005cc0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ccc:	d105      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005cce:	4b21      	ldr	r3, [pc, #132]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	4a20      	ldr	r2, [pc, #128]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d015      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005ce6:	4b1b      	ldr	r3, [pc, #108]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cf4:	4917      	ldr	r1, [pc, #92]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d04:	d105      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d06:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	4a12      	ldr	r2, [pc, #72]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d10:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d015      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2c:	4909      	ldr	r1, [pc, #36]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d3c:	d105      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d3e:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d48:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005d4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40021000 	.word	0x40021000

08005d58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e09d      	b.n	8005ea6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d108      	bne.n	8005d84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d7a:	d009      	beq.n	8005d90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	61da      	str	r2, [r3, #28]
 8005d82:	e005      	b.n	8005d90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fb ff14 	bl	8001bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dd0:	d902      	bls.n	8005dd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	e002      	b.n	8005dde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ddc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005de6:	d007      	beq.n	8005df8 <HAL_SPI_Init+0xa0>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005df0:	d002      	beq.n	8005df8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3a:	ea42 0103 	orr.w	r1, r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	0c1b      	lsrs	r3, r3, #16
 8005e54:	f003 0204 	and.w	r2, r3, #4
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	f003 0310 	and.w	r3, r3, #16
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e74:	ea42 0103 	orr.w	r1, r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69da      	ldr	r2, [r3, #28]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b088      	sub	sp, #32
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	603b      	str	r3, [r7, #0]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_SPI_Transmit+0x22>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e158      	b.n	8006182 <HAL_SPI_Transmit+0x2d4>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ed8:	f7fb fff8 	bl	8001ecc <HAL_GetTick>
 8005edc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d002      	beq.n	8005ef4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005eee:	2302      	movs	r3, #2
 8005ef0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ef2:	e13d      	b.n	8006170 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <HAL_SPI_Transmit+0x52>
 8005efa:	88fb      	ldrh	r3, [r7, #6]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d102      	bne.n	8005f06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f04:	e134      	b.n	8006170 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2203      	movs	r2, #3
 8005f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	88fa      	ldrh	r2, [r7, #6]
 8005f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	88fa      	ldrh	r2, [r7, #6]
 8005f24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f50:	d10f      	bne.n	8005f72 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7c:	2b40      	cmp	r3, #64	; 0x40
 8005f7e:	d007      	beq.n	8005f90 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f98:	d94b      	bls.n	8006032 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_SPI_Transmit+0xfa>
 8005fa2:	8afb      	ldrh	r3, [r7, #22]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d13e      	bne.n	8006026 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fac:	881a      	ldrh	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	1c9a      	adds	r2, r3, #2
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fcc:	e02b      	b.n	8006026 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d112      	bne.n	8006002 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	881a      	ldrh	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	1c9a      	adds	r2, r3, #2
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006000:	e011      	b.n	8006026 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006002:	f7fb ff63 	bl	8001ecc <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d803      	bhi.n	800601a <HAL_SPI_Transmit+0x16c>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d102      	bne.n	8006020 <HAL_SPI_Transmit+0x172>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d102      	bne.n	8006026 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006024:	e0a4      	b.n	8006170 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1ce      	bne.n	8005fce <HAL_SPI_Transmit+0x120>
 8006030:	e07c      	b.n	800612c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <HAL_SPI_Transmit+0x192>
 800603a:	8afb      	ldrh	r3, [r7, #22]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d170      	bne.n	8006122 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b01      	cmp	r3, #1
 8006048:	d912      	bls.n	8006070 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	881a      	ldrh	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	1c9a      	adds	r2, r3, #2
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b02      	subs	r3, #2
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800606e:	e058      	b.n	8006122 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	7812      	ldrb	r2, [r2, #0]
 800607c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006096:	e044      	b.n	8006122 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d12b      	bne.n	80060fe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d912      	bls.n	80060d6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b4:	881a      	ldrh	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	1c9a      	adds	r2, r3, #2
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b02      	subs	r3, #2
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060d4:	e025      	b.n	8006122 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	7812      	ldrb	r2, [r2, #0]
 80060e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060fc:	e011      	b.n	8006122 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060fe:	f7fb fee5 	bl	8001ecc <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d803      	bhi.n	8006116 <HAL_SPI_Transmit+0x268>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006114:	d102      	bne.n	800611c <HAL_SPI_Transmit+0x26e>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006120:	e026      	b.n	8006170 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1b5      	bne.n	8006098 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fb53 	bl	80067dc <SPI_EndRxTxTransaction>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800614a:	2300      	movs	r3, #0
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	77fb      	strb	r3, [r7, #31]
 800616c:	e000      	b.n	8006170 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800616e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006180:	7ffb      	ldrb	r3, [r7, #31]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b08a      	sub	sp, #40	; 0x28
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	607a      	str	r2, [r7, #4]
 8006196:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006198:	2301      	movs	r3, #1
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_SPI_TransmitReceive+0x26>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e1fb      	b.n	80065a8 <HAL_SPI_TransmitReceive+0x41e>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061b8:	f7fb fe88 	bl	8001ecc <HAL_GetTick>
 80061bc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061c4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80061cc:	887b      	ldrh	r3, [r7, #2]
 80061ce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80061d0:	887b      	ldrh	r3, [r7, #2]
 80061d2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061d4:	7efb      	ldrb	r3, [r7, #27]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d00e      	beq.n	80061f8 <HAL_SPI_TransmitReceive+0x6e>
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061e0:	d106      	bne.n	80061f0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d102      	bne.n	80061f0 <HAL_SPI_TransmitReceive+0x66>
 80061ea:	7efb      	ldrb	r3, [r7, #27]
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d003      	beq.n	80061f8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80061f0:	2302      	movs	r3, #2
 80061f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80061f6:	e1cd      	b.n	8006594 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <HAL_SPI_TransmitReceive+0x80>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <HAL_SPI_TransmitReceive+0x80>
 8006204:	887b      	ldrh	r3, [r7, #2]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d103      	bne.n	8006212 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006210:	e1c0      	b.n	8006594 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b04      	cmp	r3, #4
 800621c:	d003      	beq.n	8006226 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2205      	movs	r2, #5
 8006222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	887a      	ldrh	r2, [r7, #2]
 8006236:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	887a      	ldrh	r2, [r7, #2]
 800623e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	887a      	ldrh	r2, [r7, #2]
 800624c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	887a      	ldrh	r2, [r7, #2]
 8006252:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006268:	d802      	bhi.n	8006270 <HAL_SPI_TransmitReceive+0xe6>
 800626a:	8a3b      	ldrh	r3, [r7, #16]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d908      	bls.n	8006282 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800627e:	605a      	str	r2, [r3, #4]
 8006280:	e007      	b.n	8006292 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006290:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629c:	2b40      	cmp	r3, #64	; 0x40
 800629e:	d007      	beq.n	80062b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062b8:	d97c      	bls.n	80063b4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <HAL_SPI_TransmitReceive+0x13e>
 80062c2:	8a7b      	ldrh	r3, [r7, #18]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d169      	bne.n	800639c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	881a      	ldrh	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	1c9a      	adds	r2, r3, #2
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062ec:	e056      	b.n	800639c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d11b      	bne.n	8006334 <HAL_SPI_TransmitReceive+0x1aa>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d016      	beq.n	8006334 <HAL_SPI_TransmitReceive+0x1aa>
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	2b01      	cmp	r3, #1
 800630a:	d113      	bne.n	8006334 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	881a      	ldrh	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	1c9a      	adds	r2, r3, #2
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b01      	cmp	r3, #1
 8006340:	d11c      	bne.n	800637c <HAL_SPI_TransmitReceive+0x1f2>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d016      	beq.n	800637c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	b292      	uxth	r2, r2
 800635a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	1c9a      	adds	r2, r3, #2
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006378:	2301      	movs	r3, #1
 800637a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800637c:	f7fb fda6 	bl	8001ecc <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006388:	429a      	cmp	r2, r3
 800638a:	d807      	bhi.n	800639c <HAL_SPI_TransmitReceive+0x212>
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006392:	d003      	beq.n	800639c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800639a:	e0fb      	b.n	8006594 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1a3      	bne.n	80062ee <HAL_SPI_TransmitReceive+0x164>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d19d      	bne.n	80062ee <HAL_SPI_TransmitReceive+0x164>
 80063b2:	e0df      	b.n	8006574 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_SPI_TransmitReceive+0x23a>
 80063bc:	8a7b      	ldrh	r3, [r7, #18]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	f040 80cb 	bne.w	800655a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d912      	bls.n	80063f4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d2:	881a      	ldrh	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	1c9a      	adds	r2, r3, #2
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	3b02      	subs	r3, #2
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063f2:	e0b2      	b.n	800655a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	330c      	adds	r3, #12
 80063fe:	7812      	ldrb	r2, [r2, #0]
 8006400:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006410:	b29b      	uxth	r3, r3
 8006412:	3b01      	subs	r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800641a:	e09e      	b.n	800655a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b02      	cmp	r3, #2
 8006428:	d134      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x30a>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d02f      	beq.n	8006494 <HAL_SPI_TransmitReceive+0x30a>
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	2b01      	cmp	r3, #1
 8006438:	d12c      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b01      	cmp	r3, #1
 8006442:	d912      	bls.n	800646a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	881a      	ldrh	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	1c9a      	adds	r2, r3, #2
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b02      	subs	r3, #2
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006468:	e012      	b.n	8006490 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	7812      	ldrb	r2, [r2, #0]
 8006476:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006486:	b29b      	uxth	r3, r3
 8006488:	3b01      	subs	r3, #1
 800648a:	b29a      	uxth	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d148      	bne.n	8006534 <HAL_SPI_TransmitReceive+0x3aa>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d042      	beq.n	8006534 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d923      	bls.n	8006502 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68da      	ldr	r2, [r3, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	b292      	uxth	r2, r2
 80064c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064cc:	1c9a      	adds	r2, r3, #2
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b02      	subs	r3, #2
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d81f      	bhi.n	8006530 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064fe:	605a      	str	r2, [r3, #4]
 8006500:	e016      	b.n	8006530 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f103 020c 	add.w	r2, r3, #12
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	7812      	ldrb	r2, [r2, #0]
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006530:	2301      	movs	r3, #1
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006534:	f7fb fcca 	bl	8001ecc <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006540:	429a      	cmp	r2, r3
 8006542:	d803      	bhi.n	800654c <HAL_SPI_TransmitReceive+0x3c2>
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654a:	d102      	bne.n	8006552 <HAL_SPI_TransmitReceive+0x3c8>
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	2b00      	cmp	r3, #0
 8006550:	d103      	bne.n	800655a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006558:	e01c      	b.n	8006594 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800655e:	b29b      	uxth	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	f47f af5b 	bne.w	800641c <HAL_SPI_TransmitReceive+0x292>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	f47f af54 	bne.w	800641c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 f92f 	bl	80067dc <SPI_EndRxTxTransaction>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d006      	beq.n	8006592 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2220      	movs	r2, #32
 800658e:	661a      	str	r2, [r3, #96]	; 0x60
 8006590:	e000      	b.n	8006594 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006592:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80065a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3728      	adds	r7, #40	; 0x28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	4613      	mov	r3, r2
 80065be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065c0:	f7fb fc84 	bl	8001ecc <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	1a9b      	subs	r3, r3, r2
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	4413      	add	r3, r2
 80065ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065d0:	f7fb fc7c 	bl	8001ecc <HAL_GetTick>
 80065d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065d6:	4b39      	ldr	r3, [pc, #228]	; (80066bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	015b      	lsls	r3, r3, #5
 80065dc:	0d1b      	lsrs	r3, r3, #20
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	fb02 f303 	mul.w	r3, r2, r3
 80065e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065e6:	e054      	b.n	8006692 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ee:	d050      	beq.n	8006692 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065f0:	f7fb fc6c 	bl	8001ecc <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d902      	bls.n	8006606 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d13d      	bne.n	8006682 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006614:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800661e:	d111      	bne.n	8006644 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006628:	d004      	beq.n	8006634 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006632:	d107      	bne.n	8006644 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006642:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664c:	d10f      	bne.n	800666e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800666c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e017      	b.n	80066b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006688:	2300      	movs	r3, #0
 800668a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	3b01      	subs	r3, #1
 8006690:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4013      	ands	r3, r2
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	429a      	cmp	r2, r3
 80066a0:	bf0c      	ite	eq
 80066a2:	2301      	moveq	r3, #1
 80066a4:	2300      	movne	r3, #0
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d19b      	bne.n	80065e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3720      	adds	r7, #32
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20000000 	.word	0x20000000

080066c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b088      	sub	sp, #32
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066ce:	f7fb fbfd 	bl	8001ecc <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	1a9b      	subs	r3, r3, r2
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	4413      	add	r3, r2
 80066dc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066de:	f7fb fbf5 	bl	8001ecc <HAL_GetTick>
 80066e2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80066e4:	4b3c      	ldr	r3, [pc, #240]	; (80067d8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	00da      	lsls	r2, r3, #3
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	0d1b      	lsrs	r3, r3, #20
 80066f4:	69fa      	ldr	r2, [r7, #28]
 80066f6:	fb02 f303 	mul.w	r3, r2, r3
 80066fa:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80066fc:	e05f      	b.n	80067be <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006704:	d106      	bne.n	8006714 <SPI_WaitFifoStateUntilTimeout+0x54>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d103      	bne.n	8006714 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	330c      	adds	r3, #12
 8006712:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671a:	d050      	beq.n	80067be <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800671c:	f7fb fbd6 	bl	8001ecc <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	429a      	cmp	r2, r3
 800672a:	d902      	bls.n	8006732 <SPI_WaitFifoStateUntilTimeout+0x72>
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d13d      	bne.n	80067ae <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800674a:	d111      	bne.n	8006770 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006754:	d004      	beq.n	8006760 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800675e:	d107      	bne.n	8006770 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800676e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006778:	d10f      	bne.n	800679a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e010      	b.n	80067d0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4013      	ands	r3, r2
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d197      	bne.n	80066fe <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3720      	adds	r7, #32
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20000000 	.word	0x20000000

080067dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f7ff ff63 	bl	80066c0 <SPI_WaitFifoStateUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006804:	f043 0220 	orr.w	r2, r3, #32
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e027      	b.n	8006860 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2200      	movs	r2, #0
 8006818:	2180      	movs	r1, #128	; 0x80
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff fec8 	bl	80065b0 <SPI_WaitFlagStateUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d007      	beq.n	8006836 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800682a:	f043 0220 	orr.w	r2, r3, #32
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e014      	b.n	8006860 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2200      	movs	r2, #0
 800683e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f7ff ff3c 	bl	80066c0 <SPI_WaitFifoStateUntilTimeout>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d007      	beq.n	800685e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006852:	f043 0220 	orr.w	r2, r3, #32
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e000      	b.n	8006860 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e042      	b.n	8006900 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006880:	2b00      	cmp	r3, #0
 8006882:	d106      	bne.n	8006892 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7fb f827 	bl	80018e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2224      	movs	r2, #36	; 0x24
 8006896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0201 	bic.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f8c2 	bl	8006a34 <UART_SetConfig>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e022      	b.n	8006900 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fb86 	bl	8006fd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fc0d 	bl	8007118 <UART_CheckIdleState>
 80068fe:	4603      	mov	r3, r0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af02      	add	r7, sp, #8
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	4613      	mov	r3, r2
 8006916:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800691e:	2b20      	cmp	r3, #32
 8006920:	f040 8083 	bne.w	8006a2a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <HAL_UART_Transmit+0x28>
 800692a:	88fb      	ldrh	r3, [r7, #6]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e07b      	b.n	8006a2c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800693a:	2b01      	cmp	r3, #1
 800693c:	d101      	bne.n	8006942 <HAL_UART_Transmit+0x3a>
 800693e:	2302      	movs	r3, #2
 8006940:	e074      	b.n	8006a2c <HAL_UART_Transmit+0x124>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2221      	movs	r2, #33	; 0x21
 8006956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800695a:	f7fb fab7 	bl	8001ecc <HAL_GetTick>
 800695e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	88fa      	ldrh	r2, [r7, #6]
 8006964:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	88fa      	ldrh	r2, [r7, #6]
 800696c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006978:	d108      	bne.n	800698c <HAL_UART_Transmit+0x84>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d104      	bne.n	800698c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006982:	2300      	movs	r3, #0
 8006984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	61bb      	str	r3, [r7, #24]
 800698a:	e003      	b.n	8006994 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006990:	2300      	movs	r3, #0
 8006992:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800699c:	e02c      	b.n	80069f8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2200      	movs	r2, #0
 80069a6:	2180      	movs	r1, #128	; 0x80
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fbfd 	bl	80071a8 <UART_WaitOnFlagUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e039      	b.n	8006a2c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	3302      	adds	r3, #2
 80069d2:	61bb      	str	r3, [r7, #24]
 80069d4:	e007      	b.n	80069e6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	781a      	ldrb	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	3301      	adds	r3, #1
 80069e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1cc      	bne.n	800699e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2140      	movs	r1, #64	; 0x40
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fbca 	bl	80071a8 <UART_WaitOnFlagUntilTimeout>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e006      	b.n	8006a2c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	e000      	b.n	8006a2c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006a2a:	2302      	movs	r3, #2
  }
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a34:	b5b0      	push	{r4, r5, r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	4bb1      	ldr	r3, [pc, #708]	; (8006d30 <UART_SetConfig+0x2fc>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6812      	ldr	r2, [r2, #0]
 8006a70:	69f9      	ldr	r1, [r7, #28]
 8006a72:	430b      	orrs	r3, r1
 8006a74:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4aa7      	ldr	r2, [pc, #668]	; (8006d34 <UART_SetConfig+0x300>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d004      	beq.n	8006aa6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006ab0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6812      	ldr	r2, [r2, #0]
 8006ab8:	69f9      	ldr	r1, [r7, #28]
 8006aba:	430b      	orrs	r3, r1
 8006abc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	f023 010f 	bic.w	r1, r3, #15
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a97      	ldr	r2, [pc, #604]	; (8006d38 <UART_SetConfig+0x304>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d121      	bne.n	8006b22 <UART_SetConfig+0xee>
 8006ade:	4b97      	ldr	r3, [pc, #604]	; (8006d3c <UART_SetConfig+0x308>)
 8006ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae4:	f003 0303 	and.w	r3, r3, #3
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d817      	bhi.n	8006b1c <UART_SetConfig+0xe8>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <UART_SetConfig+0xc0>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b05 	.word	0x08006b05
 8006af8:	08006b11 	.word	0x08006b11
 8006afc:	08006b0b 	.word	0x08006b0b
 8006b00:	08006b17 	.word	0x08006b17
 8006b04:	2301      	movs	r3, #1
 8006b06:	76fb      	strb	r3, [r7, #27]
 8006b08:	e0e7      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	76fb      	strb	r3, [r7, #27]
 8006b0e:	e0e4      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006b10:	2304      	movs	r3, #4
 8006b12:	76fb      	strb	r3, [r7, #27]
 8006b14:	e0e1      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006b16:	2308      	movs	r3, #8
 8006b18:	76fb      	strb	r3, [r7, #27]
 8006b1a:	e0de      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006b1c:	2310      	movs	r3, #16
 8006b1e:	76fb      	strb	r3, [r7, #27]
 8006b20:	e0db      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a86      	ldr	r2, [pc, #536]	; (8006d40 <UART_SetConfig+0x30c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d132      	bne.n	8006b92 <UART_SetConfig+0x15e>
 8006b2c:	4b83      	ldr	r3, [pc, #524]	; (8006d3c <UART_SetConfig+0x308>)
 8006b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b32:	f003 030c 	and.w	r3, r3, #12
 8006b36:	2b0c      	cmp	r3, #12
 8006b38:	d828      	bhi.n	8006b8c <UART_SetConfig+0x158>
 8006b3a:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x10c>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b75 	.word	0x08006b75
 8006b44:	08006b8d 	.word	0x08006b8d
 8006b48:	08006b8d 	.word	0x08006b8d
 8006b4c:	08006b8d 	.word	0x08006b8d
 8006b50:	08006b81 	.word	0x08006b81
 8006b54:	08006b8d 	.word	0x08006b8d
 8006b58:	08006b8d 	.word	0x08006b8d
 8006b5c:	08006b8d 	.word	0x08006b8d
 8006b60:	08006b7b 	.word	0x08006b7b
 8006b64:	08006b8d 	.word	0x08006b8d
 8006b68:	08006b8d 	.word	0x08006b8d
 8006b6c:	08006b8d 	.word	0x08006b8d
 8006b70:	08006b87 	.word	0x08006b87
 8006b74:	2300      	movs	r3, #0
 8006b76:	76fb      	strb	r3, [r7, #27]
 8006b78:	e0af      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	76fb      	strb	r3, [r7, #27]
 8006b7e:	e0ac      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006b80:	2304      	movs	r3, #4
 8006b82:	76fb      	strb	r3, [r7, #27]
 8006b84:	e0a9      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006b86:	2308      	movs	r3, #8
 8006b88:	76fb      	strb	r3, [r7, #27]
 8006b8a:	e0a6      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006b8c:	2310      	movs	r3, #16
 8006b8e:	76fb      	strb	r3, [r7, #27]
 8006b90:	e0a3      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a6b      	ldr	r2, [pc, #428]	; (8006d44 <UART_SetConfig+0x310>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d120      	bne.n	8006bde <UART_SetConfig+0x1aa>
 8006b9c:	4b67      	ldr	r3, [pc, #412]	; (8006d3c <UART_SetConfig+0x308>)
 8006b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ba6:	2b30      	cmp	r3, #48	; 0x30
 8006ba8:	d013      	beq.n	8006bd2 <UART_SetConfig+0x19e>
 8006baa:	2b30      	cmp	r3, #48	; 0x30
 8006bac:	d814      	bhi.n	8006bd8 <UART_SetConfig+0x1a4>
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	d009      	beq.n	8006bc6 <UART_SetConfig+0x192>
 8006bb2:	2b20      	cmp	r3, #32
 8006bb4:	d810      	bhi.n	8006bd8 <UART_SetConfig+0x1a4>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <UART_SetConfig+0x18c>
 8006bba:	2b10      	cmp	r3, #16
 8006bbc:	d006      	beq.n	8006bcc <UART_SetConfig+0x198>
 8006bbe:	e00b      	b.n	8006bd8 <UART_SetConfig+0x1a4>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	76fb      	strb	r3, [r7, #27]
 8006bc4:	e089      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	76fb      	strb	r3, [r7, #27]
 8006bca:	e086      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006bcc:	2304      	movs	r3, #4
 8006bce:	76fb      	strb	r3, [r7, #27]
 8006bd0:	e083      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006bd2:	2308      	movs	r3, #8
 8006bd4:	76fb      	strb	r3, [r7, #27]
 8006bd6:	e080      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006bd8:	2310      	movs	r3, #16
 8006bda:	76fb      	strb	r3, [r7, #27]
 8006bdc:	e07d      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a59      	ldr	r2, [pc, #356]	; (8006d48 <UART_SetConfig+0x314>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d120      	bne.n	8006c2a <UART_SetConfig+0x1f6>
 8006be8:	4b54      	ldr	r3, [pc, #336]	; (8006d3c <UART_SetConfig+0x308>)
 8006bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006bf2:	2bc0      	cmp	r3, #192	; 0xc0
 8006bf4:	d013      	beq.n	8006c1e <UART_SetConfig+0x1ea>
 8006bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8006bf8:	d814      	bhi.n	8006c24 <UART_SetConfig+0x1f0>
 8006bfa:	2b80      	cmp	r3, #128	; 0x80
 8006bfc:	d009      	beq.n	8006c12 <UART_SetConfig+0x1de>
 8006bfe:	2b80      	cmp	r3, #128	; 0x80
 8006c00:	d810      	bhi.n	8006c24 <UART_SetConfig+0x1f0>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <UART_SetConfig+0x1d8>
 8006c06:	2b40      	cmp	r3, #64	; 0x40
 8006c08:	d006      	beq.n	8006c18 <UART_SetConfig+0x1e4>
 8006c0a:	e00b      	b.n	8006c24 <UART_SetConfig+0x1f0>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	76fb      	strb	r3, [r7, #27]
 8006c10:	e063      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006c12:	2302      	movs	r3, #2
 8006c14:	76fb      	strb	r3, [r7, #27]
 8006c16:	e060      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006c18:	2304      	movs	r3, #4
 8006c1a:	76fb      	strb	r3, [r7, #27]
 8006c1c:	e05d      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006c1e:	2308      	movs	r3, #8
 8006c20:	76fb      	strb	r3, [r7, #27]
 8006c22:	e05a      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006c24:	2310      	movs	r3, #16
 8006c26:	76fb      	strb	r3, [r7, #27]
 8006c28:	e057      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a47      	ldr	r2, [pc, #284]	; (8006d4c <UART_SetConfig+0x318>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d125      	bne.n	8006c80 <UART_SetConfig+0x24c>
 8006c34:	4b41      	ldr	r3, [pc, #260]	; (8006d3c <UART_SetConfig+0x308>)
 8006c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c42:	d017      	beq.n	8006c74 <UART_SetConfig+0x240>
 8006c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c48:	d817      	bhi.n	8006c7a <UART_SetConfig+0x246>
 8006c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c4e:	d00b      	beq.n	8006c68 <UART_SetConfig+0x234>
 8006c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c54:	d811      	bhi.n	8006c7a <UART_SetConfig+0x246>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <UART_SetConfig+0x22e>
 8006c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5e:	d006      	beq.n	8006c6e <UART_SetConfig+0x23a>
 8006c60:	e00b      	b.n	8006c7a <UART_SetConfig+0x246>
 8006c62:	2300      	movs	r3, #0
 8006c64:	76fb      	strb	r3, [r7, #27]
 8006c66:	e038      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	76fb      	strb	r3, [r7, #27]
 8006c6c:	e035      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006c6e:	2304      	movs	r3, #4
 8006c70:	76fb      	strb	r3, [r7, #27]
 8006c72:	e032      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006c74:	2308      	movs	r3, #8
 8006c76:	76fb      	strb	r3, [r7, #27]
 8006c78:	e02f      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006c7a:	2310      	movs	r3, #16
 8006c7c:	76fb      	strb	r3, [r7, #27]
 8006c7e:	e02c      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a2b      	ldr	r2, [pc, #172]	; (8006d34 <UART_SetConfig+0x300>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d125      	bne.n	8006cd6 <UART_SetConfig+0x2a2>
 8006c8a:	4b2c      	ldr	r3, [pc, #176]	; (8006d3c <UART_SetConfig+0x308>)
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c98:	d017      	beq.n	8006cca <UART_SetConfig+0x296>
 8006c9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c9e:	d817      	bhi.n	8006cd0 <UART_SetConfig+0x29c>
 8006ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca4:	d00b      	beq.n	8006cbe <UART_SetConfig+0x28a>
 8006ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006caa:	d811      	bhi.n	8006cd0 <UART_SetConfig+0x29c>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <UART_SetConfig+0x284>
 8006cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb4:	d006      	beq.n	8006cc4 <UART_SetConfig+0x290>
 8006cb6:	e00b      	b.n	8006cd0 <UART_SetConfig+0x29c>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	76fb      	strb	r3, [r7, #27]
 8006cbc:	e00d      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	76fb      	strb	r3, [r7, #27]
 8006cc2:	e00a      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	76fb      	strb	r3, [r7, #27]
 8006cc8:	e007      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006cca:	2308      	movs	r3, #8
 8006ccc:	76fb      	strb	r3, [r7, #27]
 8006cce:	e004      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	76fb      	strb	r3, [r7, #27]
 8006cd4:	e001      	b.n	8006cda <UART_SetConfig+0x2a6>
 8006cd6:	2310      	movs	r3, #16
 8006cd8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a15      	ldr	r2, [pc, #84]	; (8006d34 <UART_SetConfig+0x300>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	f040 809f 	bne.w	8006e24 <UART_SetConfig+0x3f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ce6:	7efb      	ldrb	r3, [r7, #27]
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d837      	bhi.n	8006d5c <UART_SetConfig+0x328>
 8006cec:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <UART_SetConfig+0x2c0>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d5d 	.word	0x08006d5d
 8006cfc:	08006d21 	.word	0x08006d21
 8006d00:	08006d5d 	.word	0x08006d5d
 8006d04:	08006d27 	.word	0x08006d27
 8006d08:	08006d5d 	.word	0x08006d5d
 8006d0c:	08006d5d 	.word	0x08006d5d
 8006d10:	08006d5d 	.word	0x08006d5d
 8006d14:	08006d55 	.word	0x08006d55
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d18:	f7fe fd60 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8006d1c:	6178      	str	r0, [r7, #20]
        break;
 8006d1e:	e022      	b.n	8006d66 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <UART_SetConfig+0x31c>)
 8006d22:	617b      	str	r3, [r7, #20]
        break;
 8006d24:	e01f      	b.n	8006d66 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d26:	f7fe fceb 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 8006d2a:	6178      	str	r0, [r7, #20]
        break;
 8006d2c:	e01b      	b.n	8006d66 <UART_SetConfig+0x332>
 8006d2e:	bf00      	nop
 8006d30:	cfff69f3 	.word	0xcfff69f3
 8006d34:	40008000 	.word	0x40008000
 8006d38:	40013800 	.word	0x40013800
 8006d3c:	40021000 	.word	0x40021000
 8006d40:	40004400 	.word	0x40004400
 8006d44:	40004800 	.word	0x40004800
 8006d48:	40004c00 	.word	0x40004c00
 8006d4c:	40005000 	.word	0x40005000
 8006d50:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d58:	617b      	str	r3, [r7, #20]
        break;
 8006d5a:	e004      	b.n	8006d66 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	76bb      	strb	r3, [r7, #26]
        break;
 8006d64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 811b 	beq.w	8006fa4 <UART_SetConfig+0x570>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	4a96      	ldr	r2, [pc, #600]	; (8006fcc <UART_SetConfig+0x598>)
 8006d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d80:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	4613      	mov	r3, r2
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	4413      	add	r3, r2
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d305      	bcc.n	8006d9e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d902      	bls.n	8006da4 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	76bb      	strb	r3, [r7, #26]
 8006da2:	e0ff      	b.n	8006fa4 <UART_SetConfig+0x570>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f04f 0100 	mov.w	r1, #0
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	4a86      	ldr	r2, [pc, #536]	; (8006fcc <UART_SetConfig+0x598>)
 8006db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	f04f 0300 	mov.w	r3, #0
 8006dbc:	f7f9 fa34 	bl	8000228 <__aeabi_uldivmod>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	020b      	lsls	r3, r1, #8
 8006dd2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dd6:	0202      	lsls	r2, r0, #8
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	6849      	ldr	r1, [r1, #4]
 8006ddc:	0849      	lsrs	r1, r1, #1
 8006dde:	4608      	mov	r0, r1
 8006de0:	f04f 0100 	mov.w	r1, #0
 8006de4:	1814      	adds	r4, r2, r0
 8006de6:	eb43 0501 	adc.w	r5, r3, r1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	461a      	mov	r2, r3
 8006df0:	f04f 0300 	mov.w	r3, #0
 8006df4:	4620      	mov	r0, r4
 8006df6:	4629      	mov	r1, r5
 8006df8:	f7f9 fa16 	bl	8000228 <__aeabi_uldivmod>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4613      	mov	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e0a:	d308      	bcc.n	8006e1e <UART_SetConfig+0x3ea>
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e12:	d204      	bcs.n	8006e1e <UART_SetConfig+0x3ea>
        {
          huart->Instance->BRR = usartdiv;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	60da      	str	r2, [r3, #12]
 8006e1c:	e0c2      	b.n	8006fa4 <UART_SetConfig+0x570>
        }
        else
        {
          ret = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	76bb      	strb	r3, [r7, #26]
 8006e22:	e0bf      	b.n	8006fa4 <UART_SetConfig+0x570>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e2c:	d165      	bne.n	8006efa <UART_SetConfig+0x4c6>
  {
    switch (clocksource)
 8006e2e:	7efb      	ldrb	r3, [r7, #27]
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d828      	bhi.n	8006e86 <UART_SetConfig+0x452>
 8006e34:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <UART_SetConfig+0x408>)
 8006e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3a:	bf00      	nop
 8006e3c:	08006e61 	.word	0x08006e61
 8006e40:	08006e69 	.word	0x08006e69
 8006e44:	08006e71 	.word	0x08006e71
 8006e48:	08006e87 	.word	0x08006e87
 8006e4c:	08006e77 	.word	0x08006e77
 8006e50:	08006e87 	.word	0x08006e87
 8006e54:	08006e87 	.word	0x08006e87
 8006e58:	08006e87 	.word	0x08006e87
 8006e5c:	08006e7f 	.word	0x08006e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e60:	f7fe fcbc 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8006e64:	6178      	str	r0, [r7, #20]
        break;
 8006e66:	e013      	b.n	8006e90 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e68:	f7fe fcce 	bl	8005808 <HAL_RCC_GetPCLK2Freq>
 8006e6c:	6178      	str	r0, [r7, #20]
        break;
 8006e6e:	e00f      	b.n	8006e90 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e70:	4b57      	ldr	r3, [pc, #348]	; (8006fd0 <UART_SetConfig+0x59c>)
 8006e72:	617b      	str	r3, [r7, #20]
        break;
 8006e74:	e00c      	b.n	8006e90 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e76:	f7fe fc43 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 8006e7a:	6178      	str	r0, [r7, #20]
        break;
 8006e7c:	e008      	b.n	8006e90 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e82:	617b      	str	r3, [r7, #20]
        break;
 8006e84:	e004      	b.n	8006e90 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	76bb      	strb	r3, [r7, #26]
        break;
 8006e8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 8086 	beq.w	8006fa4 <UART_SetConfig+0x570>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	4a4b      	ldr	r2, [pc, #300]	; (8006fcc <UART_SetConfig+0x598>)
 8006e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eaa:	005a      	lsls	r2, r3, #1
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	441a      	add	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b0f      	cmp	r3, #15
 8006ec4:	d916      	bls.n	8006ef4 <UART_SetConfig+0x4c0>
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ecc:	d212      	bcs.n	8006ef4 <UART_SetConfig+0x4c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	f023 030f 	bic.w	r3, r3, #15
 8006ed6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	085b      	lsrs	r3, r3, #1
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	89fb      	ldrh	r3, [r7, #14]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	89fa      	ldrh	r2, [r7, #14]
 8006ef0:	60da      	str	r2, [r3, #12]
 8006ef2:	e057      	b.n	8006fa4 <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	76bb      	strb	r3, [r7, #26]
 8006ef8:	e054      	b.n	8006fa4 <UART_SetConfig+0x570>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006efa:	7efb      	ldrb	r3, [r7, #27]
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d828      	bhi.n	8006f52 <UART_SetConfig+0x51e>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <UART_SetConfig+0x4d4>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f35 	.word	0x08006f35
 8006f10:	08006f3d 	.word	0x08006f3d
 8006f14:	08006f53 	.word	0x08006f53
 8006f18:	08006f43 	.word	0x08006f43
 8006f1c:	08006f53 	.word	0x08006f53
 8006f20:	08006f53 	.word	0x08006f53
 8006f24:	08006f53 	.word	0x08006f53
 8006f28:	08006f4b 	.word	0x08006f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f2c:	f7fe fc56 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8006f30:	6178      	str	r0, [r7, #20]
        break;
 8006f32:	e013      	b.n	8006f5c <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f34:	f7fe fc68 	bl	8005808 <HAL_RCC_GetPCLK2Freq>
 8006f38:	6178      	str	r0, [r7, #20]
        break;
 8006f3a:	e00f      	b.n	8006f5c <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f3c:	4b24      	ldr	r3, [pc, #144]	; (8006fd0 <UART_SetConfig+0x59c>)
 8006f3e:	617b      	str	r3, [r7, #20]
        break;
 8006f40:	e00c      	b.n	8006f5c <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f42:	f7fe fbdd 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 8006f46:	6178      	str	r0, [r7, #20]
        break;
 8006f48:	e008      	b.n	8006f5c <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f4e:	617b      	str	r3, [r7, #20]
        break;
 8006f50:	e004      	b.n	8006f5c <UART_SetConfig+0x528>
      default:
        pclk = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	76bb      	strb	r3, [r7, #26]
        break;
 8006f5a:	bf00      	nop
    }

    if (pclk != 0U)
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d020      	beq.n	8006fa4 <UART_SetConfig+0x570>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	4a19      	ldr	r2, [pc, #100]	; (8006fcc <UART_SetConfig+0x598>)
 8006f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	085b      	lsrs	r3, r3, #1
 8006f7a:	441a      	add	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	2b0f      	cmp	r3, #15
 8006f8c:	d908      	bls.n	8006fa0 <UART_SetConfig+0x56c>
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f94:	d204      	bcs.n	8006fa0 <UART_SetConfig+0x56c>
      {
        huart->Instance->BRR = usartdiv;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	60da      	str	r2, [r3, #12]
 8006f9e:	e001      	b.n	8006fa4 <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006fc0:	7ebb      	ldrb	r3, [r7, #26]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3720      	adds	r7, #32
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	08007638 	.word	0x08007638
 8006fd0:	00f42400 	.word	0x00f42400

08006fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00a      	beq.n	8006ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00a      	beq.n	8007042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007068:	f003 0310 	and.w	r3, r3, #16
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00a      	beq.n	8007086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d01a      	beq.n	80070ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070d2:	d10a      	bne.n	80070ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	605a      	str	r2, [r3, #4]
  }
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af02      	add	r7, sp, #8
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007128:	f7fa fed0 	bl	8001ecc <HAL_GetTick>
 800712c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0308 	and.w	r3, r3, #8
 8007138:	2b08      	cmp	r3, #8
 800713a:	d10e      	bne.n	800715a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800713c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f82c 	bl	80071a8 <UART_WaitOnFlagUntilTimeout>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e022      	b.n	80071a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b04      	cmp	r3, #4
 8007166:	d10e      	bne.n	8007186 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007168:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f816 	bl	80071a8 <UART_WaitOnFlagUntilTimeout>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e00c      	b.n	80071a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	4613      	mov	r3, r2
 80071b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b8:	e062      	b.n	8007280 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c0:	d05e      	beq.n	8007280 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c2:	f7fa fe83 	bl	8001ecc <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d302      	bcc.n	80071d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d11d      	bne.n	8007214 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071e6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0201 	bic.w	r2, r2, #1
 80071f6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2220      	movs	r2, #32
 8007204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e045      	b.n	80072a0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	d02e      	beq.n	8007280 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800722c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007230:	d126      	bne.n	8007280 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800723a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800724a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0201 	bic.w	r2, r2, #1
 800725a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2220      	movs	r2, #32
 8007260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2220      	movs	r2, #32
 8007268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2220      	movs	r2, #32
 8007270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e00f      	b.n	80072a0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	69da      	ldr	r2, [r3, #28]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	4013      	ands	r3, r2
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	429a      	cmp	r2, r3
 800728e:	bf0c      	ite	eq
 8007290:	2301      	moveq	r3, #1
 8007292:	2300      	movne	r3, #0
 8007294:	b2db      	uxtb	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	429a      	cmp	r2, r3
 800729c:	d08d      	beq.n	80071ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d101      	bne.n	80072be <HAL_UARTEx_DisableFifoMode+0x16>
 80072ba:	2302      	movs	r3, #2
 80072bc:	e027      	b.n	800730e <HAL_UARTEx_DisableFifoMode+0x66>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2224      	movs	r2, #36	; 0x24
 80072ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0201 	bic.w	r2, r2, #1
 80072e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800732a:	2b01      	cmp	r3, #1
 800732c:	d101      	bne.n	8007332 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800732e:	2302      	movs	r3, #2
 8007330:	e02d      	b.n	800738e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2224      	movs	r2, #36	; 0x24
 800733e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0201 	bic.w	r2, r2, #1
 8007358:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f850 	bl	8007414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2220      	movs	r2, #32
 8007380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d101      	bne.n	80073ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80073aa:	2302      	movs	r3, #2
 80073ac:	e02d      	b.n	800740a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2224      	movs	r2, #36	; 0x24
 80073ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0201 	bic.w	r2, r2, #1
 80073d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f812 	bl	8007414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007414:	b480      	push	{r7}
 8007416:	b089      	sub	sp, #36	; 0x24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800741c:	4a2f      	ldr	r2, [pc, #188]	; (80074dc <UARTEx_SetNbDataToProcess+0xc8>)
 800741e:	f107 0314 	add.w	r3, r7, #20
 8007422:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007426:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800742a:	4a2d      	ldr	r2, [pc, #180]	; (80074e0 <UARTEx_SetNbDataToProcess+0xcc>)
 800742c:	f107 030c 	add.w	r3, r7, #12
 8007430:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007434:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800743c:	2b00      	cmp	r3, #0
 800743e:	d108      	bne.n	8007452 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007450:	e03d      	b.n	80074ce <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007452:	2308      	movs	r3, #8
 8007454:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007456:	2308      	movs	r3, #8
 8007458:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	0e5b      	lsrs	r3, r3, #25
 8007462:	b2db      	uxtb	r3, r3
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	0f5b      	lsrs	r3, r3, #29
 8007472:	b2db      	uxtb	r3, r3
 8007474:	f003 0307 	and.w	r3, r3, #7
 8007478:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800747a:	7fbb      	ldrb	r3, [r7, #30]
 800747c:	7f3a      	ldrb	r2, [r7, #28]
 800747e:	f107 0120 	add.w	r1, r7, #32
 8007482:	440a      	add	r2, r1
 8007484:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007488:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800748c:	7f3a      	ldrb	r2, [r7, #28]
 800748e:	f107 0120 	add.w	r1, r7, #32
 8007492:	440a      	add	r2, r1
 8007494:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007498:	fb93 f3f2 	sdiv	r3, r3, r2
 800749c:	b29a      	uxth	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074a4:	7ffb      	ldrb	r3, [r7, #31]
 80074a6:	7f7a      	ldrb	r2, [r7, #29]
 80074a8:	f107 0120 	add.w	r1, r7, #32
 80074ac:	440a      	add	r2, r1
 80074ae:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80074b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074b6:	7f7a      	ldrb	r2, [r7, #29]
 80074b8:	f107 0120 	add.w	r1, r7, #32
 80074bc:	440a      	add	r2, r1
 80074be:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80074ce:	bf00      	nop
 80074d0:	3724      	adds	r7, #36	; 0x24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	08007610 	.word	0x08007610
 80074e0:	08007618 	.word	0x08007618

080074e4 <__libc_init_array>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	4d0d      	ldr	r5, [pc, #52]	; (800751c <__libc_init_array+0x38>)
 80074e8:	4c0d      	ldr	r4, [pc, #52]	; (8007520 <__libc_init_array+0x3c>)
 80074ea:	1b64      	subs	r4, r4, r5
 80074ec:	10a4      	asrs	r4, r4, #2
 80074ee:	2600      	movs	r6, #0
 80074f0:	42a6      	cmp	r6, r4
 80074f2:	d109      	bne.n	8007508 <__libc_init_array+0x24>
 80074f4:	4d0b      	ldr	r5, [pc, #44]	; (8007524 <__libc_init_array+0x40>)
 80074f6:	4c0c      	ldr	r4, [pc, #48]	; (8007528 <__libc_init_array+0x44>)
 80074f8:	f000 f87c 	bl	80075f4 <_init>
 80074fc:	1b64      	subs	r4, r4, r5
 80074fe:	10a4      	asrs	r4, r4, #2
 8007500:	2600      	movs	r6, #0
 8007502:	42a6      	cmp	r6, r4
 8007504:	d105      	bne.n	8007512 <__libc_init_array+0x2e>
 8007506:	bd70      	pop	{r4, r5, r6, pc}
 8007508:	f855 3b04 	ldr.w	r3, [r5], #4
 800750c:	4798      	blx	r3
 800750e:	3601      	adds	r6, #1
 8007510:	e7ee      	b.n	80074f0 <__libc_init_array+0xc>
 8007512:	f855 3b04 	ldr.w	r3, [r5], #4
 8007516:	4798      	blx	r3
 8007518:	3601      	adds	r6, #1
 800751a:	e7f2      	b.n	8007502 <__libc_init_array+0x1e>
 800751c:	08007680 	.word	0x08007680
 8007520:	08007680 	.word	0x08007680
 8007524:	08007680 	.word	0x08007680
 8007528:	08007684 	.word	0x08007684

0800752c <__itoa>:
 800752c:	1e93      	subs	r3, r2, #2
 800752e:	2b22      	cmp	r3, #34	; 0x22
 8007530:	b510      	push	{r4, lr}
 8007532:	460c      	mov	r4, r1
 8007534:	d904      	bls.n	8007540 <__itoa+0x14>
 8007536:	2300      	movs	r3, #0
 8007538:	700b      	strb	r3, [r1, #0]
 800753a:	461c      	mov	r4, r3
 800753c:	4620      	mov	r0, r4
 800753e:	bd10      	pop	{r4, pc}
 8007540:	2a0a      	cmp	r2, #10
 8007542:	d109      	bne.n	8007558 <__itoa+0x2c>
 8007544:	2800      	cmp	r0, #0
 8007546:	da07      	bge.n	8007558 <__itoa+0x2c>
 8007548:	232d      	movs	r3, #45	; 0x2d
 800754a:	700b      	strb	r3, [r1, #0]
 800754c:	4240      	negs	r0, r0
 800754e:	2101      	movs	r1, #1
 8007550:	4421      	add	r1, r4
 8007552:	f000 f80d 	bl	8007570 <__utoa>
 8007556:	e7f1      	b.n	800753c <__itoa+0x10>
 8007558:	2100      	movs	r1, #0
 800755a:	e7f9      	b.n	8007550 <__itoa+0x24>

0800755c <itoa>:
 800755c:	f7ff bfe6 	b.w	800752c <__itoa>

08007560 <memset>:
 8007560:	4402      	add	r2, r0
 8007562:	4603      	mov	r3, r0
 8007564:	4293      	cmp	r3, r2
 8007566:	d100      	bne.n	800756a <memset+0xa>
 8007568:	4770      	bx	lr
 800756a:	f803 1b01 	strb.w	r1, [r3], #1
 800756e:	e7f9      	b.n	8007564 <memset+0x4>

08007570 <__utoa>:
 8007570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007572:	4c1f      	ldr	r4, [pc, #124]	; (80075f0 <__utoa+0x80>)
 8007574:	b08b      	sub	sp, #44	; 0x2c
 8007576:	4605      	mov	r5, r0
 8007578:	460b      	mov	r3, r1
 800757a:	466e      	mov	r6, sp
 800757c:	f104 0c20 	add.w	ip, r4, #32
 8007580:	6820      	ldr	r0, [r4, #0]
 8007582:	6861      	ldr	r1, [r4, #4]
 8007584:	4637      	mov	r7, r6
 8007586:	c703      	stmia	r7!, {r0, r1}
 8007588:	3408      	adds	r4, #8
 800758a:	4564      	cmp	r4, ip
 800758c:	463e      	mov	r6, r7
 800758e:	d1f7      	bne.n	8007580 <__utoa+0x10>
 8007590:	7921      	ldrb	r1, [r4, #4]
 8007592:	7139      	strb	r1, [r7, #4]
 8007594:	1e91      	subs	r1, r2, #2
 8007596:	6820      	ldr	r0, [r4, #0]
 8007598:	6038      	str	r0, [r7, #0]
 800759a:	2922      	cmp	r1, #34	; 0x22
 800759c:	f04f 0100 	mov.w	r1, #0
 80075a0:	d904      	bls.n	80075ac <__utoa+0x3c>
 80075a2:	7019      	strb	r1, [r3, #0]
 80075a4:	460b      	mov	r3, r1
 80075a6:	4618      	mov	r0, r3
 80075a8:	b00b      	add	sp, #44	; 0x2c
 80075aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ac:	1e58      	subs	r0, r3, #1
 80075ae:	4684      	mov	ip, r0
 80075b0:	fbb5 f7f2 	udiv	r7, r5, r2
 80075b4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80075b8:	fb02 5617 	mls	r6, r2, r7, r5
 80075bc:	4476      	add	r6, lr
 80075be:	460c      	mov	r4, r1
 80075c0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80075c4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80075c8:	462e      	mov	r6, r5
 80075ca:	42b2      	cmp	r2, r6
 80075cc:	f101 0101 	add.w	r1, r1, #1
 80075d0:	463d      	mov	r5, r7
 80075d2:	d9ed      	bls.n	80075b0 <__utoa+0x40>
 80075d4:	2200      	movs	r2, #0
 80075d6:	545a      	strb	r2, [r3, r1]
 80075d8:	1919      	adds	r1, r3, r4
 80075da:	1aa5      	subs	r5, r4, r2
 80075dc:	42aa      	cmp	r2, r5
 80075de:	dae2      	bge.n	80075a6 <__utoa+0x36>
 80075e0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80075e4:	780e      	ldrb	r6, [r1, #0]
 80075e6:	7006      	strb	r6, [r0, #0]
 80075e8:	3201      	adds	r2, #1
 80075ea:	f801 5901 	strb.w	r5, [r1], #-1
 80075ee:	e7f4      	b.n	80075da <__utoa+0x6a>
 80075f0:	08007650 	.word	0x08007650

080075f4 <_init>:
 80075f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f6:	bf00      	nop
 80075f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fa:	bc08      	pop	{r3}
 80075fc:	469e      	mov	lr, r3
 80075fe:	4770      	bx	lr

08007600 <_fini>:
 8007600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007602:	bf00      	nop
 8007604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007606:	bc08      	pop	{r3}
 8007608:	469e      	mov	lr, r3
 800760a:	4770      	bx	lr
