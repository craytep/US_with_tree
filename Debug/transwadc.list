
transwadc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf94  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800c16c  0800c16c  0001c16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c234  0800c234  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c234  0800c234  0001c234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c23c  0800c23c  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c23c  0800c23c  0001c23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c240  0800c240  0001c240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800c244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f4f0  200001a4  0800c3e8  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001f694  0800c3e8  0002f694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023350  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004764  00000000  00000000  00043524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00047c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001570  00000000  00000000  000493e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a848  00000000  00000000  0004a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b93b  00000000  00000000  00075198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001045a6  00000000  00000000  00090ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00195079  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b4  00000000  00000000  001950cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a4 	.word	0x200001a4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c154 	.word	0x0800c154

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a8 	.word	0x200001a8
 8000214:	0800c154 	.word	0x0800c154

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__gedf2>:
 80005a0:	f04f 3cff 	mov.w	ip, #4294967295
 80005a4:	e006      	b.n	80005b4 <__cmpdf2+0x4>
 80005a6:	bf00      	nop

080005a8 <__ledf2>:
 80005a8:	f04f 0c01 	mov.w	ip, #1
 80005ac:	e002      	b.n	80005b4 <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__cmpdf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005ca:	d01b      	beq.n	8000604 <__cmpdf2+0x54>
 80005cc:	b001      	add	sp, #4
 80005ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005d2:	bf0c      	ite	eq
 80005d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005d8:	ea91 0f03 	teqne	r1, r3
 80005dc:	bf02      	ittt	eq
 80005de:	ea90 0f02 	teqeq	r0, r2
 80005e2:	2000      	moveq	r0, #0
 80005e4:	4770      	bxeq	lr
 80005e6:	f110 0f00 	cmn.w	r0, #0
 80005ea:	ea91 0f03 	teq	r1, r3
 80005ee:	bf58      	it	pl
 80005f0:	4299      	cmppl	r1, r3
 80005f2:	bf08      	it	eq
 80005f4:	4290      	cmpeq	r0, r2
 80005f6:	bf2c      	ite	cs
 80005f8:	17d8      	asrcs	r0, r3, #31
 80005fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005fe:	f040 0001 	orr.w	r0, r0, #1
 8000602:	4770      	bx	lr
 8000604:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800060c:	d102      	bne.n	8000614 <__cmpdf2+0x64>
 800060e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000612:	d107      	bne.n	8000624 <__cmpdf2+0x74>
 8000614:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000618:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800061c:	d1d6      	bne.n	80005cc <__cmpdf2+0x1c>
 800061e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000622:	d0d3      	beq.n	80005cc <__cmpdf2+0x1c>
 8000624:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <__aeabi_cdrcmple>:
 800062c:	4684      	mov	ip, r0
 800062e:	4610      	mov	r0, r2
 8000630:	4662      	mov	r2, ip
 8000632:	468c      	mov	ip, r1
 8000634:	4619      	mov	r1, r3
 8000636:	4663      	mov	r3, ip
 8000638:	e000      	b.n	800063c <__aeabi_cdcmpeq>
 800063a:	bf00      	nop

0800063c <__aeabi_cdcmpeq>:
 800063c:	b501      	push	{r0, lr}
 800063e:	f7ff ffb7 	bl	80005b0 <__cmpdf2>
 8000642:	2800      	cmp	r0, #0
 8000644:	bf48      	it	mi
 8000646:	f110 0f00 	cmnmi.w	r0, #0
 800064a:	bd01      	pop	{r0, pc}

0800064c <__aeabi_dcmpeq>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff fff4 	bl	800063c <__aeabi_cdcmpeq>
 8000654:	bf0c      	ite	eq
 8000656:	2001      	moveq	r0, #1
 8000658:	2000      	movne	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_dcmplt>:
 8000660:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000664:	f7ff ffea 	bl	800063c <__aeabi_cdcmpeq>
 8000668:	bf34      	ite	cc
 800066a:	2001      	movcc	r0, #1
 800066c:	2000      	movcs	r0, #0
 800066e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000672:	bf00      	nop

08000674 <__aeabi_dcmple>:
 8000674:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000678:	f7ff ffe0 	bl	800063c <__aeabi_cdcmpeq>
 800067c:	bf94      	ite	ls
 800067e:	2001      	movls	r0, #1
 8000680:	2000      	movhi	r0, #0
 8000682:	f85d fb08 	ldr.w	pc, [sp], #8
 8000686:	bf00      	nop

08000688 <__aeabi_dcmpge>:
 8000688:	f84d ed08 	str.w	lr, [sp, #-8]!
 800068c:	f7ff ffce 	bl	800062c <__aeabi_cdrcmple>
 8000690:	bf94      	ite	ls
 8000692:	2001      	movls	r0, #1
 8000694:	2000      	movhi	r0, #0
 8000696:	f85d fb08 	ldr.w	pc, [sp], #8
 800069a:	bf00      	nop

0800069c <__aeabi_dcmpgt>:
 800069c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a0:	f7ff ffc4 	bl	800062c <__aeabi_cdrcmple>
 80006a4:	bf34      	ite	cc
 80006a6:	2001      	movcc	r0, #1
 80006a8:	2000      	movcs	r0, #0
 80006aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ae:	bf00      	nop

080006b0 <__aeabi_uldivmod>:
 80006b0:	b953      	cbnz	r3, 80006c8 <__aeabi_uldivmod+0x18>
 80006b2:	b94a      	cbnz	r2, 80006c8 <__aeabi_uldivmod+0x18>
 80006b4:	2900      	cmp	r1, #0
 80006b6:	bf08      	it	eq
 80006b8:	2800      	cmpeq	r0, #0
 80006ba:	bf1c      	itt	ne
 80006bc:	f04f 31ff 	movne.w	r1, #4294967295
 80006c0:	f04f 30ff 	movne.w	r0, #4294967295
 80006c4:	f000 b96e 	b.w	80009a4 <__aeabi_idiv0>
 80006c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80006cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006d0:	f000 f806 	bl	80006e0 <__udivmoddi4>
 80006d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006dc:	b004      	add	sp, #16
 80006de:	4770      	bx	lr

080006e0 <__udivmoddi4>:
 80006e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006e4:	9d08      	ldr	r5, [sp, #32]
 80006e6:	4604      	mov	r4, r0
 80006e8:	468c      	mov	ip, r1
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	f040 8083 	bne.w	80007f6 <__udivmoddi4+0x116>
 80006f0:	428a      	cmp	r2, r1
 80006f2:	4617      	mov	r7, r2
 80006f4:	d947      	bls.n	8000786 <__udivmoddi4+0xa6>
 80006f6:	fab2 f282 	clz	r2, r2
 80006fa:	b142      	cbz	r2, 800070e <__udivmoddi4+0x2e>
 80006fc:	f1c2 0020 	rsb	r0, r2, #32
 8000700:	fa24 f000 	lsr.w	r0, r4, r0
 8000704:	4091      	lsls	r1, r2
 8000706:	4097      	lsls	r7, r2
 8000708:	ea40 0c01 	orr.w	ip, r0, r1
 800070c:	4094      	lsls	r4, r2
 800070e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000712:	0c23      	lsrs	r3, r4, #16
 8000714:	fbbc f6f8 	udiv	r6, ip, r8
 8000718:	fa1f fe87 	uxth.w	lr, r7
 800071c:	fb08 c116 	mls	r1, r8, r6, ip
 8000720:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000724:	fb06 f10e 	mul.w	r1, r6, lr
 8000728:	4299      	cmp	r1, r3
 800072a:	d909      	bls.n	8000740 <__udivmoddi4+0x60>
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000732:	f080 8119 	bcs.w	8000968 <__udivmoddi4+0x288>
 8000736:	4299      	cmp	r1, r3
 8000738:	f240 8116 	bls.w	8000968 <__udivmoddi4+0x288>
 800073c:	3e02      	subs	r6, #2
 800073e:	443b      	add	r3, r7
 8000740:	1a5b      	subs	r3, r3, r1
 8000742:	b2a4      	uxth	r4, r4
 8000744:	fbb3 f0f8 	udiv	r0, r3, r8
 8000748:	fb08 3310 	mls	r3, r8, r0, r3
 800074c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000750:	fb00 fe0e 	mul.w	lr, r0, lr
 8000754:	45a6      	cmp	lr, r4
 8000756:	d909      	bls.n	800076c <__udivmoddi4+0x8c>
 8000758:	193c      	adds	r4, r7, r4
 800075a:	f100 33ff 	add.w	r3, r0, #4294967295
 800075e:	f080 8105 	bcs.w	800096c <__udivmoddi4+0x28c>
 8000762:	45a6      	cmp	lr, r4
 8000764:	f240 8102 	bls.w	800096c <__udivmoddi4+0x28c>
 8000768:	3802      	subs	r0, #2
 800076a:	443c      	add	r4, r7
 800076c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000770:	eba4 040e 	sub.w	r4, r4, lr
 8000774:	2600      	movs	r6, #0
 8000776:	b11d      	cbz	r5, 8000780 <__udivmoddi4+0xa0>
 8000778:	40d4      	lsrs	r4, r2
 800077a:	2300      	movs	r3, #0
 800077c:	e9c5 4300 	strd	r4, r3, [r5]
 8000780:	4631      	mov	r1, r6
 8000782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000786:	b902      	cbnz	r2, 800078a <__udivmoddi4+0xaa>
 8000788:	deff      	udf	#255	; 0xff
 800078a:	fab2 f282 	clz	r2, r2
 800078e:	2a00      	cmp	r2, #0
 8000790:	d150      	bne.n	8000834 <__udivmoddi4+0x154>
 8000792:	1bcb      	subs	r3, r1, r7
 8000794:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000798:	fa1f f887 	uxth.w	r8, r7
 800079c:	2601      	movs	r6, #1
 800079e:	fbb3 fcfe 	udiv	ip, r3, lr
 80007a2:	0c21      	lsrs	r1, r4, #16
 80007a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80007a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007ac:	fb08 f30c 	mul.w	r3, r8, ip
 80007b0:	428b      	cmp	r3, r1
 80007b2:	d907      	bls.n	80007c4 <__udivmoddi4+0xe4>
 80007b4:	1879      	adds	r1, r7, r1
 80007b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0xe2>
 80007bc:	428b      	cmp	r3, r1
 80007be:	f200 80e9 	bhi.w	8000994 <__udivmoddi4+0x2b4>
 80007c2:	4684      	mov	ip, r0
 80007c4:	1ac9      	subs	r1, r1, r3
 80007c6:	b2a3      	uxth	r3, r4
 80007c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80007cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80007d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007d4:	fb08 f800 	mul.w	r8, r8, r0
 80007d8:	45a0      	cmp	r8, r4
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0x10c>
 80007dc:	193c      	adds	r4, r7, r4
 80007de:	f100 33ff 	add.w	r3, r0, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0x10a>
 80007e4:	45a0      	cmp	r8, r4
 80007e6:	f200 80d9 	bhi.w	800099c <__udivmoddi4+0x2bc>
 80007ea:	4618      	mov	r0, r3
 80007ec:	eba4 0408 	sub.w	r4, r4, r8
 80007f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007f4:	e7bf      	b.n	8000776 <__udivmoddi4+0x96>
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d909      	bls.n	800080e <__udivmoddi4+0x12e>
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	f000 80b1 	beq.w	8000962 <__udivmoddi4+0x282>
 8000800:	2600      	movs	r6, #0
 8000802:	e9c5 0100 	strd	r0, r1, [r5]
 8000806:	4630      	mov	r0, r6
 8000808:	4631      	mov	r1, r6
 800080a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080e:	fab3 f683 	clz	r6, r3
 8000812:	2e00      	cmp	r6, #0
 8000814:	d14a      	bne.n	80008ac <__udivmoddi4+0x1cc>
 8000816:	428b      	cmp	r3, r1
 8000818:	d302      	bcc.n	8000820 <__udivmoddi4+0x140>
 800081a:	4282      	cmp	r2, r0
 800081c:	f200 80b8 	bhi.w	8000990 <__udivmoddi4+0x2b0>
 8000820:	1a84      	subs	r4, r0, r2
 8000822:	eb61 0103 	sbc.w	r1, r1, r3
 8000826:	2001      	movs	r0, #1
 8000828:	468c      	mov	ip, r1
 800082a:	2d00      	cmp	r5, #0
 800082c:	d0a8      	beq.n	8000780 <__udivmoddi4+0xa0>
 800082e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000832:	e7a5      	b.n	8000780 <__udivmoddi4+0xa0>
 8000834:	f1c2 0320 	rsb	r3, r2, #32
 8000838:	fa20 f603 	lsr.w	r6, r0, r3
 800083c:	4097      	lsls	r7, r2
 800083e:	fa01 f002 	lsl.w	r0, r1, r2
 8000842:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000846:	40d9      	lsrs	r1, r3
 8000848:	4330      	orrs	r0, r6
 800084a:	0c03      	lsrs	r3, r0, #16
 800084c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000850:	fa1f f887 	uxth.w	r8, r7
 8000854:	fb0e 1116 	mls	r1, lr, r6, r1
 8000858:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800085c:	fb06 f108 	mul.w	r1, r6, r8
 8000860:	4299      	cmp	r1, r3
 8000862:	fa04 f402 	lsl.w	r4, r4, r2
 8000866:	d909      	bls.n	800087c <__udivmoddi4+0x19c>
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	f106 3cff 	add.w	ip, r6, #4294967295
 800086e:	f080 808d 	bcs.w	800098c <__udivmoddi4+0x2ac>
 8000872:	4299      	cmp	r1, r3
 8000874:	f240 808a 	bls.w	800098c <__udivmoddi4+0x2ac>
 8000878:	3e02      	subs	r6, #2
 800087a:	443b      	add	r3, r7
 800087c:	1a5b      	subs	r3, r3, r1
 800087e:	b281      	uxth	r1, r0
 8000880:	fbb3 f0fe 	udiv	r0, r3, lr
 8000884:	fb0e 3310 	mls	r3, lr, r0, r3
 8000888:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800088c:	fb00 f308 	mul.w	r3, r0, r8
 8000890:	428b      	cmp	r3, r1
 8000892:	d907      	bls.n	80008a4 <__udivmoddi4+0x1c4>
 8000894:	1879      	adds	r1, r7, r1
 8000896:	f100 3cff 	add.w	ip, r0, #4294967295
 800089a:	d273      	bcs.n	8000984 <__udivmoddi4+0x2a4>
 800089c:	428b      	cmp	r3, r1
 800089e:	d971      	bls.n	8000984 <__udivmoddi4+0x2a4>
 80008a0:	3802      	subs	r0, #2
 80008a2:	4439      	add	r1, r7
 80008a4:	1acb      	subs	r3, r1, r3
 80008a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008aa:	e778      	b.n	800079e <__udivmoddi4+0xbe>
 80008ac:	f1c6 0c20 	rsb	ip, r6, #32
 80008b0:	fa03 f406 	lsl.w	r4, r3, r6
 80008b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80008b8:	431c      	orrs	r4, r3
 80008ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80008be:	fa01 f306 	lsl.w	r3, r1, r6
 80008c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80008ca:	431f      	orrs	r7, r3
 80008cc:	0c3b      	lsrs	r3, r7, #16
 80008ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80008d2:	fa1f f884 	uxth.w	r8, r4
 80008d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80008da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80008de:	fb09 fa08 	mul.w	sl, r9, r8
 80008e2:	458a      	cmp	sl, r1
 80008e4:	fa02 f206 	lsl.w	r2, r2, r6
 80008e8:	fa00 f306 	lsl.w	r3, r0, r6
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x220>
 80008ee:	1861      	adds	r1, r4, r1
 80008f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80008f4:	d248      	bcs.n	8000988 <__udivmoddi4+0x2a8>
 80008f6:	458a      	cmp	sl, r1
 80008f8:	d946      	bls.n	8000988 <__udivmoddi4+0x2a8>
 80008fa:	f1a9 0902 	sub.w	r9, r9, #2
 80008fe:	4421      	add	r1, r4
 8000900:	eba1 010a 	sub.w	r1, r1, sl
 8000904:	b2bf      	uxth	r7, r7
 8000906:	fbb1 f0fe 	udiv	r0, r1, lr
 800090a:	fb0e 1110 	mls	r1, lr, r0, r1
 800090e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000912:	fb00 f808 	mul.w	r8, r0, r8
 8000916:	45b8      	cmp	r8, r7
 8000918:	d907      	bls.n	800092a <__udivmoddi4+0x24a>
 800091a:	19e7      	adds	r7, r4, r7
 800091c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000920:	d22e      	bcs.n	8000980 <__udivmoddi4+0x2a0>
 8000922:	45b8      	cmp	r8, r7
 8000924:	d92c      	bls.n	8000980 <__udivmoddi4+0x2a0>
 8000926:	3802      	subs	r0, #2
 8000928:	4427      	add	r7, r4
 800092a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800092e:	eba7 0708 	sub.w	r7, r7, r8
 8000932:	fba0 8902 	umull	r8, r9, r0, r2
 8000936:	454f      	cmp	r7, r9
 8000938:	46c6      	mov	lr, r8
 800093a:	4649      	mov	r1, r9
 800093c:	d31a      	bcc.n	8000974 <__udivmoddi4+0x294>
 800093e:	d017      	beq.n	8000970 <__udivmoddi4+0x290>
 8000940:	b15d      	cbz	r5, 800095a <__udivmoddi4+0x27a>
 8000942:	ebb3 020e 	subs.w	r2, r3, lr
 8000946:	eb67 0701 	sbc.w	r7, r7, r1
 800094a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800094e:	40f2      	lsrs	r2, r6
 8000950:	ea4c 0202 	orr.w	r2, ip, r2
 8000954:	40f7      	lsrs	r7, r6
 8000956:	e9c5 2700 	strd	r2, r7, [r5]
 800095a:	2600      	movs	r6, #0
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	462e      	mov	r6, r5
 8000964:	4628      	mov	r0, r5
 8000966:	e70b      	b.n	8000780 <__udivmoddi4+0xa0>
 8000968:	4606      	mov	r6, r0
 800096a:	e6e9      	b.n	8000740 <__udivmoddi4+0x60>
 800096c:	4618      	mov	r0, r3
 800096e:	e6fd      	b.n	800076c <__udivmoddi4+0x8c>
 8000970:	4543      	cmp	r3, r8
 8000972:	d2e5      	bcs.n	8000940 <__udivmoddi4+0x260>
 8000974:	ebb8 0e02 	subs.w	lr, r8, r2
 8000978:	eb69 0104 	sbc.w	r1, r9, r4
 800097c:	3801      	subs	r0, #1
 800097e:	e7df      	b.n	8000940 <__udivmoddi4+0x260>
 8000980:	4608      	mov	r0, r1
 8000982:	e7d2      	b.n	800092a <__udivmoddi4+0x24a>
 8000984:	4660      	mov	r0, ip
 8000986:	e78d      	b.n	80008a4 <__udivmoddi4+0x1c4>
 8000988:	4681      	mov	r9, r0
 800098a:	e7b9      	b.n	8000900 <__udivmoddi4+0x220>
 800098c:	4666      	mov	r6, ip
 800098e:	e775      	b.n	800087c <__udivmoddi4+0x19c>
 8000990:	4630      	mov	r0, r6
 8000992:	e74a      	b.n	800082a <__udivmoddi4+0x14a>
 8000994:	f1ac 0c02 	sub.w	ip, ip, #2
 8000998:	4439      	add	r1, r7
 800099a:	e713      	b.n	80007c4 <__udivmoddi4+0xe4>
 800099c:	3802      	subs	r0, #2
 800099e:	443c      	add	r4, r7
 80009a0:	e724      	b.n	80007ec <__udivmoddi4+0x10c>
 80009a2:	bf00      	nop

080009a4 <__aeabi_idiv0>:
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b5b0      	push	{r4, r5, r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ae:	f001 f888 	bl	8001ac2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b2:	f000 f8ed 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f000 fc4d 	bl	8001254 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ba:	f000 fbfd 	bl	80011b8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80009be:	f000 fa91 	bl	8000ee4 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80009c2:	f000 fb25 	bl	8001010 <MX_USART3_UART_Init>
  MX_OPAMP3_Init();
 80009c6:	f000 fb6f 	bl	80010a8 <MX_OPAMP3_Init>
  MX_ADC2_Init();
 80009ca:	f000 f959 	bl	8000c80 <MX_ADC2_Init>
  MX_OPAMP6_Init();
 80009ce:	f000 fbc7 	bl	8001160 <MX_OPAMP6_Init>
  MX_USB_Device_Init();
 80009d2:	f00a fe5f 	bl	800b694 <MX_USB_Device_Init>
  MX_ADC4_Init();
 80009d6:	f000 f9b9 	bl	8000d4c <MX_ADC4_Init>
  MX_USART1_UART_Init();
 80009da:	f000 facd 	bl	8000f78 <MX_USART1_UART_Init>
  MX_ADC5_Init();
 80009de:	f000 fa1b 	bl	8000e18 <MX_ADC5_Init>
  MX_OPAMP5_Init();
 80009e2:	f000 fb8f 	bl	8001104 <MX_OPAMP5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 80009e6:	217f      	movs	r1, #127	; 0x7f
 80009e8:	4859      	ldr	r0, [pc, #356]	; (8000b50 <main+0x1a8>)
 80009ea:	f002 ff21 	bl	8003830 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80009ee:	217f      	movs	r1, #127	; 0x7f
 80009f0:	4858      	ldr	r0, [pc, #352]	; (8000b54 <main+0x1ac>)
 80009f2:	f002 ff1d 	bl	8003830 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 80009f6:	217f      	movs	r1, #127	; 0x7f
 80009f8:	4857      	ldr	r0, [pc, #348]	; (8000b58 <main+0x1b0>)
 80009fa:	f002 ff19 	bl	8003830 <HAL_ADCEx_Calibration_Start>
  HAL_OPAMP_Start(&hopamp6);
 80009fe:	4857      	ldr	r0, [pc, #348]	; (8000b5c <main+0x1b4>)
 8000a00:	f003 ff44 	bl	800488c <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8000a04:	4856      	ldr	r0, [pc, #344]	; (8000b60 <main+0x1b8>)
 8000a06:	f003 ff41 	bl	800488c <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp5);
 8000a0a:	4856      	ldr	r0, [pc, #344]	; (8000b64 <main+0x1bc>)
 8000a0c:	f003 ff3e 	bl	800488c <HAL_OPAMP_Start>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*) "salam\r\n", strlen("salam\r\n"),1);
 8000a10:	2301      	movs	r3, #1
 8000a12:	2207      	movs	r2, #7
 8000a14:	4954      	ldr	r1, [pc, #336]	; (8000b68 <main+0x1c0>)
 8000a16:	4855      	ldr	r0, [pc, #340]	; (8000b6c <main+0x1c4>)
 8000a18:	f006 fbc4 	bl	80071a4 <HAL_UART_Transmit>
  while (1)
  {

	  flag1 =0;
 8000a1c:	4b54      	ldr	r3, [pc, #336]	; (8000b70 <main+0x1c8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	801a      	strh	r2, [r3, #0]
	  flag2 =0;
 8000a22:	4b54      	ldr	r3, [pc, #336]	; (8000b74 <main+0x1cc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	801a      	strh	r2, [r3, #0]
	  flag3 =0;
 8000a28:	4b53      	ldr	r3, [pc, #332]	; (8000b78 <main+0x1d0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	801a      	strh	r2, [r3, #0]
	  //memset(adcm1,0,20000);
	  //memset(adcm2,0,20000);
	  memset(adcm3,0,60000);
 8000a2e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000a32:	2100      	movs	r1, #0
 8000a34:	4851      	ldr	r0, [pc, #324]	; (8000b7c <main+0x1d4>)
 8000a36:	f00b fb3b 	bl	800c0b0 <memset>
	  print5("0000000gen");
 8000a3a:	4851      	ldr	r0, [pc, #324]	; (8000b80 <main+0x1d8>)
 8000a3c:	f000 fc7a 	bl	8001334 <print5>
      HAL_Delay(32);
 8000a40:	2020      	movs	r0, #32
 8000a42:	f001 f8af 	bl	8001ba4 <HAL_Delay>
	 //HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adcm1, 20000);
	 // HAL_ADCEx_MultiModeStart_DMA(&hadc2||&hadc1, (uint32_t*)adcmh12, 46000);
	 // HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adcm2, 20000);
	  HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adcm3, 60000);
 8000a46:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000a4a:	494c      	ldr	r1, [pc, #304]	; (8000b7c <main+0x1d4>)
 8000a4c:	4842      	ldr	r0, [pc, #264]	; (8000b58 <main+0x1b0>)
 8000a4e:	f001 fd4d 	bl	80024ec <HAL_ADC_Start_DMA>
	  while(flag1==1 && flag2==1 && flag3==1);
 8000a52:	bf00      	nop
 8000a54:	4b46      	ldr	r3, [pc, #280]	; (8000b70 <main+0x1c8>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d109      	bne.n	8000a72 <main+0xca>
 8000a5e:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <main+0x1cc>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d104      	bne.n	8000a72 <main+0xca>
 8000a68:	4b43      	ldr	r3, [pc, #268]	; (8000b78 <main+0x1d0>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d0f0      	beq.n	8000a54 <main+0xac>


	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a72:	2120      	movs	r1, #32
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f003 fdfa 	bl	8004670 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a80:	f001 f890 	bl	8001ba4 <HAL_Delay>
//
//	  itoa(var, snum1, 10);
//	  strcat(snum, snum1);
//	  strcat(snum," ");

	  for (var = 1000; var < 60000; ++var) {
 8000a84:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <main+0x1dc>)
 8000a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	e052      	b.n	8000b34 <main+0x18c>

		  if(adcm3[var]>10){
 8000a8e:	4b3d      	ldr	r3, [pc, #244]	; (8000b84 <main+0x1dc>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a3a      	ldr	r2, [pc, #232]	; (8000b7c <main+0x1d4>)
 8000a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	2b0a      	cmp	r3, #10
 8000a9c:	d945      	bls.n	8000b2a <main+0x182>
////				  				  strcat(snum1,"\r\n");
////
////
////				  				  HAL_UART_Transmit(&hlpuart1, (uint8_t*) snum1, strlen(snum1),1);
//			  }
			  for (ii = var-1000; ii < var + 2e4; ++ii) {
 8000a9e:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <main+0x1dc>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	e022      	b.n	8000af0 <main+0x148>


				  itoa(adcm3[ii], snum1, 10);
 8000aaa:	4a34      	ldr	r2, [pc, #208]	; (8000b7c <main+0x1d4>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	220a      	movs	r2, #10
 8000ab6:	4934      	ldr	r1, [pc, #208]	; (8000b88 <main+0x1e0>)
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f00b faf7 	bl	800c0ac <itoa>
				  strcat(snum1,"\r\n");
 8000abe:	4832      	ldr	r0, [pc, #200]	; (8000b88 <main+0x1e0>)
 8000ac0:	f7ff fbaa 	bl	8000218 <strlen>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <main+0x1e0>)
 8000aca:	4413      	add	r3, r2
 8000acc:	4a2f      	ldr	r2, [pc, #188]	; (8000b8c <main+0x1e4>)
 8000ace:	8811      	ldrh	r1, [r2, #0]
 8000ad0:	7892      	ldrb	r2, [r2, #2]
 8000ad2:	8019      	strh	r1, [r3, #0]
 8000ad4:	709a      	strb	r2, [r3, #2]
				  HAL_UART_Transmit(&hlpuart1, (uint8_t*) snum1, strlen(snum1),1);
 8000ad6:	482c      	ldr	r0, [pc, #176]	; (8000b88 <main+0x1e0>)
 8000ad8:	f7ff fb9e 	bl	8000218 <strlen>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	4929      	ldr	r1, [pc, #164]	; (8000b88 <main+0x1e0>)
 8000ae4:	4821      	ldr	r0, [pc, #132]	; (8000b6c <main+0x1c4>)
 8000ae6:	f006 fb5d 	bl	80071a4 <HAL_UART_Transmit>
			  for (ii = var-1000; ii < var + 2e4; ++ii) {
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3301      	adds	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fceb 	bl	80004cc <__aeabi_i2d>
 8000af6:	4604      	mov	r4, r0
 8000af8:	460d      	mov	r5, r1
 8000afa:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <main+0x1dc>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fce4 	bl	80004cc <__aeabi_i2d>
 8000b04:	a310      	add	r3, pc, #64	; (adr r3, 8000b48 <main+0x1a0>)
 8000b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0a:	f7ff fb93 	bl	8000234 <__adddf3>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	460b      	mov	r3, r1
 8000b12:	4620      	mov	r0, r4
 8000b14:	4629      	mov	r1, r5
 8000b16:	f7ff fda3 	bl	8000660 <__aeabi_dcmplt>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1c4      	bne.n	8000aaa <main+0x102>

//			  itoa(var, snum1, 10);
//			  strcat(snum1,"\r\n");
//			  HAL_UART_Transmit(&hlpuart1, (uint8_t*) snum1, strlen(snum1),1);
		  //var = ii;
			  var = 60000;
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <main+0x1dc>)
 8000b22:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000b26:	601a      	str	r2, [r3, #0]
			  break;
 8000b28:	e00a      	b.n	8000b40 <main+0x198>
	  for (var = 1000; var < 60000; ++var) {
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <main+0x1dc>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <main+0x1dc>)
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <main+0x1dc>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	dda6      	ble.n	8000a8e <main+0xe6>
	  flag1 =0;
 8000b40:	e76c      	b.n	8000a1c <main+0x74>
 8000b42:	bf00      	nop
 8000b44:	f3af 8000 	nop.w
 8000b48:	00000000 	.word	0x00000000
 8000b4c:	40d38800 	.word	0x40d38800
 8000b50:	2001df00 	.word	0x2001df00
 8000b54:	2001d99c 	.word	0x2001d99c
 8000b58:	2001da08 	.word	0x2001da08
 8000b5c:	2001dd88 	.word	0x2001dd88
 8000b60:	2001db08 	.word	0x2001db08
 8000b64:	2001de88 	.word	0x2001de88
 8000b68:	0800c16c 	.word	0x0800c16c
 8000b6c:	2001dc0c 	.word	0x2001dc0c
 8000b70:	2001d680 	.word	0x2001d680
 8000b74:	2001d682 	.word	0x2001d682
 8000b78:	2001d684 	.word	0x2001d684
 8000b7c:	200001c0 	.word	0x200001c0
 8000b80:	0800c174 	.word	0x0800c174
 8000b84:	2001dec4 	.word	0x2001dec4
 8000b88:	2001dad4 	.word	0x2001dad4
 8000b8c:	0800c180 	.word	0x0800c180

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0a8      	sub	sp, #160	; 0xa0
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b9a:	2238      	movs	r2, #56	; 0x38
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f00b fa86 	bl	800c0b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2254      	movs	r2, #84	; 0x54
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f00b fa78 	bl	800c0b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bc4:	f005 fa10 	bl	8005fe8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bc8:	2321      	movs	r3, #33	; 0x21
 8000bca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bde:	2303      	movs	r3, #3
 8000be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000bea:	2319      	movs	r3, #25
 8000bec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c06:	4618      	mov	r0, r3
 8000c08:	f005 fafc 	bl	8006204 <HAL_RCC_OscConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000c12:	f000 fbef 	bl	80013f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	230f      	movs	r3, #15
 8000c18:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 fdff 	bl	8006834 <HAL_RCC_ClockConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c3c:	f000 fbda 	bl	80013f4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <SystemClock_Config+0xec>)
 8000c42:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC345;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c54:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c58:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000c5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4618      	mov	r0, r3
 8000c64:	f006 f802 	bl	8006c6c <HAL_RCCEx_PeriphCLKConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000c6e:	f000 fbc1 	bl	80013f4 <Error_Handler>
  }
}
 8000c72:	bf00      	nop
 8000c74:	37a0      	adds	r7, #160	; 0xa0
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	0001a025 	.word	0x0001a025

08000c80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c86:	463b      	mov	r3, r7
 8000c88:	2220      	movs	r2, #32
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f00b fa0f 	bl	800c0b0 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c92:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000c94:	4a2b      	ldr	r2, [pc, #172]	; (8000d44 <MX_ADC2_Init+0xc4>)
 8000c96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c98:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000c9a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c9e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca6:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cb2:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb8:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000cba:	2204      	movs	r2, #4
 8000cbc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cbe:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000cca:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cfa:	4811      	ldr	r0, [pc, #68]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000cfc:	f001 fa02 	bl	8002104 <HAL_ADC_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000d06:	f000 fb75 	bl	80013f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_ADC2_Init+0xc8>)
 8000d0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d0e:	2306      	movs	r3, #6
 8000d10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000d12:	2304      	movs	r3, #4
 8000d14:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d16:	237f      	movs	r3, #127	; 0x7f
 8000d18:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d22:	463b      	mov	r3, r7
 8000d24:	4619      	mov	r1, r3
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <MX_ADC2_Init+0xc0>)
 8000d28:	f001 ff1c 	bl	8002b64 <HAL_ADC_ConfigChannel>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000d32:	f000 fb5f 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	3720      	adds	r7, #32
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2001d99c 	.word	0x2001d99c
 8000d44:	50000100 	.word	0x50000100
 8000d48:	cb8c0000 	.word	0xcb8c0000

08000d4c <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d52:	463b      	mov	r3, r7
 8000d54:	2220      	movs	r2, #32
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f00b f9a9 	bl	800c0b0 <memset>
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  hadc4.Instance = ADC4;
 8000d5e:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000d60:	4a2b      	ldr	r2, [pc, #172]	; (8000e10 <MX_ADC4_Init+0xc4>)
 8000d62:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d64:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000d66:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d6a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000d6c:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d72:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d7e:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000d86:	2204      	movs	r2, #4
 8000d88:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000dc6:	4811      	ldr	r0, [pc, #68]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000dc8:	f001 f99c 	bl	8002104 <HAL_ADC_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8000dd2:	f000 fb0f 	bl	80013f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP6;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_ADC4_Init+0xc8>)
 8000dd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dda:	2306      	movs	r3, #6
 8000ddc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000dde:	2304      	movs	r3, #4
 8000de0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de2:	237f      	movs	r3, #127	; 0x7f
 8000de4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000de6:	2304      	movs	r3, #4
 8000de8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	4619      	mov	r1, r3
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <MX_ADC4_Init+0xc0>)
 8000df4:	f001 feb6 	bl	8002b64 <HAL_ADC_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000dfe:	f000 faf9 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	3720      	adds	r7, #32
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2001df00 	.word	0x2001df00
 8000e10:	50000500 	.word	0x50000500
 8000e14:	c75a0000 	.word	0xc75a0000

08000e18 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2220      	movs	r2, #32
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00b f943 	bl	800c0b0 <memset>
  /* USER CODE BEGIN ADC5_Init 1 */

  /* USER CODE END ADC5_Init 1 */
  /** Common config
  */
  hadc5.Instance = ADC5;
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e2c:	4a2b      	ldr	r2, [pc, #172]	; (8000edc <MX_ADC5_Init+0xc4>)
 8000e2e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e30:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e32:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e36:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e3e:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000e44:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e4a:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000e56:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000e62:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000e92:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000e94:	f001 f936 	bl	8002104 <HAL_ADC_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000e9e:	f000 faa9 	bl	80013f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_ADC5_Init+0xc8>)
 8000ea4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eae:	237f      	movs	r3, #127	; 0x7f
 8000eb0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_ADC5_Init+0xc0>)
 8000ec0:	f001 fe50 	bl	8002b64 <HAL_ADC_ConfigChannel>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000eca:	f000 fa93 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3720      	adds	r7, #32
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2001da08 	.word	0x2001da08
 8000edc:	50000600 	.word	0x50000600
 8000ee0:	8c900008 	.word	0x8c900008

08000ee4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MX_LPUART1_UART_Init+0x8c>)
 8000eea:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <MX_LPUART1_UART_Init+0x90>)
 8000eec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <MX_LPUART1_UART_Init+0x8c>)
 8000ef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_LPUART1_UART_Init+0x8c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_LPUART1_UART_Init+0x8c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_LPUART1_UART_Init+0x8c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_LPUART1_UART_Init+0x8c>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_LPUART1_UART_Init+0x8c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_LPUART1_UART_Init+0x8c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_LPUART1_UART_Init+0x8c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_LPUART1_UART_Init+0x8c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f26:	4812      	ldr	r0, [pc, #72]	; (8000f70 <MX_LPUART1_UART_Init+0x8c>)
 8000f28:	f006 f8ec 	bl	8007104 <HAL_UART_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f32:	f000 fa5f 	bl	80013f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f36:	2100      	movs	r1, #0
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <MX_LPUART1_UART_Init+0x8c>)
 8000f3a:	f006 fe3c 	bl	8007bb6 <HAL_UARTEx_SetTxFifoThreshold>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000f44:	f000 fa56 	bl	80013f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4809      	ldr	r0, [pc, #36]	; (8000f70 <MX_LPUART1_UART_Init+0x8c>)
 8000f4c:	f006 fe71 	bl	8007c32 <HAL_UARTEx_SetRxFifoThreshold>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000f56:	f000 fa4d 	bl	80013f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_LPUART1_UART_Init+0x8c>)
 8000f5c:	f006 fdf2 	bl	8007b44 <HAL_UARTEx_DisableFifoMode>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000f66:	f000 fa45 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2001dc0c 	.word	0x2001dc0c
 8000f74:	40008000 	.word	0x40008000

08000f78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc0:	4811      	ldr	r0, [pc, #68]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fc2:	f006 f89f 	bl	8007104 <HAL_UART_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fcc:	f000 fa12 	bl	80013f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	480d      	ldr	r0, [pc, #52]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fd4:	f006 fdef 	bl	8007bb6 <HAL_UARTEx_SetTxFifoThreshold>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fde:	f000 fa09 	bl	80013f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fe6:	f006 fe24 	bl	8007c32 <HAL_UARTEx_SetRxFifoThreshold>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ff0:	f000 fa00 	bl	80013f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000ff6:	f006 fda5 	bl	8007b44 <HAL_UARTEx_DisableFifoMode>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001000:	f000 f9f8 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2001dcfc 	.word	0x2001dcfc
 800100c:	40013800 	.word	0x40013800

08001010 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001016:	4a23      	ldr	r2, [pc, #140]	; (80010a4 <MX_USART3_UART_Init+0x94>)
 8001018:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800101c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001020:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001058:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800105a:	f006 f853 	bl	8007104 <HAL_UART_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001064:	f000 f9c6 	bl	80013f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001068:	2100      	movs	r1, #0
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800106c:	f006 fda3 	bl	8007bb6 <HAL_UARTEx_SetTxFifoThreshold>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001076:	f000 f9bd 	bl	80013f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107a:	2100      	movs	r1, #0
 800107c:	4808      	ldr	r0, [pc, #32]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800107e:	f006 fdd8 	bl	8007c32 <HAL_UARTEx_SetRxFifoThreshold>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001088:	f000 f9b4 	bl	80013f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800108e:	f006 fd59 	bl	8007b44 <HAL_UARTEx_DisableFifoMode>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001098:	f000 f9ac 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2001d910 	.word	0x2001d910
 80010a4:	40004800 	.word	0x40004800

080010a8 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_OPAMP3_Init+0x54>)
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <MX_OPAMP3_Init+0x58>)
 80010b0:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_OPAMP3_Init+0x54>)
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_OPAMP3_Init+0x54>)
 80010ba:	2240      	movs	r2, #64	; 0x40
 80010bc:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_OPAMP3_Init+0x54>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <MX_OPAMP3_Init+0x54>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_OPAMP3_Init+0x54>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <MX_OPAMP3_Init+0x54>)
 80010d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_64_OR_MINUS_63;
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_OPAMP3_Init+0x54>)
 80010da:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_OPAMP3_Init+0x54>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_OPAMP3_Init+0x54>)
 80010e8:	f003 fb00 	bl	80046ec <HAL_OPAMP_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 80010f2:	f000 f97f 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2001db08 	.word	0x2001db08
 8001100:	40010308 	.word	0x40010308

08001104 <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <MX_OPAMP5_Init+0x54>)
 800110a:	4a14      	ldr	r2, [pc, #80]	; (800115c <MX_OPAMP5_Init+0x58>)
 800110c:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <MX_OPAMP5_Init+0x54>)
 8001110:	2280      	movs	r2, #128	; 0x80
 8001112:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_PGA_MODE;
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_OPAMP5_Init+0x54>)
 8001116:	2240      	movs	r2, #64	; 0x40
 8001118:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_OPAMP5_Init+0x54>)
 800111c:	2208      	movs	r2, #8
 800111e:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <MX_OPAMP5_Init+0x54>)
 8001122:	2201      	movs	r2, #1
 8001124:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_OPAMP5_Init+0x54>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hopamp5.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_OPAMP5_Init+0x54>)
 800112e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp5.Init.PgaGain = OPAMP_PGA_GAIN_64_OR_MINUS_63;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_OPAMP5_Init+0x54>)
 8001136:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_OPAMP5_Init+0x54>)
 800113e:	2200      	movs	r2, #0
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_OPAMP5_Init+0x54>)
 8001144:	f003 fad2 	bl	80046ec <HAL_OPAMP_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_OPAMP5_Init+0x4e>
  {
    Error_Handler();
 800114e:	f000 f951 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2001de88 	.word	0x2001de88
 800115c:	40010310 	.word	0x40010310

08001160 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_OPAMP6_Init+0x50>)
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <MX_OPAMP6_Init+0x54>)
 8001168:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_OPAMP6_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_OPAMP6_Init+0x50>)
 8001172:	2240      	movs	r2, #64	; 0x40
 8001174:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_OPAMP6_Init+0x50>)
 8001178:	2208      	movs	r2, #8
 800117a:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_OPAMP6_Init+0x50>)
 800117e:	2201      	movs	r2, #1
 8001180:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_OPAMP6_Init+0x50>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_OPAMP6_Init+0x50>)
 800118a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_OPAMP6_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_OPAMP6_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_OPAMP6_Init+0x50>)
 800119e:	f003 faa5 	bl	80046ec <HAL_OPAMP_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_OPAMP6_Init+0x4c>
  {
    Error_Handler();
 80011a8:	f000 f924 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2001dd88 	.word	0x2001dd88
 80011b4:	40010314 	.word	0x40010314

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <MX_DMA_Init+0x98>)
 80011c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c2:	4a23      	ldr	r2, [pc, #140]	; (8001250 <MX_DMA_Init+0x98>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6493      	str	r3, [r2, #72]	; 0x48
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <MX_DMA_Init+0x98>)
 80011cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <MX_DMA_Init+0x98>)
 80011d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <MX_DMA_Init+0x98>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6493      	str	r3, [r2, #72]	; 0x48
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_DMA_Init+0x98>)
 80011e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_DMA_Init+0x98>)
 80011f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <MX_DMA_Init+0x98>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6493      	str	r3, [r2, #72]	; 0x48
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_DMA_Init+0x98>)
 80011fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	200b      	movs	r0, #11
 800120c:	f002 fc7f 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001210:	200b      	movs	r0, #11
 8001212:	f002 fc96 	bl	8003b42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	200c      	movs	r0, #12
 800121c:	f002 fc77 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001220:	200c      	movs	r0, #12
 8001222:	f002 fc8e 	bl	8003b42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	200d      	movs	r0, #13
 800122c:	f002 fc6f 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001230:	200d      	movs	r0, #13
 8001232:	f002 fc86 	bl	8003b42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2038      	movs	r0, #56	; 0x38
 800123c:	f002 fc67 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001240:	2038      	movs	r0, #56	; 0x38
 8001242:	f002 fc7e 	bl	8003b42 <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <MX_GPIO_Init+0xd4>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a2e      	ldr	r2, [pc, #184]	; (8001328 <MX_GPIO_Init+0xd4>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <MX_GPIO_Init+0xd4>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001282:	4b29      	ldr	r3, [pc, #164]	; (8001328 <MX_GPIO_Init+0xd4>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a28      	ldr	r2, [pc, #160]	; (8001328 <MX_GPIO_Init+0xd4>)
 8001288:	f043 0320 	orr.w	r3, r3, #32
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <MX_GPIO_Init+0xd4>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0320 	and.w	r3, r3, #32
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <MX_GPIO_Init+0xd4>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a22      	ldr	r2, [pc, #136]	; (8001328 <MX_GPIO_Init+0xd4>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <MX_GPIO_Init+0xd4>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <MX_GPIO_Init+0xd4>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <MX_GPIO_Init+0xd4>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_GPIO_Init+0xd4>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2120      	movs	r1, #32
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f003 f9b5 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_GPIO_Init+0xd8>)
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <MX_GPIO_Init+0xdc>)
 80012ec:	f003 f826 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012f0:	2320      	movs	r3, #32
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f003 f817 	bl	800433c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2028      	movs	r0, #40	; 0x28
 8001314:	f002 fbfb 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001318:	2028      	movs	r0, #40	; 0x28
 800131a:	f002 fc12 	bl	8003b42 <HAL_NVIC_EnableIRQ>

}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	10110000 	.word	0x10110000
 8001330:	48000800 	.word	0x48000800

08001334 <print5>:

/* USER CODE BEGIN 4 */
void print5(uint8_t string[])
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	strcpy(stroka,string);
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <print5+0x2c>)
 8001340:	f00a febe 	bl	800c0c0 <strcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*) string, strlen(string),10);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7fe ff67 	bl	8000218 <strlen>
 800134a:	4603      	mov	r3, r0
 800134c:	b29a      	uxth	r2, r3
 800134e:	230a      	movs	r3, #10
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <print5+0x30>)
 8001354:	f005 ff26 	bl	80071a4 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&hlpuart1, (uint8_t*) string, strlen(string), 10);
	//HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\n", 1, 10);
	//HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r", 1, 10);
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2001dc98 	.word	0x2001dc98
 8001364:	2001dcfc 	.word	0x2001dcfc

08001368 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC5)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a11      	ldr	r2, [pc, #68]	; (80013bc <HAL_ADC_ConvCpltCallback+0x54>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d105      	bne.n	8001386 <HAL_ADC_ConvCpltCallback+0x1e>
    {

        HAL_ADC_Stop(&hadc5); // это необязательно
 800137a:	4811      	ldr	r0, [pc, #68]	; (80013c0 <HAL_ADC_ConvCpltCallback+0x58>)
 800137c:	f001 f882 	bl	8002484 <HAL_ADC_Stop>
flag3 =1;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001382:	2201      	movs	r2, #1
 8001384:	801a      	strh	r2, [r3, #0]

    }
    if(hadc->Instance == ADC2)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <HAL_ADC_ConvCpltCallback+0x60>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d105      	bne.n	800139c <HAL_ADC_ConvCpltCallback+0x34>
    {

        HAL_ADC_Stop(&hadc2); // это необязательно
 8001390:	480e      	ldr	r0, [pc, #56]	; (80013cc <HAL_ADC_ConvCpltCallback+0x64>)
 8001392:	f001 f877 	bl	8002484 <HAL_ADC_Stop>
flag2 =1;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_ADC_ConvCpltCallback+0x68>)
 8001398:	2201      	movs	r2, #1
 800139a:	801a      	strh	r2, [r3, #0]

    }
    if(hadc->Instance == ADC4)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <HAL_ADC_ConvCpltCallback+0x6c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d105      	bne.n	80013b2 <HAL_ADC_ConvCpltCallback+0x4a>
    {

        HAL_ADC_Stop(&hadc4); // это необязательно
 80013a6:	480c      	ldr	r0, [pc, #48]	; (80013d8 <HAL_ADC_ConvCpltCallback+0x70>)
 80013a8:	f001 f86c 	bl	8002484 <HAL_ADC_Stop>
flag1 =1;
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_ADC_ConvCpltCallback+0x74>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	801a      	strh	r2, [r3, #0]

    }
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	50000600 	.word	0x50000600
 80013c0:	2001da08 	.word	0x2001da08
 80013c4:	2001d684 	.word	0x2001d684
 80013c8:	50000100 	.word	0x50000100
 80013cc:	2001d99c 	.word	0x2001d99c
 80013d0:	2001d682 	.word	0x2001d682
 80013d4:	50000500 	.word	0x50000500
 80013d8:	2001df00 	.word	0x2001df00
 80013dc:	2001d680 	.word	0x2001d680

080013e0 <HAL_ADC_LevelOutOfWindowCallback>:
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
//    		  HAL_UART_Transmit(&hlpuart1, (uint8_t*) snum, strlen(snum),10);
    		 // HAL_ADC_Stop_IT(&hadc3);
    //	HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t*) "1\n", 2);
    	// HAL_ADC_Stop(&hadc3);
    }
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_MspInit+0x64>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	4a16      	ldr	r2, [pc, #88]	; (8001468 <HAL_MspInit+0x64>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6613      	str	r3, [r2, #96]	; 0x60
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_MspInit+0x64>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_MspInit+0x64>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_MspInit+0x64>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	6593      	str	r3, [r2, #88]	; 0x58
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_MspInit+0x64>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2001      	movs	r0, #1
 8001440:	f002 fb65 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8001444:	2001      	movs	r0, #1
 8001446:	f002 fb7c 	bl	8003b42 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2004      	movs	r0, #4
 8001450:	f002 fb5d 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001454:	2004      	movs	r0, #4
 8001456:	f002 fb74 	bl	8003b42 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800145a:	f004 fec3 	bl	80061e4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a6a      	ldr	r2, [pc, #424]	; (8001624 <HAL_ADC_MspInit+0x1b8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d140      	bne.n	8001500 <HAL_ADC_MspInit+0x94>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800147e:	4b6a      	ldr	r3, [pc, #424]	; (8001628 <HAL_ADC_MspInit+0x1bc>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a69      	ldr	r2, [pc, #420]	; (8001628 <HAL_ADC_MspInit+0x1bc>)
 8001484:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b67      	ldr	r3, [pc, #412]	; (8001628 <HAL_ADC_MspInit+0x1bc>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8001496:	4b65      	ldr	r3, [pc, #404]	; (800162c <HAL_ADC_MspInit+0x1c0>)
 8001498:	4a65      	ldr	r2, [pc, #404]	; (8001630 <HAL_ADC_MspInit+0x1c4>)
 800149a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800149c:	4b63      	ldr	r3, [pc, #396]	; (800162c <HAL_ADC_MspInit+0x1c0>)
 800149e:	2224      	movs	r2, #36	; 0x24
 80014a0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a2:	4b62      	ldr	r3, [pc, #392]	; (800162c <HAL_ADC_MspInit+0x1c0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a8:	4b60      	ldr	r3, [pc, #384]	; (800162c <HAL_ADC_MspInit+0x1c0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014ae:	4b5f      	ldr	r3, [pc, #380]	; (800162c <HAL_ADC_MspInit+0x1c0>)
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014b4:	4b5d      	ldr	r3, [pc, #372]	; (800162c <HAL_ADC_MspInit+0x1c0>)
 80014b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ba:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014bc:	4b5b      	ldr	r3, [pc, #364]	; (800162c <HAL_ADC_MspInit+0x1c0>)
 80014be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80014c4:	4b59      	ldr	r3, [pc, #356]	; (800162c <HAL_ADC_MspInit+0x1c0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014ca:	4b58      	ldr	r3, [pc, #352]	; (800162c <HAL_ADC_MspInit+0x1c0>)
 80014cc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80014d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80014d2:	4856      	ldr	r0, [pc, #344]	; (800162c <HAL_ADC_MspInit+0x1c0>)
 80014d4:	f002 fb50 	bl	8003b78 <HAL_DMA_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80014de:	f7ff ff89 	bl	80013f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a51      	ldr	r2, [pc, #324]	; (800162c <HAL_ADC_MspInit+0x1c0>)
 80014e6:	655a      	str	r2, [r3, #84]	; 0x54
 80014e8:	4a50      	ldr	r2, [pc, #320]	; (800162c <HAL_ADC_MspInit+0x1c0>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	2012      	movs	r0, #18
 80014f4:	f002 fb0b 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80014f8:	2012      	movs	r0, #18
 80014fa:	f002 fb22 	bl	8003b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80014fe:	e08c      	b.n	800161a <HAL_ADC_MspInit+0x1ae>
  else if(hadc->Instance==ADC4)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a4b      	ldr	r2, [pc, #300]	; (8001634 <HAL_ADC_MspInit+0x1c8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d141      	bne.n	800158e <HAL_ADC_MspInit+0x122>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800150a:	4b4b      	ldr	r3, [pc, #300]	; (8001638 <HAL_ADC_MspInit+0x1cc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	4a49      	ldr	r2, [pc, #292]	; (8001638 <HAL_ADC_MspInit+0x1cc>)
 8001512:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001514:	4b48      	ldr	r3, [pc, #288]	; (8001638 <HAL_ADC_MspInit+0x1cc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d10b      	bne.n	8001534 <HAL_ADC_MspInit+0xc8>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800151c:	4b42      	ldr	r3, [pc, #264]	; (8001628 <HAL_ADC_MspInit+0x1bc>)
 800151e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001520:	4a41      	ldr	r2, [pc, #260]	; (8001628 <HAL_ADC_MspInit+0x1bc>)
 8001522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001528:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <HAL_ADC_MspInit+0x1bc>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]
    hdma_adc4.Instance = DMA1_Channel2;
 8001534:	4b41      	ldr	r3, [pc, #260]	; (800163c <HAL_ADC_MspInit+0x1d0>)
 8001536:	4a42      	ldr	r2, [pc, #264]	; (8001640 <HAL_ADC_MspInit+0x1d4>)
 8001538:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800153a:	4b40      	ldr	r3, [pc, #256]	; (800163c <HAL_ADC_MspInit+0x1d0>)
 800153c:	2226      	movs	r2, #38	; 0x26
 800153e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001540:	4b3e      	ldr	r3, [pc, #248]	; (800163c <HAL_ADC_MspInit+0x1d0>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001546:	4b3d      	ldr	r3, [pc, #244]	; (800163c <HAL_ADC_MspInit+0x1d0>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800154c:	4b3b      	ldr	r3, [pc, #236]	; (800163c <HAL_ADC_MspInit+0x1d0>)
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001552:	4b3a      	ldr	r3, [pc, #232]	; (800163c <HAL_ADC_MspInit+0x1d0>)
 8001554:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001558:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800155a:	4b38      	ldr	r3, [pc, #224]	; (800163c <HAL_ADC_MspInit+0x1d0>)
 800155c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001560:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 8001562:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_ADC_MspInit+0x1d0>)
 8001564:	2200      	movs	r2, #0
 8001566:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001568:	4b34      	ldr	r3, [pc, #208]	; (800163c <HAL_ADC_MspInit+0x1d0>)
 800156a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800156e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001570:	4832      	ldr	r0, [pc, #200]	; (800163c <HAL_ADC_MspInit+0x1d0>)
 8001572:	f002 fb01 	bl	8003b78 <HAL_DMA_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_ADC_MspInit+0x114>
      Error_Handler();
 800157c:	f7ff ff3a 	bl	80013f4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a2e      	ldr	r2, [pc, #184]	; (800163c <HAL_ADC_MspInit+0x1d0>)
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
 8001586:	4a2d      	ldr	r2, [pc, #180]	; (800163c <HAL_ADC_MspInit+0x1d0>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800158c:	e045      	b.n	800161a <HAL_ADC_MspInit+0x1ae>
  else if(hadc->Instance==ADC5)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a2c      	ldr	r2, [pc, #176]	; (8001644 <HAL_ADC_MspInit+0x1d8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d140      	bne.n	800161a <HAL_ADC_MspInit+0x1ae>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <HAL_ADC_MspInit+0x1cc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	4a26      	ldr	r2, [pc, #152]	; (8001638 <HAL_ADC_MspInit+0x1cc>)
 80015a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015a2:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_ADC_MspInit+0x1cc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d10b      	bne.n	80015c2 <HAL_ADC_MspInit+0x156>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80015aa:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <HAL_ADC_MspInit+0x1bc>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <HAL_ADC_MspInit+0x1bc>)
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_ADC_MspInit+0x1bc>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel1;
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <HAL_ADC_MspInit+0x1dc>)
 80015c4:	4a21      	ldr	r2, [pc, #132]	; (800164c <HAL_ADC_MspInit+0x1e0>)
 80015c6:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <HAL_ADC_MspInit+0x1dc>)
 80015ca:	2227      	movs	r2, #39	; 0x27
 80015cc:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_ADC_MspInit+0x1dc>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_ADC_MspInit+0x1dc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_ADC_MspInit+0x1dc>)
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_ADC_MspInit+0x1dc>)
 80015e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e6:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_ADC_MspInit+0x1dc>)
 80015ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ee:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_ADC_MspInit+0x1dc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_ADC_MspInit+0x1dc>)
 80015f8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80015fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80015fe:	4812      	ldr	r0, [pc, #72]	; (8001648 <HAL_ADC_MspInit+0x1dc>)
 8001600:	f002 faba 	bl	8003b78 <HAL_DMA_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_ADC_MspInit+0x1a2>
      Error_Handler();
 800160a:	f7ff fef3 	bl	80013f4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <HAL_ADC_MspInit+0x1dc>)
 8001612:	655a      	str	r2, [r3, #84]	; 0x54
 8001614:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <HAL_ADC_MspInit+0x1dc>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6293      	str	r3, [r2, #40]	; 0x28
}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	50000100 	.word	0x50000100
 8001628:	40021000 	.word	0x40021000
 800162c:	2001df6c 	.word	0x2001df6c
 8001630:	40020408 	.word	0x40020408
 8001634:	50000500 	.word	0x50000500
 8001638:	2001d688 	.word	0x2001d688
 800163c:	2001d8b0 	.word	0x2001d8b0
 8001640:	4002001c 	.word	0x4002001c
 8001644:	50000600 	.word	0x50000600
 8001648:	2001da74 	.word	0x2001da74
 800164c:	40020008 	.word	0x40020008

08001650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08e      	sub	sp, #56	; 0x38
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a5b      	ldr	r2, [pc, #364]	; (80017dc <HAL_UART_MspInit+0x18c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d152      	bne.n	8001718 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001672:	4b5b      	ldr	r3, [pc, #364]	; (80017e0 <HAL_UART_MspInit+0x190>)
 8001674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001676:	4a5a      	ldr	r2, [pc, #360]	; (80017e0 <HAL_UART_MspInit+0x190>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800167e:	4b58      	ldr	r3, [pc, #352]	; (80017e0 <HAL_UART_MspInit+0x190>)
 8001680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	623b      	str	r3, [r7, #32]
 8001688:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b55      	ldr	r3, [pc, #340]	; (80017e0 <HAL_UART_MspInit+0x190>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a54      	ldr	r2, [pc, #336]	; (80017e0 <HAL_UART_MspInit+0x190>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b52      	ldr	r3, [pc, #328]	; (80017e0 <HAL_UART_MspInit+0x190>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80016a2:	230c      	movs	r3, #12
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80016b2:	230c      	movs	r3, #12
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f002 fe3c 	bl	800433c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 80016c4:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_UART_MspInit+0x194>)
 80016c6:	4a48      	ldr	r2, [pc, #288]	; (80017e8 <HAL_UART_MspInit+0x198>)
 80016c8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80016ca:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <HAL_UART_MspInit+0x194>)
 80016cc:	2223      	movs	r2, #35	; 0x23
 80016ce:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d0:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <HAL_UART_MspInit+0x194>)
 80016d2:	2210      	movs	r2, #16
 80016d4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d6:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <HAL_UART_MspInit+0x194>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016dc:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_UART_MspInit+0x194>)
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e2:	4b40      	ldr	r3, [pc, #256]	; (80017e4 <HAL_UART_MspInit+0x194>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e8:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <HAL_UART_MspInit+0x194>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80016ee:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <HAL_UART_MspInit+0x194>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016f4:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_UART_MspInit+0x194>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80016fa:	483a      	ldr	r0, [pc, #232]	; (80017e4 <HAL_UART_MspInit+0x194>)
 80016fc:	f002 fa3c 	bl	8003b78 <HAL_DMA_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8001706:	f7ff fe75 	bl	80013f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a35      	ldr	r2, [pc, #212]	; (80017e4 <HAL_UART_MspInit+0x194>)
 800170e:	675a      	str	r2, [r3, #116]	; 0x74
 8001710:	4a34      	ldr	r2, [pc, #208]	; (80017e4 <HAL_UART_MspInit+0x194>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001716:	e05d      	b.n	80017d4 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a33      	ldr	r2, [pc, #204]	; (80017ec <HAL_UART_MspInit+0x19c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d12a      	bne.n	8001778 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001722:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <HAL_UART_MspInit+0x190>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001726:	4a2e      	ldr	r2, [pc, #184]	; (80017e0 <HAL_UART_MspInit+0x190>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6613      	str	r3, [r2, #96]	; 0x60
 800172e:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <HAL_UART_MspInit+0x190>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <HAL_UART_MspInit+0x190>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	4a28      	ldr	r2, [pc, #160]	; (80017e0 <HAL_UART_MspInit+0x190>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_UART_MspInit+0x190>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001752:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001764:	2307      	movs	r3, #7
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f002 fde3 	bl	800433c <HAL_GPIO_Init>
}
 8001776:	e02d      	b.n	80017d4 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <HAL_UART_MspInit+0x1a0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d128      	bne.n	80017d4 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_UART_MspInit+0x190>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <HAL_UART_MspInit+0x190>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178c:	6593      	str	r3, [r2, #88]	; 0x58
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_UART_MspInit+0x190>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_UART_MspInit+0x190>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	4a10      	ldr	r2, [pc, #64]	; (80017e0 <HAL_UART_MspInit+0x190>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <HAL_UART_MspInit+0x190>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017c4:	2307      	movs	r3, #7
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	4809      	ldr	r0, [pc, #36]	; (80017f4 <HAL_UART_MspInit+0x1a4>)
 80017d0:	f002 fdb4 	bl	800433c <HAL_GPIO_Init>
}
 80017d4:	bf00      	nop
 80017d6:	3738      	adds	r7, #56	; 0x38
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40008000 	.word	0x40008000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	2001de28 	.word	0x2001de28
 80017e8:	40020030 	.word	0x40020030
 80017ec:	40013800 	.word	0x40013800
 80017f0:	40004800 	.word	0x40004800
 80017f4:	48000800 	.word	0x48000800

080017f8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	; 0x30
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP3)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a46      	ldr	r2, [pc, #280]	; (8001930 <HAL_OPAMP_MspInit+0x138>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d118      	bne.n	800184c <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP3_MspInit 0 */

  /* USER CODE END OPAMP3_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b46      	ldr	r3, [pc, #280]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a45      	ldr	r2, [pc, #276]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b43      	ldr	r3, [pc, #268]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP3 GPIO Configuration
    PB0     ------> OPAMP3_VINP
    PB2     ------> OPAMP3_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001832:	2305      	movs	r3, #5
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001836:	2303      	movs	r3, #3
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	483c      	ldr	r0, [pc, #240]	; (8001938 <HAL_OPAMP_MspInit+0x140>)
 8001846:	f002 fd79 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 800184a:	e06d      	b.n	8001928 <HAL_OPAMP_MspInit+0x130>
  else if(hopamp->Instance==OPAMP5)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a3a      	ldr	r2, [pc, #232]	; (800193c <HAL_OPAMP_MspInit+0x144>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d131      	bne.n	80018ba <HAL_OPAMP_MspInit+0xc2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4a36      	ldr	r2, [pc, #216]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001862:	4b34      	ldr	r3, [pc, #208]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b31      	ldr	r3, [pc, #196]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	4a30      	ldr	r2, [pc, #192]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187a:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001886:	2308      	movs	r3, #8
 8001888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188a:	2303      	movs	r3, #3
 800188c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	4829      	ldr	r0, [pc, #164]	; (8001940 <HAL_OPAMP_MspInit+0x148>)
 800189a:	f002 fd4f 	bl	800433c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800189e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a4:	2303      	movs	r3, #3
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4821      	ldr	r0, [pc, #132]	; (8001938 <HAL_OPAMP_MspInit+0x140>)
 80018b4:	f002 fd42 	bl	800433c <HAL_GPIO_Init>
}
 80018b8:	e036      	b.n	8001928 <HAL_OPAMP_MspInit+0x130>
  else if(hopamp->Instance==OPAMP6)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a21      	ldr	r2, [pc, #132]	; (8001944 <HAL_OPAMP_MspInit+0x14c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d131      	bne.n	8001928 <HAL_OPAMP_MspInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a1a      	ldr	r2, [pc, #104]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_OPAMP_MspInit+0x13c>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f8:	2303      	movs	r3, #3
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190a:	f002 fd17 	bl	800433c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800190e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001914:	2303      	movs	r3, #3
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <HAL_OPAMP_MspInit+0x140>)
 8001924:	f002 fd0a 	bl	800433c <HAL_GPIO_Init>
}
 8001928:	bf00      	nop
 800192a:	3730      	adds	r7, #48	; 0x30
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40010308 	.word	0x40010308
 8001934:	40021000 	.word	0x40021000
 8001938:	48000400 	.word	0x48000400
 800193c:	40010310 	.word	0x40010310
 8001940:	48000800 	.word	0x48000800
 8001944:	40010314 	.word	0x40010314

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler+0x4>

0800196e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199c:	f000 f8e4 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/38/39/40/41.
  */
void PVD_PVM_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 80019a8:	f004 fbc2 	bl	8006130 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80019b4:	f002 fb52 	bl	800405c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <DMA1_Channel1_IRQHandler+0x10>)
 80019c2:	f002 f9fc 	bl	8003dbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2001da74 	.word	0x2001da74

080019d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <DMA1_Channel2_IRQHandler+0x10>)
 80019d6:	f002 f9f2 	bl	8003dbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2001d8b0 	.word	0x2001d8b0

080019e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <DMA1_Channel3_IRQHandler+0x10>)
 80019ea:	f002 f9e8 	bl	8003dbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2001de28 	.word	0x2001de28

080019f8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <ADC1_2_IRQHandler+0x10>)
 80019fe:	f000 fe43 	bl	8002688 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	2001d99c 	.word	0x2001d99c

08001a0c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <USB_LP_IRQHandler+0x10>)
 8001a12:	f003 f873 	bl	8004afc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2001f3a0 	.word	0x2001f3a0

08001a20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a28:	f002 fe3c 	bl	80046a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <DMA2_Channel1_IRQHandler+0x10>)
 8001a36:	f002 f9c2 	bl	8003dbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2001df6c 	.word	0x2001df6c

08001a44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <SystemInit+0x28>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <SystemInit+0x28>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <SystemInit+0x28>)
 8001a5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a5e:	609a      	str	r2, [r3, #8]
#endif
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a70:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a74:	480d      	ldr	r0, [pc, #52]	; (8001aac <LoopForever+0x6>)
  ldr r1, =_edata
 8001a76:	490e      	ldr	r1, [pc, #56]	; (8001ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a78:	4a0e      	ldr	r2, [pc, #56]	; (8001ab4 <LoopForever+0xe>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a8c:	4c0b      	ldr	r4, [pc, #44]	; (8001abc <LoopForever+0x16>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a9a:	f7ff ffd3 	bl	8001a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f00a fac9 	bl	800c034 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aa2:	f7fe ff81 	bl	80009a8 <main>

08001aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa6:	e7fe      	b.n	8001aa6 <LoopForever>
  ldr   r0, =_estack
 8001aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab0:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8001ab4:	0800c244 	.word	0x0800c244
  ldr r2, =_sbss
 8001ab8:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8001abc:	2001f694 	.word	0x2001f694

08001ac0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC3_IRQHandler>

08001ac2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001acc:	2003      	movs	r0, #3
 8001ace:	f002 f813 	bl	8003af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f000 f80e 	bl	8001af4 <HAL_InitTick>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	71fb      	strb	r3, [r7, #7]
 8001ae2:	e001      	b.n	8001ae8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ae4:	f7ff fc8e 	bl	8001404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ae8:	79fb      	ldrb	r3, [r7, #7]

}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b00:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <HAL_InitTick+0x68>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d022      	beq.n	8001b4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_InitTick+0x6c>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <HAL_InitTick+0x68>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 f81e 	bl	8003b5e <HAL_SYSTICK_Config>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10f      	bne.n	8001b48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b0f      	cmp	r3, #15
 8001b2c:	d809      	bhi.n	8001b42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	f04f 30ff 	mov.w	r0, #4294967295
 8001b36:	f001 ffea 	bl	8003b0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_InitTick+0x70>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e007      	b.n	8001b52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	e004      	b.n	8001b52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e001      	b.n	8001b52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_IncTick+0x1c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_IncTick+0x20>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a03      	ldr	r2, [pc, #12]	; (8001b84 <HAL_IncTick+0x1c>)
 8001b78:	6013      	str	r3, [r2, #0]
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	2001dfcc 	.word	0x2001dfcc
 8001b88:	20000008 	.word	0x20000008

08001b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_GetTick+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	2001dfcc 	.word	0x2001dfcc

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff ffee 	bl	8001b8c <HAL_GetTick>
 8001bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d004      	beq.n	8001bc8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_Delay+0x40>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc8:	bf00      	nop
 8001bca:	f7ff ffdf 	bl	8001b8c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d8f7      	bhi.n	8001bca <HAL_Delay+0x26>
  {
  }
}
 8001bda:	bf00      	nop
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000008 	.word	0x20000008

08001be8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	609a      	str	r2, [r3, #8]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3360      	adds	r3, #96	; 0x60
 8001c62:	461a      	mov	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <LL_ADC_SetOffset+0x44>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c88:	bf00      	nop
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	03fff000 	.word	0x03fff000

08001c98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3360      	adds	r3, #96	; 0x60
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3360      	adds	r3, #96	; 0x60
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b087      	sub	sp, #28
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3360      	adds	r3, #96	; 0x60
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3360      	adds	r3, #96	; 0x60
 8001d40:	461a      	mov	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d5a:	bf00      	nop
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	615a      	str	r2, [r3, #20]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b087      	sub	sp, #28
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3330      	adds	r3, #48	; 0x30
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	4413      	add	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	211f      	movs	r1, #31
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	401a      	ands	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	f003 011f 	and.w	r1, r3, #31
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dfe:	bf00      	nop
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3314      	adds	r3, #20
 8001e40:	461a      	mov	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	0e5b      	lsrs	r3, r3, #25
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	0d1b      	lsrs	r3, r3, #20
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	2107      	movs	r1, #7
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	401a      	ands	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	0d1b      	lsrs	r3, r3, #20
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	431a      	orrs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0318 	and.w	r3, r3, #24
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001eac:	40d9      	lsrs	r1, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	400b      	ands	r3, r1
 8001eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	0007ffff 	.word	0x0007ffff

08001ed0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 031f 	and.w	r3, r3, #31
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6093      	str	r3, [r2, #8]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f40:	d101      	bne.n	8001f46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f90:	d101      	bne.n	8001f96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fe0:	f043 0202 	orr.w	r2, r3, #2
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <LL_ADC_IsEnabled+0x18>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <LL_ADC_IsEnabled+0x1a>
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b02      	cmp	r3, #2
 800202c:	d101      	bne.n	8002032 <LL_ADC_IsDisableOngoing+0x18>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <LL_ADC_IsDisableOngoing+0x1a>
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002050:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002054:	f043 0204 	orr.w	r2, r3, #4
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002078:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800207c:	f043 0210 	orr.w	r2, r3, #16
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d101      	bne.n	80020a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020ca:	f043 0220 	orr.w	r2, r3, #32
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d101      	bne.n	80020f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e1ad      	b.n	800247a <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff f99d 	bl	800146c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fef1 	bl	8001f2c <LL_ADC_IsDeepPowerDownEnabled>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fed7 	bl	8001f08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff0c 	bl	8001f7c <LL_ADC_IsInternalRegulatorEnabled>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d113      	bne.n	8002192 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fef0 	bl	8001f54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002174:	4b9e      	ldr	r3, [pc, #632]	; (80023f0 <HAL_ADC_Init+0x2ec>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	099b      	lsrs	r3, r3, #6
 800217a:	4a9e      	ldr	r2, [pc, #632]	; (80023f4 <HAL_ADC_Init+0x2f0>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002184:	e002      	b.n	800218c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3b01      	subs	r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f9      	bne.n	8002186 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fef0 	bl	8001f7c <LL_ADC_IsInternalRegulatorEnabled>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10d      	bne.n	80021be <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	f043 0210 	orr.w	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b2:	f043 0201 	orr.w	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff64 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 80021c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 8148 	bne.w	8002468 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 8144 	bne.w	8002468 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021e8:	f043 0202 	orr.w	r2, r3, #2
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fefd 	bl	8001ff4 <LL_ADC_IsEnabled>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d141      	bne.n	8002284 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002208:	d004      	beq.n	8002214 <HAL_ADC_Init+0x110>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a7a      	ldr	r2, [pc, #488]	; (80023f8 <HAL_ADC_Init+0x2f4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d10f      	bne.n	8002234 <HAL_ADC_Init+0x130>
 8002214:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002218:	f7ff feec 	bl	8001ff4 <LL_ADC_IsEnabled>
 800221c:	4604      	mov	r4, r0
 800221e:	4876      	ldr	r0, [pc, #472]	; (80023f8 <HAL_ADC_Init+0x2f4>)
 8002220:	f7ff fee8 	bl	8001ff4 <LL_ADC_IsEnabled>
 8002224:	4603      	mov	r3, r0
 8002226:	4323      	orrs	r3, r4
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	e012      	b.n	800225a <HAL_ADC_Init+0x156>
 8002234:	4871      	ldr	r0, [pc, #452]	; (80023fc <HAL_ADC_Init+0x2f8>)
 8002236:	f7ff fedd 	bl	8001ff4 <LL_ADC_IsEnabled>
 800223a:	4604      	mov	r4, r0
 800223c:	4870      	ldr	r0, [pc, #448]	; (8002400 <HAL_ADC_Init+0x2fc>)
 800223e:	f7ff fed9 	bl	8001ff4 <LL_ADC_IsEnabled>
 8002242:	4603      	mov	r3, r0
 8002244:	431c      	orrs	r4, r3
 8002246:	486f      	ldr	r0, [pc, #444]	; (8002404 <HAL_ADC_Init+0x300>)
 8002248:	f7ff fed4 	bl	8001ff4 <LL_ADC_IsEnabled>
 800224c:	4603      	mov	r3, r0
 800224e:	4323      	orrs	r3, r4
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d012      	beq.n	8002284 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002266:	d004      	beq.n	8002272 <HAL_ADC_Init+0x16e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a62      	ldr	r2, [pc, #392]	; (80023f8 <HAL_ADC_Init+0x2f4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_ADC_Init+0x172>
 8002272:	4a65      	ldr	r2, [pc, #404]	; (8002408 <HAL_ADC_Init+0x304>)
 8002274:	e000      	b.n	8002278 <HAL_ADC_Init+0x174>
 8002276:	4a65      	ldr	r2, [pc, #404]	; (800240c <HAL_ADC_Init+0x308>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f7ff fcb2 	bl	8001be8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7f5b      	ldrb	r3, [r3, #29]
 8002288:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800228e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002294:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800229a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022a2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d106      	bne.n	80022c0 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	3b01      	subs	r3, #1
 80022b8:	045b      	lsls	r3, r3, #17
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d009      	beq.n	80022dc <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	4b4b      	ldr	r3, [pc, #300]	; (8002410 <HAL_ADC_Init+0x30c>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	430b      	orrs	r3, r1
 80022ee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fec0 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 8002310:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fee1 	bl	80020de <LL_ADC_INJ_IsConversionOngoing>
 800231c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d17f      	bne.n	8002424 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d17c      	bne.n	8002424 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800232e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002336:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002346:	f023 0302 	bic.w	r3, r3, #2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	69b9      	ldr	r1, [r7, #24]
 8002350:	430b      	orrs	r3, r1
 8002352:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d017      	beq.n	800238c <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800236a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002374:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002378:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6911      	ldr	r1, [r2, #16]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	430b      	orrs	r3, r1
 8002386:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800238a:	e013      	b.n	80023b4 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800239a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d12a      	bne.n	8002414 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023c8:	f023 0304 	bic.w	r3, r3, #4
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023d4:	4311      	orrs	r1, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023da:	4311      	orrs	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023e0:	430a      	orrs	r2, r1
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0201 	orr.w	r2, r2, #1
 80023ec:	611a      	str	r2, [r3, #16]
 80023ee:	e019      	b.n	8002424 <HAL_ADC_Init+0x320>
 80023f0:	20000000 	.word	0x20000000
 80023f4:	053e2d63 	.word	0x053e2d63
 80023f8:	50000100 	.word	0x50000100
 80023fc:	50000400 	.word	0x50000400
 8002400:	50000500 	.word	0x50000500
 8002404:	50000600 	.word	0x50000600
 8002408:	50000300 	.word	0x50000300
 800240c:	50000700 	.word	0x50000700
 8002410:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0201 	bic.w	r2, r2, #1
 8002422:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d10c      	bne.n	8002446 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f023 010f 	bic.w	r1, r3, #15
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	1e5a      	subs	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
 8002444:	e007      	b.n	8002456 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 020f 	bic.w	r2, r2, #15
 8002454:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	f043 0201 	orr.w	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	65da      	str	r2, [r3, #92]	; 0x5c
 8002466:	e007      	b.n	8002478 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	f043 0210 	orr.w	r2, r3, #16
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002478:	7ffb      	ldrb	r3, [r7, #31]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	; 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd90      	pop	{r4, r7, pc}
 8002482:	bf00      	nop

08002484 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_ADC_Stop+0x16>
 8002496:	2302      	movs	r3, #2
 8002498:	e023      	b.n	80024e2 <HAL_ADC_Stop+0x5e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80024a2:	2103      	movs	r1, #3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 ff9b 	bl	80033e0 <ADC_ConversionStop>
 80024aa:	4603      	mov	r3, r0
 80024ac:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d111      	bne.n	80024d8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f001 f8a1 	bl	80035fc <ADC_Disable>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d109      	bne.n	80024d8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002500:	d004      	beq.n	800250c <HAL_ADC_Start_DMA+0x20>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a58      	ldr	r2, [pc, #352]	; (8002668 <HAL_ADC_Start_DMA+0x17c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d101      	bne.n	8002510 <HAL_ADC_Start_DMA+0x24>
 800250c:	4b57      	ldr	r3, [pc, #348]	; (800266c <HAL_ADC_Start_DMA+0x180>)
 800250e:	e000      	b.n	8002512 <HAL_ADC_Start_DMA+0x26>
 8002510:	4b57      	ldr	r3, [pc, #348]	; (8002670 <HAL_ADC_Start_DMA+0x184>)
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fcdc 	bl	8001ed0 <LL_ADC_GetMultimode>
 8002518:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fdb6 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	f040 8096 	bne.w	8002658 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_ADC_Start_DMA+0x4e>
 8002536:	2302      	movs	r3, #2
 8002538:	e091      	b.n	800265e <HAL_ADC_Start_DMA+0x172>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b05      	cmp	r3, #5
 800254c:	d002      	beq.n	8002554 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b09      	cmp	r3, #9
 8002552:	d17a      	bne.n	800264a <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fff7 	bl	8003548 <ADC_Enable>
 800255a:	4603      	mov	r3, r0
 800255c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800255e:	7dfb      	ldrb	r3, [r7, #23]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d16d      	bne.n	8002640 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a3a      	ldr	r2, [pc, #232]	; (8002668 <HAL_ADC_Start_DMA+0x17c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d009      	beq.n	8002596 <HAL_ADC_Start_DMA+0xaa>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a3b      	ldr	r2, [pc, #236]	; (8002674 <HAL_ADC_Start_DMA+0x188>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d002      	beq.n	8002592 <HAL_ADC_Start_DMA+0xa6>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	e003      	b.n	800259a <HAL_ADC_Start_DMA+0xae>
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_ADC_Start_DMA+0x18c>)
 8002594:	e001      	b.n	800259a <HAL_ADC_Start_DMA+0xae>
 8002596:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	4293      	cmp	r3, r2
 80025a0:	d002      	beq.n	80025a8 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c4:	f023 0206 	bic.w	r2, r3, #6
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	661a      	str	r2, [r3, #96]	; 0x60
 80025cc:	e002      	b.n	80025d4 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	4a28      	ldr	r2, [pc, #160]	; (800267c <HAL_ADC_Start_DMA+0x190>)
 80025da:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	4a27      	ldr	r2, [pc, #156]	; (8002680 <HAL_ADC_Start_DMA+0x194>)
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	4a26      	ldr	r2, [pc, #152]	; (8002684 <HAL_ADC_Start_DMA+0x198>)
 80025ea:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	221c      	movs	r2, #28
 80025f2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0210 	orr.w	r2, r2, #16
 800260a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3340      	adds	r3, #64	; 0x40
 8002626:	4619      	mov	r1, r3
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f001 fb4c 	bl	8003cc8 <HAL_DMA_Start_IT>
 8002630:	4603      	mov	r3, r0
 8002632:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fd01 	bl	8002040 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800263e:	e00d      	b.n	800265c <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002648:	e008      	b.n	800265c <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002656:	e001      	b.n	800265c <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002658:	2302      	movs	r3, #2
 800265a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800265c:	7dfb      	ldrb	r3, [r7, #23]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	50000100 	.word	0x50000100
 800266c:	50000300 	.word	0x50000300
 8002670:	50000700 	.word	0x50000700
 8002674:	50000500 	.word	0x50000500
 8002678:	50000400 	.word	0x50000400
 800267c:	080036ad 	.word	0x080036ad
 8002680:	08003785 	.word	0x08003785
 8002684:	080037a1 	.word	0x080037a1

08002688 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ac:	d004      	beq.n	80026b8 <HAL_ADC_IRQHandler+0x30>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a95      	ldr	r2, [pc, #596]	; (8002908 <HAL_ADC_IRQHandler+0x280>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_IRQHandler+0x34>
 80026b8:	4b94      	ldr	r3, [pc, #592]	; (800290c <HAL_ADC_IRQHandler+0x284>)
 80026ba:	e000      	b.n	80026be <HAL_ADC_IRQHandler+0x36>
 80026bc:	4b94      	ldr	r3, [pc, #592]	; (8002910 <HAL_ADC_IRQHandler+0x288>)
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fc06 	bl	8001ed0 <LL_ADC_GetMultimode>
 80026c4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d017      	beq.n	8002700 <HAL_ADC_IRQHandler+0x78>
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d012      	beq.n	8002700 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d105      	bne.n	80026f2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ea:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f001 f926 	bl	8003944 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2202      	movs	r2, #2
 80026fe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	d004      	beq.n	8002714 <HAL_ADC_IRQHandler+0x8c>
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10b      	bne.n	800272c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8094 	beq.w	8002848 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 808e 	beq.w	8002848 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	d105      	bne.n	8002744 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fb1f 	bl	8001d8c <LL_ADC_REG_IsTriggerSourceSWStart>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d072      	beq.n	800283a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a6b      	ldr	r2, [pc, #428]	; (8002908 <HAL_ADC_IRQHandler+0x280>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d009      	beq.n	8002772 <HAL_ADC_IRQHandler+0xea>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6c      	ldr	r2, [pc, #432]	; (8002914 <HAL_ADC_IRQHandler+0x28c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d002      	beq.n	800276e <HAL_ADC_IRQHandler+0xe6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	e003      	b.n	8002776 <HAL_ADC_IRQHandler+0xee>
 800276e:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <HAL_ADC_IRQHandler+0x290>)
 8002770:	e001      	b.n	8002776 <HAL_ADC_IRQHandler+0xee>
 8002772:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	4293      	cmp	r3, r2
 800277c:	d008      	beq.n	8002790 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b05      	cmp	r3, #5
 8002788:	d002      	beq.n	8002790 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b09      	cmp	r3, #9
 800278e:	d104      	bne.n	800279a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	623b      	str	r3, [r7, #32]
 8002798:	e014      	b.n	80027c4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a5a      	ldr	r2, [pc, #360]	; (8002908 <HAL_ADC_IRQHandler+0x280>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d009      	beq.n	80027b8 <HAL_ADC_IRQHandler+0x130>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a5a      	ldr	r2, [pc, #360]	; (8002914 <HAL_ADC_IRQHandler+0x28c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d002      	beq.n	80027b4 <HAL_ADC_IRQHandler+0x12c>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	e003      	b.n	80027bc <HAL_ADC_IRQHandler+0x134>
 80027b4:	4b58      	ldr	r3, [pc, #352]	; (8002918 <HAL_ADC_IRQHandler+0x290>)
 80027b6:	e001      	b.n	80027bc <HAL_ADC_IRQHandler+0x134>
 80027b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027bc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d135      	bne.n	800283a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d12e      	bne.n	800283a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fc55 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d11a      	bne.n	8002822 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 020c 	bic.w	r2, r2, #12
 80027fa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d112      	bne.n	800283a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002820:	e00b      	b.n	800283a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	f043 0210 	orr.w	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe fd94 	bl	8001368 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	220c      	movs	r2, #12
 8002846:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <HAL_ADC_IRQHandler+0x1d4>
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10b      	bne.n	8002874 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80b2 	beq.w	80029cc <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80ac 	beq.w	80029cc <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	d105      	bne.n	800288c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff faba 	bl	8001e0a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002896:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fa75 	bl	8001d8c <LL_ADC_REG_IsTriggerSourceSWStart>
 80028a2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a17      	ldr	r2, [pc, #92]	; (8002908 <HAL_ADC_IRQHandler+0x280>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_ADC_IRQHandler+0x23a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a18      	ldr	r2, [pc, #96]	; (8002914 <HAL_ADC_IRQHandler+0x28c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d002      	beq.n	80028be <HAL_ADC_IRQHandler+0x236>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	e003      	b.n	80028c6 <HAL_ADC_IRQHandler+0x23e>
 80028be:	4b16      	ldr	r3, [pc, #88]	; (8002918 <HAL_ADC_IRQHandler+0x290>)
 80028c0:	e001      	b.n	80028c6 <HAL_ADC_IRQHandler+0x23e>
 80028c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d008      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d002      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b07      	cmp	r3, #7
 80028de:	d104      	bne.n	80028ea <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	623b      	str	r3, [r7, #32]
 80028e8:	e01e      	b.n	8002928 <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a06      	ldr	r2, [pc, #24]	; (8002908 <HAL_ADC_IRQHandler+0x280>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d013      	beq.n	800291c <HAL_ADC_IRQHandler+0x294>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a06      	ldr	r2, [pc, #24]	; (8002914 <HAL_ADC_IRQHandler+0x28c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d002      	beq.n	8002904 <HAL_ADC_IRQHandler+0x27c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	e00d      	b.n	8002920 <HAL_ADC_IRQHandler+0x298>
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <HAL_ADC_IRQHandler+0x290>)
 8002906:	e00b      	b.n	8002920 <HAL_ADC_IRQHandler+0x298>
 8002908:	50000100 	.word	0x50000100
 800290c:	50000300 	.word	0x50000300
 8002910:	50000700 	.word	0x50000700
 8002914:	50000500 	.word	0x50000500
 8002918:	50000400 	.word	0x50000400
 800291c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002920:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10c      	bne.n	8002948 <HAL_ADC_IRQHandler+0x2c0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002934:	2b00      	cmp	r3, #0
 8002936:	d142      	bne.n	80029be <HAL_ADC_IRQHandler+0x336>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d03f      	beq.n	80029be <HAL_ADC_IRQHandler+0x336>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002944:	2b00      	cmp	r3, #0
 8002946:	d13a      	bne.n	80029be <HAL_ADC_IRQHandler+0x336>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	d133      	bne.n	80029be <HAL_ADC_IRQHandler+0x336>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d12e      	bne.n	80029be <HAL_ADC_IRQHandler+0x336>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fbba 	bl	80020de <LL_ADC_INJ_IsConversionOngoing>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d11a      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x31e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800297e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d112      	bne.n	80029be <HAL_ADC_IRQHandler+0x336>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	f043 0201 	orr.w	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80029a4:	e00b      	b.n	80029be <HAL_ADC_IRQHandler+0x336>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	f043 0210 	orr.w	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 ff98 	bl	80038f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2260      	movs	r2, #96	; 0x60
 80029ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d011      	beq.n	80029fa <HAL_ADC_IRQHandler+0x372>
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00c      	beq.n	80029fa <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7fe fcf7 	bl	80013e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d012      	beq.n	8002a2a <HAL_ADC_IRQHandler+0x3a2>
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 ff7e 	bl	800391c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d012      	beq.n	8002a5a <HAL_ADC_IRQHandler+0x3d2>
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 ff70 	bl	8003930 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d043      	beq.n	8002aec <HAL_ADC_IRQHandler+0x464>
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d03e      	beq.n	8002aec <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 8002a76:	2301      	movs	r3, #1
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	e021      	b.n	8002ac0 <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d015      	beq.n	8002aae <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a8a:	d004      	beq.n	8002a96 <HAL_ADC_IRQHandler+0x40e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a27      	ldr	r2, [pc, #156]	; (8002b30 <HAL_ADC_IRQHandler+0x4a8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_IRQHandler+0x412>
 8002a96:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <HAL_ADC_IRQHandler+0x4ac>)
 8002a98:	e000      	b.n	8002a9c <HAL_ADC_IRQHandler+0x414>
 8002a9a:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <HAL_ADC_IRQHandler+0x4b0>)
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fa25 	bl	8001eec <LL_ADC_GetMultiDMATransfer>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00b      	beq.n	8002ac0 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8002aac:	e008      	b.n	8002ac0 <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8002abc:	2301      	movs	r3, #1
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad6:	f043 0202 	orr.w	r2, r3, #2
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f836 	bl	8002b50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2210      	movs	r2, #16
 8002aea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d018      	beq.n	8002b28 <HAL_ADC_IRQHandler+0x4a0>
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b10:	f043 0208 	orr.w	r2, r3, #8
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b20:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fef0 	bl	8003908 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002b28:	bf00      	nop
 8002b2a:	3728      	adds	r7, #40	; 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	50000100 	.word	0x50000100
 8002b34:	50000300 	.word	0x50000300
 8002b38:	50000700 	.word	0x50000700

08002b3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b0b6      	sub	sp, #216	; 0xd8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d102      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x24>
 8002b82:	2302      	movs	r3, #2
 8002b84:	f000 bc12 	b.w	80033ac <HAL_ADC_ConfigChannel+0x848>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fa7b 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f040 83f2 	bne.w	8003386 <HAL_ADC_ConfigChannel+0x822>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f7ff f8ff 	bl	8001db2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fa69 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 8002bbe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fa89 	bl	80020de <LL_ADC_INJ_IsConversionOngoing>
 8002bcc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f040 81d9 	bne.w	8002f8c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 81d4 	bne.w	8002f8c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bec:	d10f      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f7ff f919 	bl	8001e30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff f8ad 	bl	8001d66 <LL_ADC_SetSamplingTimeCommonConfig>
 8002c0c:	e00e      	b.n	8002c2c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6819      	ldr	r1, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f7ff f908 	bl	8001e30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2100      	movs	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f89d 	bl	8001d66 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	08db      	lsrs	r3, r3, #3
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d022      	beq.n	8002c94 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6919      	ldr	r1, [r3, #16]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c5e:	f7fe fff7 	bl	8001c50 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6919      	ldr	r1, [r3, #16]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f7ff f843 	bl	8001cfa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6919      	ldr	r1, [r3, #16]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	7f1b      	ldrb	r3, [r3, #28]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d102      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x126>
 8002c84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c88:	e000      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x128>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f7ff f84f 	bl	8001d30 <LL_ADC_SetOffsetSaturation>
 8002c92:	e17b      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fffc 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x15c>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe fff1 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	f003 021f 	and.w	r2, r3, #31
 8002cbe:	e01e      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x19a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe ffe6 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ce2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ce6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e004      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d105      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x1b2>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0e9b      	lsrs	r3, r3, #26
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	e018      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x1e4>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e004      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d106      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe ffb5 	bl	8001cc4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2101      	movs	r1, #1
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe ff99 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10a      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x222>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe ff8e 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	0e9b      	lsrs	r3, r3, #26
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	e01e      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x260>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe ff83 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002da4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e004      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002db8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dbc:	fab3 f383 	clz	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d105      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x278>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0e9b      	lsrs	r3, r3, #26
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	e018      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x2aa>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e004      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d106      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe ff52 	bl	8001cc4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2102      	movs	r1, #2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe ff36 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x2e8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe ff2b 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	f003 021f 	and.w	r2, r3, #31
 8002e4a:	e01e      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x326>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2102      	movs	r1, #2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe ff20 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002e7a:	2320      	movs	r3, #32
 8002e7c:	e004      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x33e>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	e016      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x36c>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	e004      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d106      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2102      	movs	r1, #2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fef1 	bl	8001cc4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2103      	movs	r1, #3
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe fed5 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x3aa>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2103      	movs	r1, #3
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe feca 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002f04:	4603      	mov	r3, r0
 8002f06:	0e9b      	lsrs	r3, r3, #26
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	e017      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x3da>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2103      	movs	r1, #3
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe febf 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f28:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002f30:	2320      	movs	r3, #32
 8002f32:	e003      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x3f2>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	0e9b      	lsrs	r3, r3, #26
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	e011      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x416>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f66:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f6e:	2320      	movs	r3, #32
 8002f70:	e003      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f74:	fab3 f383 	clz	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d106      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2200      	movs	r2, #0
 8002f84:	2103      	movs	r1, #3
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fe9c 	bl	8001cc4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff f82f 	bl	8001ff4 <LL_ADC_IsEnabled>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f040 813d 	bne.w	8003218 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f7fe ff6c 	bl	8001e88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4aa2      	ldr	r2, [pc, #648]	; (8003240 <HAL_ADC_ConfigChannel+0x6dc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	f040 812e 	bne.w	8003218 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x480>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	0e9b      	lsrs	r3, r3, #26
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	2b09      	cmp	r3, #9
 8002fda:	bf94      	ite	ls
 8002fdc:	2301      	movls	r3, #1
 8002fde:	2300      	movhi	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e019      	b.n	8003018 <HAL_ADC_ConfigChannel+0x4b4>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	e003      	b.n	8003008 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	3301      	adds	r3, #1
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	2b09      	cmp	r3, #9
 8003010:	bf94      	ite	ls
 8003012:	2301      	movls	r3, #1
 8003014:	2300      	movhi	r3, #0
 8003016:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003018:	2b00      	cmp	r3, #0
 800301a:	d079      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003024:	2b00      	cmp	r3, #0
 8003026:	d107      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x4d4>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	3301      	adds	r3, #1
 8003030:	069b      	lsls	r3, r3, #26
 8003032:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003036:	e015      	b.n	8003064 <HAL_ADC_ConfigChannel+0x500>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003048:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800304a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003050:	2320      	movs	r3, #32
 8003052:	e003      	b.n	800305c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	3301      	adds	r3, #1
 800305e:	069b      	lsls	r3, r3, #26
 8003060:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x520>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	3301      	adds	r3, #1
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f303 	lsl.w	r3, r1, r3
 8003082:	e017      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x550>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003094:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800309c:	2320      	movs	r3, #32
 800309e:	e003      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80030a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	2101      	movs	r1, #1
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	ea42 0103 	orr.w	r1, r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <HAL_ADC_ConfigChannel+0x576>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	0e9b      	lsrs	r3, r3, #26
 80030ca:	3301      	adds	r3, #1
 80030cc:	f003 021f 	and.w	r2, r3, #31
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	051b      	lsls	r3, r3, #20
 80030d8:	e018      	b.n	800310c <HAL_ADC_ConfigChannel+0x5a8>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80030ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80030f2:	2320      	movs	r3, #32
 80030f4:	e003      	b.n	80030fe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80030f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800310c:	430b      	orrs	r3, r1
 800310e:	e07e      	b.n	800320e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003118:	2b00      	cmp	r3, #0
 800311a:	d107      	bne.n	800312c <HAL_ADC_ConfigChannel+0x5c8>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	0e9b      	lsrs	r3, r3, #26
 8003122:	3301      	adds	r3, #1
 8003124:	069b      	lsls	r3, r3, #26
 8003126:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800312a:	e015      	b.n	8003158 <HAL_ADC_ConfigChannel+0x5f4>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003144:	2320      	movs	r3, #32
 8003146:	e003      	b.n	8003150 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	3301      	adds	r3, #1
 8003152:	069b      	lsls	r3, r3, #26
 8003154:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003160:	2b00      	cmp	r3, #0
 8003162:	d109      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x614>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0e9b      	lsrs	r3, r3, #26
 800316a:	3301      	adds	r3, #1
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	2101      	movs	r1, #1
 8003172:	fa01 f303 	lsl.w	r3, r1, r3
 8003176:	e017      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x644>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	61fb      	str	r3, [r7, #28]
  return result;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003190:	2320      	movs	r3, #32
 8003192:	e003      	b.n	800319c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	3301      	adds	r3, #1
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	2101      	movs	r1, #1
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	ea42 0103 	orr.w	r1, r2, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10d      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x670>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	0e9b      	lsrs	r3, r3, #26
 80031be:	3301      	adds	r3, #1
 80031c0:	f003 021f 	and.w	r2, r3, #31
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	3b1e      	subs	r3, #30
 80031cc:	051b      	lsls	r3, r3, #20
 80031ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031d2:	e01b      	b.n	800320c <HAL_ADC_ConfigChannel+0x6a8>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	613b      	str	r3, [r7, #16]
  return result;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80031ec:	2320      	movs	r3, #32
 80031ee:	e003      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	3301      	adds	r3, #1
 80031fa:	f003 021f 	and.w	r2, r3, #31
 80031fe:	4613      	mov	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4413      	add	r3, r2
 8003204:	3b1e      	subs	r3, #30
 8003206:	051b      	lsls	r3, r3, #20
 8003208:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800320c:	430b      	orrs	r3, r1
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	6892      	ldr	r2, [r2, #8]
 8003212:	4619      	mov	r1, r3
 8003214:	f7fe fe0c 	bl	8001e30 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_ADC_ConfigChannel+0x6e0>)
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80bd 	beq.w	80033a0 <HAL_ADC_ConfigChannel+0x83c>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800322e:	d004      	beq.n	800323a <HAL_ADC_ConfigChannel+0x6d6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a04      	ldr	r2, [pc, #16]	; (8003248 <HAL_ADC_ConfigChannel+0x6e4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d10a      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x6ec>
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <HAL_ADC_ConfigChannel+0x6e8>)
 800323c:	e009      	b.n	8003252 <HAL_ADC_ConfigChannel+0x6ee>
 800323e:	bf00      	nop
 8003240:	407f0000 	.word	0x407f0000
 8003244:	80080000 	.word	0x80080000
 8003248:	50000100 	.word	0x50000100
 800324c:	50000300 	.word	0x50000300
 8003250:	4b58      	ldr	r3, [pc, #352]	; (80033b4 <HAL_ADC_ConfigChannel+0x850>)
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fcee 	bl	8001c34 <LL_ADC_GetCommonPathInternalCh>
 8003258:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a55      	ldr	r2, [pc, #340]	; (80033b8 <HAL_ADC_ConfigChannel+0x854>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <HAL_ADC_ConfigChannel+0x70c>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a54      	ldr	r2, [pc, #336]	; (80033bc <HAL_ADC_ConfigChannel+0x858>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d139      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x780>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003270:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d133      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003284:	d005      	beq.n	8003292 <HAL_ADC_ConfigChannel+0x72e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a4d      	ldr	r2, [pc, #308]	; (80033c0 <HAL_ADC_ConfigChannel+0x85c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	f040 8084 	bne.w	800339a <HAL_ADC_ConfigChannel+0x836>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800329a:	d004      	beq.n	80032a6 <HAL_ADC_ConfigChannel+0x742>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a48      	ldr	r2, [pc, #288]	; (80033c4 <HAL_ADC_ConfigChannel+0x860>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d101      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x746>
 80032a6:	4a48      	ldr	r2, [pc, #288]	; (80033c8 <HAL_ADC_ConfigChannel+0x864>)
 80032a8:	e000      	b.n	80032ac <HAL_ADC_ConfigChannel+0x748>
 80032aa:	4a42      	ldr	r2, [pc, #264]	; (80033b4 <HAL_ADC_ConfigChannel+0x850>)
 80032ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032b4:	4619      	mov	r1, r3
 80032b6:	4610      	mov	r0, r2
 80032b8:	f7fe fca9 	bl	8001c0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80032bc:	4b43      	ldr	r3, [pc, #268]	; (80033cc <HAL_ADC_ConfigChannel+0x868>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	099b      	lsrs	r3, r3, #6
 80032c2:	4a43      	ldr	r2, [pc, #268]	; (80033d0 <HAL_ADC_ConfigChannel+0x86c>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	099a      	lsrs	r2, r3, #6
 80032ca:	4613      	mov	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032d4:	e002      	b.n	80032dc <HAL_ADC_ConfigChannel+0x778>
          {
            wait_loop_index--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3b01      	subs	r3, #1
 80032da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f9      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x772>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032e2:	e05a      	b.n	800339a <HAL_ADC_ConfigChannel+0x836>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a3a      	ldr	r2, [pc, #232]	; (80033d4 <HAL_ADC_ConfigChannel+0x870>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d125      	bne.n	800333a <HAL_ADC_ConfigChannel+0x7d6>
 80032ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d11f      	bne.n	800333a <HAL_ADC_ConfigChannel+0x7d6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a31      	ldr	r2, [pc, #196]	; (80033c4 <HAL_ADC_ConfigChannel+0x860>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d104      	bne.n	800330e <HAL_ADC_ConfigChannel+0x7aa>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a33      	ldr	r2, [pc, #204]	; (80033d8 <HAL_ADC_ConfigChannel+0x874>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d047      	beq.n	800339e <HAL_ADC_ConfigChannel+0x83a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003316:	d004      	beq.n	8003322 <HAL_ADC_ConfigChannel+0x7be>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a29      	ldr	r2, [pc, #164]	; (80033c4 <HAL_ADC_ConfigChannel+0x860>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x7c2>
 8003322:	4a29      	ldr	r2, [pc, #164]	; (80033c8 <HAL_ADC_ConfigChannel+0x864>)
 8003324:	e000      	b.n	8003328 <HAL_ADC_ConfigChannel+0x7c4>
 8003326:	4a23      	ldr	r2, [pc, #140]	; (80033b4 <HAL_ADC_ConfigChannel+0x850>)
 8003328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800332c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003330:	4619      	mov	r1, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f7fe fc6b 	bl	8001c0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003338:	e031      	b.n	800339e <HAL_ADC_ConfigChannel+0x83a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a27      	ldr	r2, [pc, #156]	; (80033dc <HAL_ADC_ConfigChannel+0x878>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d12d      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x83c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d127      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x83c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <HAL_ADC_ConfigChannel+0x860>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d022      	beq.n	80033a0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003362:	d004      	beq.n	800336e <HAL_ADC_ConfigChannel+0x80a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a16      	ldr	r2, [pc, #88]	; (80033c4 <HAL_ADC_ConfigChannel+0x860>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d101      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x80e>
 800336e:	4a16      	ldr	r2, [pc, #88]	; (80033c8 <HAL_ADC_ConfigChannel+0x864>)
 8003370:	e000      	b.n	8003374 <HAL_ADC_ConfigChannel+0x810>
 8003372:	4a10      	ldr	r2, [pc, #64]	; (80033b4 <HAL_ADC_ConfigChannel+0x850>)
 8003374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800337c:	4619      	mov	r1, r3
 800337e:	4610      	mov	r0, r2
 8003380:	f7fe fc45 	bl	8001c0e <LL_ADC_SetCommonPathInternalCh>
 8003384:	e00c      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x83c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003398:	e002      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800339a:	bf00      	nop
 800339c:	e000      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800339e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80033a8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	37d8      	adds	r7, #216	; 0xd8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	50000700 	.word	0x50000700
 80033b8:	c3210000 	.word	0xc3210000
 80033bc:	90c00010 	.word	0x90c00010
 80033c0:	50000600 	.word	0x50000600
 80033c4:	50000100 	.word	0x50000100
 80033c8:	50000300 	.word	0x50000300
 80033cc:	20000000 	.word	0x20000000
 80033d0:	053e2d63 	.word	0x053e2d63
 80033d4:	c7520000 	.word	0xc7520000
 80033d8:	50000500 	.word	0x50000500
 80033dc:	cb840000 	.word	0xcb840000

080033e0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fe4a 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 80033fc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fe6b 	bl	80020de <LL_ADC_INJ_IsConversionOngoing>
 8003408:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d103      	bne.n	8003418 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 8091 	beq.w	800353a <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d02a      	beq.n	800347c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	7f5b      	ldrb	r3, [r3, #29]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d126      	bne.n	800347c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7f1b      	ldrb	r3, [r3, #28]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d122      	bne.n	800347c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003436:	2301      	movs	r3, #1
 8003438:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800343a:	e014      	b.n	8003466 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	4a41      	ldr	r2, [pc, #260]	; (8003544 <ADC_ConversionStop+0x164>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d90d      	bls.n	8003460 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	f043 0210 	orr.w	r2, r3, #16
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e06d      	b.n	800353c <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	3301      	adds	r3, #1
 8003464:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	d1e3      	bne.n	800343c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2240      	movs	r2, #64	; 0x40
 800347a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d014      	beq.n	80034ac <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fe02 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00c      	beq.n	80034ac <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fdbf 	bl	800201a <LL_ADC_IsDisableOngoing>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d104      	bne.n	80034ac <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe fdde 	bl	8002068 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d014      	beq.n	80034dc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe fe11 	bl	80020de <LL_ADC_INJ_IsConversionOngoing>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00c      	beq.n	80034dc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe fda7 	bl	800201a <LL_ADC_IsDisableOngoing>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fded 	bl	80020b6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d005      	beq.n	80034ee <ADC_ConversionStop+0x10e>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d105      	bne.n	80034f4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80034e8:	230c      	movs	r3, #12
 80034ea:	617b      	str	r3, [r7, #20]
        break;
 80034ec:	e005      	b.n	80034fa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80034ee:	2308      	movs	r3, #8
 80034f0:	617b      	str	r3, [r7, #20]
        break;
 80034f2:	e002      	b.n	80034fa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80034f4:	2304      	movs	r3, #4
 80034f6:	617b      	str	r3, [r7, #20]
        break;
 80034f8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80034fa:	f7fe fb47 	bl	8001b8c <HAL_GetTick>
 80034fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003500:	e014      	b.n	800352c <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003502:	f7fe fb43 	bl	8001b8c <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b05      	cmp	r3, #5
 800350e:	d90d      	bls.n	800352c <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	f043 0210 	orr.w	r2, r3, #16
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e007      	b.n	800353c <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e3      	bne.n	8003502 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3720      	adds	r7, #32
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	a33fffff 	.word	0xa33fffff

08003548 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fd4d 	bl	8001ff4 <LL_ADC_IsEnabled>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d146      	bne.n	80035ee <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <ADC_Enable+0xb0>)
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003572:	f043 0210 	orr.w	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e032      	b.n	80035f0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe fd08 	bl	8001fa4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003594:	f7fe fafa 	bl	8001b8c <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800359a:	e021      	b.n	80035e0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe fd27 	bl	8001ff4 <LL_ADC_IsEnabled>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d104      	bne.n	80035b6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe fcf7 	bl	8001fa4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035b6:	f7fe fae9 	bl	8001b8c <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d90d      	bls.n	80035e0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c8:	f043 0210 	orr.w	r2, r3, #16
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e007      	b.n	80035f0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d1d6      	bne.n	800359c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	8000003f 	.word	0x8000003f

080035fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f7fe fd06 	bl	800201a <LL_ADC_IsDisableOngoing>
 800360e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7fe fced 	bl	8001ff4 <LL_ADC_IsEnabled>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d040      	beq.n	80036a2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d13d      	bne.n	80036a2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 030d 	and.w	r3, r3, #13
 8003630:	2b01      	cmp	r3, #1
 8003632:	d10c      	bne.n	800364e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe fcc7 	bl	8001fcc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2203      	movs	r2, #3
 8003644:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003646:	f7fe faa1 	bl	8001b8c <HAL_GetTick>
 800364a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800364c:	e022      	b.n	8003694 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	f043 0210 	orr.w	r2, r3, #16
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365e:	f043 0201 	orr.w	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e01c      	b.n	80036a4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800366a:	f7fe fa8f 	bl	8001b8c <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d90d      	bls.n	8003694 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	f043 0210 	orr.w	r2, r3, #16
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e007      	b.n	80036a4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e3      	bne.n	800366a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d14b      	bne.n	800375e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d021      	beq.n	8003724 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fe fb51 	bl	8001d8c <LL_ADC_REG_IsTriggerSourceSWStart>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d032      	beq.n	8003756 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d12b      	bne.n	8003756 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d11f      	bne.n	8003756 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371a:	f043 0201 	orr.w	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	65da      	str	r2, [r3, #92]	; 0x5c
 8003722:	e018      	b.n	8003756 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d111      	bne.n	8003756 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d105      	bne.n	8003756 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7fd fe06 	bl	8001368 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800375c:	e00e      	b.n	800377c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f7ff f9f0 	bl	8002b50 <HAL_ADC_ErrorCallback>
}
 8003770:	e004      	b.n	800377c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f7ff f9d2 	bl	8002b3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003798:	bf00      	nop
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037be:	f043 0204 	orr.w	r2, r3, #4
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7ff f9c2 	bl	8002b50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <LL_ADC_StartCalibration>:
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80037e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	609a      	str	r2, [r3, #8]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_ADC_IsCalibrationOnGoing>:
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800381a:	d101      	bne.n	8003820 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800383a:	2300      	movs	r3, #0
 800383c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_ADCEx_Calibration_Start+0x1c>
 8003848:	2302      	movs	r3, #2
 800384a:	e04d      	b.n	80038e8 <HAL_ADCEx_Calibration_Start+0xb8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff fed1 	bl	80035fc <ADC_Disable>
 800385a:	4603      	mov	r3, r0
 800385c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d136      	bne.n	80038d2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800386c:	f023 0302 	bic.w	r3, r3, #2
 8003870:	f043 0202 	orr.w	r2, r3, #2
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff ffa8 	bl	80037d4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003884:	e014      	b.n	80038b0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3301      	adds	r3, #1
 800388a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d90d      	bls.n	80038b0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	f023 0312 	bic.w	r3, r3, #18
 800389c:	f043 0210 	orr.w	r2, r3, #16
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e01b      	b.n	80038e8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff ffa6 	bl	8003806 <LL_ADC_IsCalibrationOnGoing>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e2      	bne.n	8003886 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c4:	f023 0303 	bic.w	r3, r3, #3
 80038c8:	f043 0201 	orr.w	r2, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80038d0:	e005      	b.n	80038de <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	f043 0210 	orr.w	r2, r3, #16
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	0004de01 	.word	0x0004de01

080038f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <__NVIC_SetPriorityGrouping+0x44>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003974:	4013      	ands	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800398a:	4a04      	ldr	r2, [pc, #16]	; (800399c <__NVIC_SetPriorityGrouping+0x44>)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	60d3      	str	r3, [r2, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <__NVIC_GetPriorityGrouping+0x18>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	f003 0307 	and.w	r3, r3, #7
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	db0b      	blt.n	80039e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	f003 021f 	and.w	r2, r3, #31
 80039d4:	4907      	ldr	r1, [pc, #28]	; (80039f4 <__NVIC_EnableIRQ+0x38>)
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2001      	movs	r0, #1
 80039de:	fa00 f202 	lsl.w	r2, r0, r2
 80039e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	e000e100 	.word	0xe000e100

080039f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	db0a      	blt.n	8003a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	490c      	ldr	r1, [pc, #48]	; (8003a44 <__NVIC_SetPriority+0x4c>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	0112      	lsls	r2, r2, #4
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a20:	e00a      	b.n	8003a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4908      	ldr	r1, [pc, #32]	; (8003a48 <__NVIC_SetPriority+0x50>)
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	3b04      	subs	r3, #4
 8003a30:	0112      	lsls	r2, r2, #4
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	440b      	add	r3, r1
 8003a36:	761a      	strb	r2, [r3, #24]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000e100 	.word	0xe000e100
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b089      	sub	sp, #36	; 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f1c3 0307 	rsb	r3, r3, #7
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	bf28      	it	cs
 8003a6a:	2304      	movcs	r3, #4
 8003a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3304      	adds	r3, #4
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d902      	bls.n	8003a7c <NVIC_EncodePriority+0x30>
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3b03      	subs	r3, #3
 8003a7a:	e000      	b.n	8003a7e <NVIC_EncodePriority+0x32>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	f04f 32ff 	mov.w	r2, #4294967295
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	401a      	ands	r2, r3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a94:	f04f 31ff 	mov.w	r1, #4294967295
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	43d9      	mvns	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa4:	4313      	orrs	r3, r2
         );
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3724      	adds	r7, #36	; 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ac4:	d301      	bcc.n	8003aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e00f      	b.n	8003aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aca:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <SysTick_Config+0x40>)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ad2:	210f      	movs	r1, #15
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	f7ff ff8e 	bl	80039f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <SysTick_Config+0x40>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ae2:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <SysTick_Config+0x40>)
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	e000e010 	.word	0xe000e010

08003af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ff29 	bl	8003958 <__NVIC_SetPriorityGrouping>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	4603      	mov	r3, r0
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b1c:	f7ff ff40 	bl	80039a0 <__NVIC_GetPriorityGrouping>
 8003b20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	6978      	ldr	r0, [r7, #20]
 8003b28:	f7ff ff90 	bl	8003a4c <NVIC_EncodePriority>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff ff5f 	bl	80039f8 <__NVIC_SetPriority>
}
 8003b3a:	bf00      	nop
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	4603      	mov	r3, r0
 8003b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff33 	bl	80039bc <__NVIC_EnableIRQ>
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff ffa4 	bl	8003ab4 <SysTick_Config>
 8003b6c:	4603      	mov	r3, r0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e08d      	b.n	8003ca6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_DMA_Init+0x138>)
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d80f      	bhi.n	8003bb6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b45      	ldr	r3, [pc, #276]	; (8003cb4 <HAL_DMA_Init+0x13c>)
 8003b9e:	4413      	add	r3, r2
 8003ba0:	4a45      	ldr	r2, [pc, #276]	; (8003cb8 <HAL_DMA_Init+0x140>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	009a      	lsls	r2, r3, #2
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a42      	ldr	r2, [pc, #264]	; (8003cbc <HAL_DMA_Init+0x144>)
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40
 8003bb4:	e00e      	b.n	8003bd4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b40      	ldr	r3, [pc, #256]	; (8003cc0 <HAL_DMA_Init+0x148>)
 8003bbe:	4413      	add	r3, r2
 8003bc0:	4a3d      	ldr	r2, [pc, #244]	; (8003cb8 <HAL_DMA_Init+0x140>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	009a      	lsls	r2, r3, #2
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a3c      	ldr	r2, [pc, #240]	; (8003cc4 <HAL_DMA_Init+0x14c>)
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f9b6 	bl	8003f98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c34:	d102      	bne.n	8003c3c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c50:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d010      	beq.n	8003c7c <HAL_DMA_Init+0x104>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d80c      	bhi.n	8003c7c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f9d6 	bl	8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	e008      	b.n	8003c8e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40020407 	.word	0x40020407
 8003cb4:	bffdfff8 	.word	0xbffdfff8
 8003cb8:	cccccccd 	.word	0xcccccccd
 8003cbc:	40020000 	.word	0x40020000
 8003cc0:	bffdfbf8 	.word	0xbffdfbf8
 8003cc4:	40020400 	.word	0x40020400

08003cc8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_DMA_Start_IT+0x20>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e066      	b.n	8003db6 <HAL_DMA_Start_IT+0xee>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d155      	bne.n	8003da8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f8fb 	bl	8003f1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 020e 	orr.w	r2, r2, #14
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e00f      	b.n	8003d60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0204 	bic.w	r2, r2, #4
 8003d4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 020a 	orr.w	r2, r2, #10
 8003d5e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d7c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d007      	beq.n	8003d96 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d94:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e005      	b.n	8003db4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
 8003db2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2204      	movs	r2, #4
 8003de0:	409a      	lsls	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d026      	beq.n	8003e38 <HAL_DMA_IRQHandler+0x7a>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d021      	beq.n	8003e38 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d107      	bne.n	8003e12 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0204 	bic.w	r2, r2, #4
 8003e10:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	f003 021f 	and.w	r2, r3, #31
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	2104      	movs	r1, #4
 8003e20:	fa01 f202 	lsl.w	r2, r1, r2
 8003e24:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d071      	beq.n	8003f12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e36:	e06c      	b.n	8003f12 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	2202      	movs	r2, #2
 8003e42:	409a      	lsls	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d02e      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d029      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10b      	bne.n	8003e7c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 020a 	bic.w	r2, r2, #10
 8003e72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e80:	f003 021f 	and.w	r2, r3, #31
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	2102      	movs	r1, #2
 8003e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d038      	beq.n	8003f12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ea8:	e033      	b.n	8003f12 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d02a      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d025      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 020e 	bic.w	r2, r2, #14
 8003ed6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003edc:	f003 021f 	and.w	r2, r3, #31
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d004      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f12:	bf00      	nop
 8003f14:	bf00      	nop
}
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f32:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d004      	beq.n	8003f46 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f44:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	f003 021f 	and.w	r2, r3, #31
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	2101      	movs	r1, #1
 8003f54:	fa01 f202 	lsl.w	r2, r1, r2
 8003f58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d108      	bne.n	8003f7c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f7a:	e007      	b.n	8003f8c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	60da      	str	r2, [r3, #12]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b16      	ldr	r3, [pc, #88]	; (8004000 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d802      	bhi.n	8003fb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003fac:	4b15      	ldr	r3, [pc, #84]	; (8004004 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e001      	b.n	8003fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003fb2:	4b15      	ldr	r3, [pc, #84]	; (8004008 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003fb4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	3b08      	subs	r3, #8
 8003fc2:	4a12      	ldr	r2, [pc, #72]	; (800400c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	009a      	lsls	r2, r3, #2
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	461a      	mov	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a0b      	ldr	r2, [pc, #44]	; (8004010 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003fe2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 031f 	and.w	r3, r3, #31
 8003fea:	2201      	movs	r2, #1
 8003fec:	409a      	lsls	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40020407 	.word	0x40020407
 8004004:	40020800 	.word	0x40020800
 8004008:	40020820 	.word	0x40020820
 800400c:	cccccccd 	.word	0xcccccccd
 8004010:	40020880 	.word	0x40020880

08004014 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	461a      	mov	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a08      	ldr	r2, [pc, #32]	; (8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004036:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3b01      	subs	r3, #1
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	2201      	movs	r2, #1
 8004042:	409a      	lsls	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	1000823f 	.word	0x1000823f
 8004058:	40020940 	.word	0x40020940

0800405c <HAL_FLASH_IRQHandler>:
/**
  * @brief  Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8004062:	4b66      	ldr	r3, [pc, #408]	; (80041fc <HAL_FLASH_IRQHandler+0x1a0>)
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	4a65      	ldr	r2, [pc, #404]	; (80041fc <HAL_FLASH_IRQHandler+0x1a0>)
 8004068:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800406c:	f023 0303 	bic.w	r3, r3, #3
 8004070:	6153      	str	r3, [r2, #20]
#if defined (FLASH_OPTR_DBANK)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8004072:	4b62      	ldr	r3, [pc, #392]	; (80041fc <HAL_FLASH_IRQHandler+0x1a0>)
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	4a61      	ldr	r2, [pc, #388]	; (80041fc <HAL_FLASH_IRQHandler+0x1a0>)
 8004078:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800407c:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 800407e:	4b60      	ldr	r3, [pc, #384]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 8004080:	7a1b      	ldrb	r3, [r3, #8]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b04      	cmp	r3, #4
 8004086:	d105      	bne.n	8004094 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004088:	4b5c      	ldr	r3, [pc, #368]	; (80041fc <HAL_FLASH_IRQHandler+0x1a0>)
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	4a5b      	ldr	r2, [pc, #364]	; (80041fc <HAL_FLASH_IRQHandler+0x1a0>)
 800408e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004092:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004094:	4b59      	ldr	r3, [pc, #356]	; (80041fc <HAL_FLASH_IRQHandler+0x1a0>)
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800409c:	4013      	ands	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d041      	beq.n	800412a <HAL_FLASH_IRQHandler+0xce>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80040a6:	4b56      	ldr	r3, [pc, #344]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	4a54      	ldr	r2, [pc, #336]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 80040b0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <HAL_FLASH_IRQHandler+0x70>
 80040bc:	4b4f      	ldr	r3, [pc, #316]	; (80041fc <HAL_FLASH_IRQHandler+0x1a0>)
 80040be:	699a      	ldr	r2, [r3, #24]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80040c6:	494d      	ldr	r1, [pc, #308]	; (80041fc <HAL_FLASH_IRQHandler+0x1a0>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	618b      	str	r3, [r1, #24]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d004      	beq.n	80040e0 <HAL_FLASH_IRQHandler+0x84>
 80040d6:	4a49      	ldr	r2, [pc, #292]	; (80041fc <HAL_FLASH_IRQHandler+0x1a0>)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80040de:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 80040e0:	f000 f8e8 	bl	80042b4 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 80040e4:	4b46      	ldr	r3, [pc, #280]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 80040e6:	7a1b      	ldrb	r3, [r3, #8]
 80040e8:	72fb      	strb	r3, [r7, #11]
    if (procedure == FLASH_PROC_PAGE_ERASE)
 80040ea:	7afb      	ldrb	r3, [r7, #11]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d105      	bne.n	80040fc <HAL_FLASH_IRQHandler+0xa0>
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Page);
 80040f0:	4b43      	ldr	r3, [pc, #268]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 f88f 	bl	8004218 <HAL_FLASH_OperationErrorCallback>
 80040fa:	e013      	b.n	8004124 <HAL_FLASH_IRQHandler+0xc8>
    }
    else if (procedure == FLASH_PROC_MASS_ERASE)
 80040fc:	7afb      	ldrb	r3, [r7, #11]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d105      	bne.n	800410e <HAL_FLASH_IRQHandler+0xb2>
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8004102:	4b3f      	ldr	r3, [pc, #252]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f886 	bl	8004218 <HAL_FLASH_OperationErrorCallback>
 800410c:	e00a      	b.n	8004124 <HAL_FLASH_IRQHandler+0xc8>
    }
    else if ((procedure == FLASH_PROC_PROGRAM) ||
 800410e:	7afb      	ldrb	r3, [r7, #11]
 8004110:	2b03      	cmp	r3, #3
 8004112:	d002      	beq.n	800411a <HAL_FLASH_IRQHandler+0xbe>
 8004114:	7afb      	ldrb	r3, [r7, #11]
 8004116:	2b04      	cmp	r3, #4
 8004118:	d104      	bne.n	8004124 <HAL_FLASH_IRQHandler+0xc8>
             (procedure == FLASH_PROC_PROGRAM_LAST))
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Address);
 800411a:	4b39      	ldr	r3, [pc, #228]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f87a 	bl	8004218 <HAL_FLASH_OperationErrorCallback>
    {
      /* Nothing to do */
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004124:	4b36      	ldr	r3, [pc, #216]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 8004126:	2200      	movs	r2, #0
 8004128:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800412a:	4b34      	ldr	r3, [pc, #208]	; (80041fc <HAL_FLASH_IRQHandler+0x1a0>)
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	d14f      	bne.n	80041d6 <HAL_FLASH_IRQHandler+0x17a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004136:	4b31      	ldr	r3, [pc, #196]	; (80041fc <HAL_FLASH_IRQHandler+0x1a0>)
 8004138:	2201      	movs	r2, #1
 800413a:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 800413c:	4b30      	ldr	r3, [pc, #192]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 800413e:	7a1b      	ldrb	r3, [r3, #8]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d12b      	bne.n	800419e <HAL_FLASH_IRQHandler+0x142>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8004146:	4b2e      	ldr	r3, [pc, #184]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	3b01      	subs	r3, #1
 800414c:	4a2c      	ldr	r2, [pc, #176]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 800414e:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 8004150:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_FLASH_IRQHandler+0x124>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8004158:	4b29      	ldr	r3, [pc, #164]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	4618      	mov	r0, r3
 800415e:	f000 f851 	bl	8004204 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 8004162:	4b27      	ldr	r3, [pc, #156]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	3301      	adds	r3, #1
 8004168:	4a25      	ldr	r2, [pc, #148]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 800416a:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 800416c:	4b24      	ldr	r3, [pc, #144]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8004172:	4b23      	ldr	r3, [pc, #140]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	4619      	mov	r1, r3
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f857 	bl	800422c <FLASH_PageErase>
 800417e:	e02a      	b.n	80041d6 <HAL_FLASH_IRQHandler+0x17a>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 8004180:	4b1f      	ldr	r3, [pc, #124]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 8004182:	f04f 32ff 	mov.w	r2, #4294967295
 8004186:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004188:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 800418a:	2200      	movs	r2, #0
 800418c:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800418e:	f000 f891 	bl	80042b4 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8004192:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f834 	bl	8004204 <HAL_FLASH_EndOfOperationCallback>
 800419c:	e01b      	b.n	80041d6 <HAL_FLASH_IRQHandler+0x17a>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 800419e:	f000 f889 	bl	80042b4 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 80041a2:	4b17      	ldr	r3, [pc, #92]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 80041a4:	7a1b      	ldrb	r3, [r3, #8]
 80041a6:	72fb      	strb	r3, [r7, #11]
      if (procedure == FLASH_PROC_MASS_ERASE)
 80041a8:	7afb      	ldrb	r3, [r7, #11]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d105      	bne.n	80041ba <HAL_FLASH_IRQHandler+0x15e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f826 	bl	8004204 <HAL_FLASH_EndOfOperationCallback>
 80041b8:	e00a      	b.n	80041d0 <HAL_FLASH_IRQHandler+0x174>
      }
      else if ((procedure == FLASH_PROC_PROGRAM) ||
 80041ba:	7afb      	ldrb	r3, [r7, #11]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d002      	beq.n	80041c6 <HAL_FLASH_IRQHandler+0x16a>
 80041c0:	7afb      	ldrb	r3, [r7, #11]
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d104      	bne.n	80041d0 <HAL_FLASH_IRQHandler+0x174>
               (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f81a 	bl	8004204 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	721a      	strb	r2, [r3, #8]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80041d6:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 80041d8:	7a1b      	ldrb	r3, [r3, #8]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d108      	bne.n	80041f2 <HAL_FLASH_IRQHandler+0x196>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <HAL_FLASH_IRQHandler+0x1a0>)
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	4a05      	ldr	r2, [pc, #20]	; (80041fc <HAL_FLASH_IRQHandler+0x1a0>)
 80041e6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80041ea:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80041ec:	4b04      	ldr	r3, [pc, #16]	; (8004200 <HAL_FLASH_IRQHandler+0x1a4>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
  }
}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40022000 	.word	0x40022000
 8004200:	2000000c 	.word	0x2000000c

08004204 <HAL_FLASH_EndOfOperationCallback>:
  *                            (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *           @arg Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_FLASH_OperationErrorCallback>:
  *           @arg Page Erase: Page number which returned an error
  *           @arg Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8004236:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <FLASH_PageErase+0x84>)
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8004242:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <FLASH_PageErase+0x84>)
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	4a1a      	ldr	r2, [pc, #104]	; (80042b0 <FLASH_PageErase+0x84>)
 8004248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800424c:	6153      	str	r3, [r2, #20]
 800424e:	e011      	b.n	8004274 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d006      	beq.n	8004268 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800425a:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <FLASH_PageErase+0x84>)
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	4a14      	ldr	r2, [pc, #80]	; (80042b0 <FLASH_PageErase+0x84>)
 8004260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004264:	6153      	str	r3, [r2, #20]
 8004266:	e005      	b.n	8004274 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8004268:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <FLASH_PageErase+0x84>)
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	4a10      	ldr	r2, [pc, #64]	; (80042b0 <FLASH_PageErase+0x84>)
 800426e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004272:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004274:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <FLASH_PageErase+0x84>)
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8004284:	490a      	ldr	r1, [pc, #40]	; (80042b0 <FLASH_PageErase+0x84>)
 8004286:	4313      	orrs	r3, r2
 8004288:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800428a:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <FLASH_PageErase+0x84>)
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	4a08      	ldr	r2, [pc, #32]	; (80042b0 <FLASH_PageErase+0x84>)
 8004290:	f043 0302 	orr.w	r3, r3, #2
 8004294:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004296:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <FLASH_PageErase+0x84>)
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	4a05      	ldr	r2, [pc, #20]	; (80042b0 <FLASH_PageErase+0x84>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6153      	str	r3, [r2, #20]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40022000 	.word	0x40022000

080042b4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80042ba:	4b1e      	ldr	r3, [pc, #120]	; (8004334 <FLASH_FlushCaches+0x80>)
 80042bc:	7f1b      	ldrb	r3, [r3, #28]
 80042be:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d002      	beq.n	80042cc <FLASH_FlushCaches+0x18>
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d111      	bne.n	80042f0 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80042cc:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <FLASH_FlushCaches+0x84>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a19      	ldr	r2, [pc, #100]	; (8004338 <FLASH_FlushCaches+0x84>)
 80042d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	4b17      	ldr	r3, [pc, #92]	; (8004338 <FLASH_FlushCaches+0x84>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a16      	ldr	r2, [pc, #88]	; (8004338 <FLASH_FlushCaches+0x84>)
 80042de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042e4:	4b14      	ldr	r3, [pc, #80]	; (8004338 <FLASH_FlushCaches+0x84>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a13      	ldr	r2, [pc, #76]	; (8004338 <FLASH_FlushCaches+0x84>)
 80042ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ee:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d002      	beq.n	80042fc <FLASH_FlushCaches+0x48>
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d111      	bne.n	8004320 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <FLASH_FlushCaches+0x84>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <FLASH_FlushCaches+0x84>)
 8004302:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <FLASH_FlushCaches+0x84>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <FLASH_FlushCaches+0x84>)
 800430e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004312:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <FLASH_FlushCaches+0x84>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a07      	ldr	r2, [pc, #28]	; (8004338 <FLASH_FlushCaches+0x84>)
 800431a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800431e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004320:	4b04      	ldr	r3, [pc, #16]	; (8004334 <FLASH_FlushCaches+0x80>)
 8004322:	2200      	movs	r2, #0
 8004324:	771a      	strb	r2, [r3, #28]
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	2000000c 	.word	0x2000000c
 8004338:	40022000 	.word	0x40022000

0800433c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800434a:	e15a      	b.n	8004602 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2101      	movs	r1, #1
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	4013      	ands	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 814c 	beq.w	80045fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d00b      	beq.n	8004384 <HAL_GPIO_Init+0x48>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d007      	beq.n	8004384 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004378:	2b11      	cmp	r3, #17
 800437a:	d003      	beq.n	8004384 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b12      	cmp	r3, #18
 8004382:	d130      	bne.n	80043e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	2203      	movs	r2, #3
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4013      	ands	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ba:	2201      	movs	r2, #1
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4013      	ands	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f003 0201 	and.w	r2, r3, #1
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	2203      	movs	r2, #3
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	43db      	mvns	r3, r3
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4013      	ands	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d003      	beq.n	8004426 <HAL_GPIO_Init+0xea>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b12      	cmp	r3, #18
 8004424:	d123      	bne.n	800446e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	08da      	lsrs	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3208      	adds	r2, #8
 800442e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004432:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	220f      	movs	r2, #15
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	08da      	lsrs	r2, r3, #3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3208      	adds	r2, #8
 8004468:	6939      	ldr	r1, [r7, #16]
 800446a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	2203      	movs	r2, #3
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43db      	mvns	r3, r3
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4013      	ands	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0203 	and.w	r2, r3, #3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80a6 	beq.w	80045fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b0:	4b5b      	ldr	r3, [pc, #364]	; (8004620 <HAL_GPIO_Init+0x2e4>)
 80044b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b4:	4a5a      	ldr	r2, [pc, #360]	; (8004620 <HAL_GPIO_Init+0x2e4>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6613      	str	r3, [r2, #96]	; 0x60
 80044bc:	4b58      	ldr	r3, [pc, #352]	; (8004620 <HAL_GPIO_Init+0x2e4>)
 80044be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044c8:	4a56      	ldr	r2, [pc, #344]	; (8004624 <HAL_GPIO_Init+0x2e8>)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	089b      	lsrs	r3, r3, #2
 80044ce:	3302      	adds	r3, #2
 80044d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	220f      	movs	r2, #15
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4013      	ands	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044f2:	d01f      	beq.n	8004534 <HAL_GPIO_Init+0x1f8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a4c      	ldr	r2, [pc, #304]	; (8004628 <HAL_GPIO_Init+0x2ec>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d019      	beq.n	8004530 <HAL_GPIO_Init+0x1f4>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a4b      	ldr	r2, [pc, #300]	; (800462c <HAL_GPIO_Init+0x2f0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d013      	beq.n	800452c <HAL_GPIO_Init+0x1f0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a4a      	ldr	r2, [pc, #296]	; (8004630 <HAL_GPIO_Init+0x2f4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00d      	beq.n	8004528 <HAL_GPIO_Init+0x1ec>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a49      	ldr	r2, [pc, #292]	; (8004634 <HAL_GPIO_Init+0x2f8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d007      	beq.n	8004524 <HAL_GPIO_Init+0x1e8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a48      	ldr	r2, [pc, #288]	; (8004638 <HAL_GPIO_Init+0x2fc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d101      	bne.n	8004520 <HAL_GPIO_Init+0x1e4>
 800451c:	2305      	movs	r3, #5
 800451e:	e00a      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004520:	2306      	movs	r3, #6
 8004522:	e008      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004524:	2304      	movs	r3, #4
 8004526:	e006      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004528:	2303      	movs	r3, #3
 800452a:	e004      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 800452c:	2302      	movs	r3, #2
 800452e:	e002      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004534:	2300      	movs	r3, #0
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	f002 0203 	and.w	r2, r2, #3
 800453c:	0092      	lsls	r2, r2, #2
 800453e:	4093      	lsls	r3, r2
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004546:	4937      	ldr	r1, [pc, #220]	; (8004624 <HAL_GPIO_Init+0x2e8>)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	089b      	lsrs	r3, r3, #2
 800454c:	3302      	adds	r3, #2
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004554:	4b39      	ldr	r3, [pc, #228]	; (800463c <HAL_GPIO_Init+0x300>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	43db      	mvns	r3, r3
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4013      	ands	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004578:	4a30      	ldr	r2, [pc, #192]	; (800463c <HAL_GPIO_Init+0x300>)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800457e:	4b2f      	ldr	r3, [pc, #188]	; (800463c <HAL_GPIO_Init+0x300>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	43db      	mvns	r3, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4013      	ands	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045a2:	4a26      	ldr	r2, [pc, #152]	; (800463c <HAL_GPIO_Init+0x300>)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045a8:	4b24      	ldr	r3, [pc, #144]	; (800463c <HAL_GPIO_Init+0x300>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	43db      	mvns	r3, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4013      	ands	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045cc:	4a1b      	ldr	r2, [pc, #108]	; (800463c <HAL_GPIO_Init+0x300>)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045d2:	4b1a      	ldr	r3, [pc, #104]	; (800463c <HAL_GPIO_Init+0x300>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	43db      	mvns	r3, r3
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045f6:	4a11      	ldr	r2, [pc, #68]	; (800463c <HAL_GPIO_Init+0x300>)
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	3301      	adds	r3, #1
 8004600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	fa22 f303 	lsr.w	r3, r2, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	f47f ae9d 	bne.w	800434c <HAL_GPIO_Init+0x10>
  }
}
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40021000 	.word	0x40021000
 8004624:	40010000 	.word	0x40010000
 8004628:	48000400 	.word	0x48000400
 800462c:	48000800 	.word	0x48000800
 8004630:	48000c00 	.word	0x48000c00
 8004634:	48001000 	.word	0x48001000
 8004638:	48001400 	.word	0x48001400
 800463c:	40010400 	.word	0x40010400

08004640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
 800464c:	4613      	mov	r3, r2
 800464e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004650:	787b      	ldrb	r3, [r7, #1]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004656:	887a      	ldrh	r2, [r7, #2]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800465c:	e002      	b.n	8004664 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800465e:	887a      	ldrh	r2, [r7, #2]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004682:	887a      	ldrh	r2, [r7, #2]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4013      	ands	r3, r2
 8004688:	041a      	lsls	r2, r3, #16
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	43d9      	mvns	r1, r3
 800468e:	887b      	ldrh	r3, [r7, #2]
 8004690:	400b      	ands	r3, r1
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	619a      	str	r2, [r3, #24]
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046ae:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d006      	beq.n	80046c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046ba:	4a05      	ldr	r2, [pc, #20]	; (80046d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f806 	bl	80046d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80046c8:	bf00      	nop
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40010400 	.word	0x40010400

080046d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0bb      	b.n	800487a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b05      	cmp	r3, #5
 800470c:	d101      	bne.n	8004712 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e0b3      	b.n	800487a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d101      	bne.n	8004722 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e0ab      	b.n	800487a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004722:	4b58      	ldr	r3, [pc, #352]	; (8004884 <HAL_OPAMP_Init+0x198>)
 8004724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004726:	4a57      	ldr	r2, [pc, #348]	; (8004884 <HAL_OPAMP_Init+0x198>)
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	6613      	str	r3, [r2, #96]	; 0x60
 800472e:	4b55      	ldr	r3, [pc, #340]	; (8004884 <HAL_OPAMP_Init+0x198>)
 8004730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fd f852 	bl	80017f8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d003      	beq.n	8004764 <HAL_OPAMP_Init+0x78>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b60      	cmp	r3, #96	; 0x60
 8004762:	d133      	bne.n	80047cc <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f023 0110 	bic.w	r1, r3, #16
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	4b41      	ldr	r3, [pc, #260]	; (8004888 <HAL_OPAMP_Init+0x19c>)
 8004782:	4013      	ands	r3, r2
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6851      	ldr	r1, [r2, #4]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6892      	ldr	r2, [r2, #8]
 800478c:	4311      	orrs	r1, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6912      	ldr	r2, [r2, #16]
 8004792:	430a      	orrs	r2, r1
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	7d09      	ldrb	r1, [r1, #20]
 8004798:	2901      	cmp	r1, #1
 800479a:	d102      	bne.n	80047a2 <HAL_OPAMP_Init+0xb6>
 800479c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047a0:	e000      	b.n	80047a4 <HAL_OPAMP_Init+0xb8>
 80047a2:	2100      	movs	r1, #0
 80047a4:	4311      	orrs	r1, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047aa:	4311      	orrs	r1, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80047b0:	4311      	orrs	r1, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047b6:	04d2      	lsls	r2, r2, #19
 80047b8:	4311      	orrs	r1, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047be:	0612      	lsls	r2, r2, #24
 80047c0:	4311      	orrs	r1, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	430b      	orrs	r3, r1
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e035      	b.n	8004838 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 0110 	bic.w	r1, r3, #16
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	4b27      	ldr	r3, [pc, #156]	; (8004888 <HAL_OPAMP_Init+0x19c>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6851      	ldr	r1, [r2, #4]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6892      	ldr	r2, [r2, #8]
 80047f4:	4311      	orrs	r1, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68d2      	ldr	r2, [r2, #12]
 80047fa:	4311      	orrs	r1, r2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6912      	ldr	r2, [r2, #16]
 8004800:	430a      	orrs	r2, r1
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	7d09      	ldrb	r1, [r1, #20]
 8004806:	2901      	cmp	r1, #1
 8004808:	d102      	bne.n	8004810 <HAL_OPAMP_Init+0x124>
 800480a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800480e:	e000      	b.n	8004812 <HAL_OPAMP_Init+0x126>
 8004810:	2100      	movs	r1, #0
 8004812:	4311      	orrs	r1, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004818:	4311      	orrs	r1, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800481e:	4311      	orrs	r1, r2
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004824:	04d2      	lsls	r2, r2, #19
 8004826:	4311      	orrs	r1, r2
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800482c:	0612      	lsls	r2, r2, #24
 800482e:	4311      	orrs	r1, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	430b      	orrs	r3, r1
 8004836:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	db10      	blt.n	8004864 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d103      	bne.n	8004878 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004878:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000
 8004888:	e0003e11 	.word	0xe0003e11

0800488c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
 80048a2:	e01d      	b.n	80048e0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b05      	cmp	r3, #5
 80048ae:	d102      	bne.n	80048b6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
 80048b4:	e014      	b.n	80048e0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d10c      	bne.n	80048dc <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2204      	movs	r2, #4
 80048d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80048da:	e001      	b.n	80048e0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f0:	b08b      	sub	sp, #44	; 0x2c
 80048f2:	af06      	add	r7, sp, #24
 80048f4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0d7      	b.n	8004ab0 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d106      	bne.n	800491a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f007 f89d 	bl	800ba54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2203      	movs	r2, #3
 800491e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f003 fa41 	bl	8007dae <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800492c:	2300      	movs	r3, #0
 800492e:	73fb      	strb	r3, [r7, #15]
 8004930:	e04c      	b.n	80049cc <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	440b      	add	r3, r1
 8004942:	3301      	adds	r3, #1
 8004944:	2201      	movs	r2, #1
 8004946:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	440b      	add	r3, r1
 8004958:	7bfa      	ldrb	r2, [r7, #15]
 800495a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800495c:	7bfa      	ldrb	r2, [r7, #15]
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	b298      	uxth	r0, r3
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	440b      	add	r3, r1
 800496e:	3336      	adds	r3, #54	; 0x36
 8004970:	4602      	mov	r2, r0
 8004972:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	440b      	add	r3, r1
 8004984:	3303      	adds	r3, #3
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800498a:	7bfa      	ldrb	r2, [r7, #15]
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	440b      	add	r3, r1
 8004998:	3338      	adds	r3, #56	; 0x38
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800499e:	7bfa      	ldrb	r2, [r7, #15]
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	440b      	add	r3, r1
 80049ac:	333c      	adds	r3, #60	; 0x3c
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049b2:	7bfa      	ldrb	r2, [r7, #15]
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	440b      	add	r3, r1
 80049c0:	3340      	adds	r3, #64	; 0x40
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	3301      	adds	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
 80049cc:	7bfa      	ldrb	r2, [r7, #15]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d3ad      	bcc.n	8004932 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]
 80049da:	e044      	b.n	8004a66 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049dc:	7bfa      	ldrb	r2, [r7, #15]
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	440b      	add	r3, r1
 80049ea:	f203 1369 	addw	r3, r3, #361	; 0x169
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049f2:	7bfa      	ldrb	r2, [r7, #15]
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	440b      	add	r3, r1
 8004a00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a04:	7bfa      	ldrb	r2, [r7, #15]
 8004a06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a08:	7bfa      	ldrb	r2, [r7, #15]
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	440b      	add	r3, r1
 8004a16:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a1e:	7bfa      	ldrb	r2, [r7, #15]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	440b      	add	r3, r1
 8004a2c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a34:	7bfa      	ldrb	r2, [r7, #15]
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	440b      	add	r3, r1
 8004a42:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a4a:	7bfa      	ldrb	r2, [r7, #15]
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	440b      	add	r3, r1
 8004a58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	3301      	adds	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
 8004a66:	7bfa      	ldrb	r2, [r7, #15]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d3b5      	bcc.n	80049dc <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	603b      	str	r3, [r7, #0]
 8004a76:	687e      	ldr	r6, [r7, #4]
 8004a78:	466d      	mov	r5, sp
 8004a7a:	f106 0410 	add.w	r4, r6, #16
 8004a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	602b      	str	r3, [r5, #0]
 8004a86:	1d33      	adds	r3, r6, #4
 8004a88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a8a:	6838      	ldr	r0, [r7, #0]
 8004a8c:	f003 f9aa 	bl	8007de4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d102      	bne.n	8004aae <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f001 fa6c 	bl	8005f86 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ab8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_PCD_Start+0x16>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e012      	b.n	8004af4 <HAL_PCD_Start+0x3c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f003 f950 	bl	8007d80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f005 f93c 	bl	8009d62 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f005 f941 	bl	8009d90 <USB_ReadInterrupts>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b18:	d102      	bne.n	8004b20 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fb5b 	bl	80051d6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f005 f933 	bl	8009d90 <USB_ReadInterrupts>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b34:	d112      	bne.n	8004b5c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b48:	b292      	uxth	r2, r2
 8004b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f006 fffb 	bl	800bb4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b54:	2100      	movs	r1, #0
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f91e 	bl	8004d98 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f005 f915 	bl	8009d90 <USB_ReadInterrupts>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b70:	d10b      	bne.n	8004b8a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b84:	b292      	uxth	r2, r2
 8004b86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f005 f8fe 	bl	8009d90 <USB_ReadInterrupts>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9e:	d10b      	bne.n	8004bb8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bb2:	b292      	uxth	r2, r2
 8004bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f005 f8e7 	bl	8009d90 <USB_ReadInterrupts>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bcc:	d133      	bne.n	8004c36 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0204 	bic.w	r2, r2, #4
 8004be0:	b292      	uxth	r2, r2
 8004be2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0208 	bic.w	r2, r2, #8
 8004bf8:	b292      	uxth	r2, r2
 8004bfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d107      	bne.n	8004c18 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c10:	2100      	movs	r1, #0
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f007 f98e 	bl	800bf34 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f006 ffcf 	bl	800bbbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c30:	b292      	uxth	r2, r2
 8004c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f005 f8a8 	bl	8009d90 <USB_ReadInterrupts>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4a:	d126      	bne.n	8004c9a <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0208 	orr.w	r2, r2, #8
 8004c5e:	b292      	uxth	r2, r2
 8004c60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c76:	b292      	uxth	r2, r2
 8004c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0204 	orr.w	r2, r2, #4
 8004c8e:	b292      	uxth	r2, r2
 8004c90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f006 ff77 	bl	800bb88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f005 f876 	bl	8009d90 <USB_ReadInterrupts>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004caa:	2b80      	cmp	r3, #128	; 0x80
 8004cac:	d13f      	bne.n	8004d2e <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cc0:	b292      	uxth	r2, r2
 8004cc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d12b      	bne.n	8004d28 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0204 	orr.w	r2, r2, #4
 8004ce2:	b292      	uxth	r2, r2
 8004ce4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0208 	orr.w	r2, r2, #8
 8004cfa:	b292      	uxth	r2, r2
 8004cfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004d1e:	2101      	movs	r1, #1
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f007 f907 	bl	800bf34 <HAL_PCDEx_LPM_Callback>
 8004d26:	e002      	b.n	8004d2e <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f006 ff2d 	bl	800bb88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f005 f82c 	bl	8009d90 <USB_ReadInterrupts>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d42:	d10e      	bne.n	8004d62 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d56:	b292      	uxth	r2, r2
 8004d58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f006 fee6 	bl	800bb2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f005 f812 	bl	8009d90 <USB_ReadInterrupts>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d76:	d10b      	bne.n	8004d90 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d8a:	b292      	uxth	r2, r2
 8004d8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_PCD_SetAddress+0x1a>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e013      	b.n	8004dda <HAL_PCD_SetAddress+0x42>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	78fa      	ldrb	r2, [r7, #3]
 8004dc8:	4611      	mov	r1, r2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f004 ffb5 	bl	8009d3a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	4608      	mov	r0, r1
 8004dec:	4611      	mov	r1, r2
 8004dee:	461a      	mov	r2, r3
 8004df0:	4603      	mov	r3, r0
 8004df2:	70fb      	strb	r3, [r7, #3]
 8004df4:	460b      	mov	r3, r1
 8004df6:	803b      	strh	r3, [r7, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	da0e      	bge.n	8004e26 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e08:	78fb      	ldrb	r3, [r7, #3]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	705a      	strb	r2, [r3, #1]
 8004e24:	e00e      	b.n	8004e44 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e26:	78fb      	ldrb	r3, [r7, #3]
 8004e28:	f003 0207 	and.w	r2, r3, #7
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e50:	883a      	ldrh	r2, [r7, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	78ba      	ldrb	r2, [r7, #2]
 8004e5a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	785b      	ldrb	r3, [r3, #1]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e6e:	78bb      	ldrb	r3, [r7, #2]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d102      	bne.n	8004e7a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_PCD_EP_Open+0xa6>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e00e      	b.n	8004ea6 <HAL_PCD_EP_Open+0xc4>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68f9      	ldr	r1, [r7, #12]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f002 ffc6 	bl	8007e28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004ea4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	da0e      	bge.n	8004ee0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ec2:	78fb      	ldrb	r3, [r7, #3]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	705a      	strb	r2, [r3, #1]
 8004ede:	e00e      	b.n	8004efe <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	f003 0207 	and.w	r2, r3, #7
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_PCD_EP_Close+0x6a>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e00e      	b.n	8004f36 <HAL_PCD_EP_Close+0x88>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68f9      	ldr	r1, [r7, #12]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f003 faec 	bl	8008504 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b086      	sub	sp, #24
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f4e:	7afb      	ldrb	r3, [r7, #11]
 8004f50:	f003 0207 	and.w	r2, r3, #7
 8004f54:	4613      	mov	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2200      	movs	r2, #0
 8004f76:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f7e:	7afb      	ldrb	r3, [r7, #11]
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f8a:	7afb      	ldrb	r3, [r7, #11]
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6979      	ldr	r1, [r7, #20]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f003 fc9f 	bl	80088de <USB_EPStartXfer>
 8004fa0:	e005      	b.n	8004fae <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6979      	ldr	r1, [r7, #20]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f003 fc98 	bl	80088de <USB_EPStartXfer>
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	f003 0207 	and.w	r2, r3, #7
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	440b      	add	r3, r1
 8004fd6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004fda:	681b      	ldr	r3, [r3, #0]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ff8:	7afb      	ldrb	r3, [r7, #11]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4413      	add	r3, r2
 800500c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2200      	movs	r2, #0
 800502c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2201      	movs	r2, #1
 8005032:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005034:	7afb      	ldrb	r3, [r7, #11]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	b2da      	uxtb	r2, r3
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005040:	7afb      	ldrb	r3, [r7, #11]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6979      	ldr	r1, [r7, #20]
 8005050:	4618      	mov	r0, r3
 8005052:	f003 fc44 	bl	80088de <USB_EPStartXfer>
 8005056:	e005      	b.n	8005064 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6979      	ldr	r1, [r7, #20]
 800505e:	4618      	mov	r0, r3
 8005060:	f003 fc3d 	bl	80088de <USB_EPStartXfer>
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	460b      	mov	r3, r1
 8005078:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	f003 0207 	and.w	r2, r3, #7
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	d901      	bls.n	800508c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e04c      	b.n	8005126 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800508c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005090:	2b00      	cmp	r3, #0
 8005092:	da0e      	bge.n	80050b2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	4413      	add	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	705a      	strb	r2, [r3, #1]
 80050b0:	e00c      	b.n	80050cc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050b2:	78fa      	ldrb	r2, [r7, #3]
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	4413      	add	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_PCD_EP_SetStall+0x7e>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e01c      	b.n	8005126 <HAL_PCD_EP_SetStall+0xb8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68f9      	ldr	r1, [r7, #12]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f004 fd1e 	bl	8009b3c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b00      	cmp	r3, #0
 8005108:	d108      	bne.n	800511c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005114:	4619      	mov	r1, r3
 8005116:	4610      	mov	r0, r2
 8005118:	f004 fe4a 	bl	8009db0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	460b      	mov	r3, r1
 8005138:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	f003 020f 	and.w	r2, r3, #15
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	429a      	cmp	r2, r3
 8005146:	d901      	bls.n	800514c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e040      	b.n	80051ce <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800514c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005150:	2b00      	cmp	r3, #0
 8005152:	da0e      	bge.n	8005172 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	4413      	add	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	705a      	strb	r2, [r3, #1]
 8005170:	e00e      	b.n	8005190 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	f003 0207 	and.w	r2, r3, #7
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	4413      	add	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	b2da      	uxtb	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_PCD_EP_ClrStall+0x82>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e00e      	b.n	80051ce <HAL_PCD_EP_ClrStall+0xa0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68f9      	ldr	r1, [r7, #12]
 80051be:	4618      	mov	r0, r3
 80051c0:	f004 fd0d 	bl	8009bde <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b08e      	sub	sp, #56	; 0x38
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80051de:	e2d1      	b.n	8005784 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80051ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80051f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f040 8152 	bne.w	80054a4 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005200:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005202:	f003 0310 	and.w	r3, r3, #16
 8005206:	2b00      	cmp	r3, #0
 8005208:	d150      	bne.n	80052ac <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	81fb      	strh	r3, [r7, #14]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	89fb      	ldrh	r3, [r7, #14]
 8005222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522a:	b29b      	uxth	r3, r3
 800522c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3328      	adds	r3, #40	; 0x28
 8005232:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523c:	b29b      	uxth	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4413      	add	r3, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6812      	ldr	r2, [r2, #0]
 800524c:	4413      	add	r3, r2
 800524e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	695a      	ldr	r2, [r3, #20]
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	441a      	add	r2, r3
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800526a:	2100      	movs	r1, #0
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f006 fc44 	bl	800bafa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 8282 	beq.w	8005784 <PCD_EP_ISR_Handler+0x5ae>
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f040 827d 	bne.w	8005784 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005296:	b2da      	uxtb	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	b292      	uxth	r2, r2
 800529e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80052aa:	e26b      	b.n	8005784 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80052bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d032      	beq.n	800532c <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	4413      	add	r3, r2
 80052e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005300:	b29b      	uxth	r3, r3
 8005302:	f004 fda3 	bl	8009e4c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29a      	uxth	r2, r3
 800530e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005312:	4013      	ands	r3, r2
 8005314:	823b      	strh	r3, [r7, #16]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	8a3a      	ldrh	r2, [r7, #16]
 800531c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005320:	b292      	uxth	r2, r2
 8005322:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f006 fbbb 	bl	800baa0 <HAL_PCD_SetupStageCallback>
 800532a:	e22b      	b.n	8005784 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800532c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005330:	2b00      	cmp	r3, #0
 8005332:	f280 8227 	bge.w	8005784 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29a      	uxth	r2, r3
 800533e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005342:	4013      	ands	r3, r2
 8005344:	83bb      	strh	r3, [r7, #28]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	8bba      	ldrh	r2, [r7, #28]
 800534c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005350:	b292      	uxth	r2, r2
 8005352:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800535c:	b29b      	uxth	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	4413      	add	r3, r2
 800536e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d019      	beq.n	80053b8 <PCD_EP_ISR_Handler+0x1e2>
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d015      	beq.n	80053b8 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	6959      	ldr	r1, [r3, #20]
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800539c:	b29b      	uxth	r3, r3
 800539e:	f004 fd55 	bl	8009e4c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	695a      	ldr	r2, [r3, #20]
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	441a      	add	r2, r3
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80053b0:	2100      	movs	r1, #0
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f006 fb86 	bl	800bac4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	4413      	add	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d112      	bne.n	8005406 <PCD_EP_ISR_Handler+0x230>
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053fe:	b29a      	uxth	r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	801a      	strh	r2, [r3, #0]
 8005404:	e02f      	b.n	8005466 <PCD_EP_ISR_Handler+0x290>
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	2b3e      	cmp	r3, #62	; 0x3e
 800540c:	d813      	bhi.n	8005436 <PCD_EP_ISR_Handler+0x260>
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	085b      	lsrs	r3, r3, #1
 8005414:	633b      	str	r3, [r7, #48]	; 0x30
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <PCD_EP_ISR_Handler+0x252>
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	3301      	adds	r3, #1
 8005426:	633b      	str	r3, [r7, #48]	; 0x30
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	b29b      	uxth	r3, r3
 800542c:	029b      	lsls	r3, r3, #10
 800542e:	b29a      	uxth	r2, r3
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	e017      	b.n	8005466 <PCD_EP_ISR_Handler+0x290>
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	633b      	str	r3, [r7, #48]	; 0x30
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <PCD_EP_ISR_Handler+0x27a>
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	3b01      	subs	r3, #1
 800544e:	633b      	str	r3, [r7, #48]	; 0x30
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	b29b      	uxth	r3, r3
 8005454:	029b      	lsls	r3, r3, #10
 8005456:	b29b      	uxth	r3, r3
 8005458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005460:	b29a      	uxth	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	827b      	strh	r3, [r7, #18]
 8005478:	8a7b      	ldrh	r3, [r7, #18]
 800547a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800547e:	827b      	strh	r3, [r7, #18]
 8005480:	8a7b      	ldrh	r3, [r7, #18]
 8005482:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005486:	827b      	strh	r3, [r7, #18]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	8a7b      	ldrh	r3, [r7, #18]
 800548e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800549a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549e:	b29b      	uxth	r3, r3
 80054a0:	8013      	strh	r3, [r2, #0]
 80054a2:	e16f      	b.n	8005784 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80054b6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f280 80e4 	bge.w	8005688 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80054d6:	4013      	ands	r3, r2
 80054d8:	853b      	strh	r3, [r7, #40]	; 0x28
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80054ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054ee:	b292      	uxth	r2, r2
 80054f0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80054f2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80054f6:	4613      	mov	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	4413      	add	r3, r2
 8005506:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	7b1b      	ldrb	r3, [r3, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d120      	bne.n	8005552 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005518:	b29b      	uxth	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	4413      	add	r3, r2
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	4413      	add	r3, r2
 800552a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005534:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005536:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8083 	beq.w	8005644 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	6959      	ldr	r1, [r3, #20]
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	88da      	ldrh	r2, [r3, #6]
 800554a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800554c:	f004 fc7e 	bl	8009e4c <USB_ReadPMA>
 8005550:	e078      	b.n	8005644 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	78db      	ldrb	r3, [r3, #3]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d108      	bne.n	800556c <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800555a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800555c:	461a      	mov	r2, r3
 800555e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f91d 	bl	80057a0 <HAL_PCD_EP_DB_Receive>
 8005566:	4603      	mov	r3, r0
 8005568:	86fb      	strh	r3, [r7, #54]	; 0x36
 800556a:	e06b      	b.n	8005644 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005586:	847b      	strh	r3, [r7, #34]	; 0x22
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	441a      	add	r2, r3
 8005596:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d01f      	beq.n	8005606 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4413      	add	r3, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	4413      	add	r3, r2
 80055e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ea:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80055ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d028      	beq.n	8005644 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	6959      	ldr	r1, [r3, #20]
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	891a      	ldrh	r2, [r3, #8]
 80055fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005600:	f004 fc24 	bl	8009e4c <USB_ReadPMA>
 8005604:	e01e      	b.n	8005644 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800560e:	b29b      	uxth	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	4413      	add	r3, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	4413      	add	r3, r2
 8005620:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800562a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800562c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800562e:	2b00      	cmp	r3, #0
 8005630:	d008      	beq.n	8005644 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	6959      	ldr	r1, [r3, #20]
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	895a      	ldrh	r2, [r3, #10]
 800563e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005640:	f004 fc04 	bl	8009e4c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800564a:	441a      	add	r2, r3
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	695a      	ldr	r2, [r3, #20]
 8005654:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005656:	441a      	add	r2, r3
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <PCD_EP_ISR_Handler+0x498>
 8005664:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	429a      	cmp	r2, r3
 800566c:	d206      	bcs.n	800567c <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f006 fa25 	bl	800bac4 <HAL_PCD_DataOutStageCallback>
 800567a:	e005      	b.n	8005688 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005682:	4618      	mov	r0, r3
 8005684:	f003 f92b 	bl	80088de <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005688:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800568a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568e:	2b00      	cmp	r3, #0
 8005690:	d078      	beq.n	8005784 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8005692:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	4413      	add	r3, r2
 80056a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80056bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c0:	843b      	strh	r3, [r7, #32]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	441a      	add	r2, r3
 80056d0:	8c3b      	ldrh	r3, [r7, #32]
 80056d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056da:	b29b      	uxth	r3, r3
 80056dc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	78db      	ldrb	r3, [r3, #3]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d108      	bne.n	80056f8 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d144      	bne.n	8005778 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80056ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80056f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d13f      	bne.n	8005778 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005700:	b29b      	uxth	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	4413      	add	r3, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	4413      	add	r3, r2
 8005712:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800571c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	8bfb      	ldrh	r3, [r7, #30]
 8005724:	429a      	cmp	r2, r3
 8005726:	d906      	bls.n	8005736 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	8bfb      	ldrh	r3, [r7, #30]
 800572e:	1ad2      	subs	r2, r2, r3
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	619a      	str	r2, [r3, #24]
 8005734:	e002      	b.n	800573c <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	2200      	movs	r2, #0
 800573a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f006 f9d5 	bl	800bafa <HAL_PCD_DataInStageCallback>
 8005750:	e018      	b.n	8005784 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	695a      	ldr	r2, [r3, #20]
 8005756:	8bfb      	ldrh	r3, [r7, #30]
 8005758:	441a      	add	r2, r3
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	8bfb      	ldrh	r3, [r7, #30]
 8005764:	441a      	add	r2, r3
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005770:	4618      	mov	r0, r3
 8005772:	f003 f8b4 	bl	80088de <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005776:	e005      	b.n	8005784 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005778:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800577a:	461a      	mov	r2, r3
 800577c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f917 	bl	80059b2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800578c:	b29b      	uxth	r3, r3
 800578e:	b21b      	sxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	f6ff ad25 	blt.w	80051e0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3738      	adds	r7, #56	; 0x38
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	4613      	mov	r3, r2
 80057ac:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057ae:	88fb      	ldrh	r3, [r7, #6]
 80057b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d07c      	beq.n	80058b2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4413      	add	r3, r2
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	6812      	ldr	r2, [r2, #0]
 80057d0:	4413      	add	r3, r2
 80057d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057dc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	8b7b      	ldrh	r3, [r7, #26]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d306      	bcc.n	80057f6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	8b7b      	ldrh	r3, [r7, #26]
 80057ee:	1ad2      	subs	r2, r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	619a      	str	r2, [r3, #24]
 80057f4:	e002      	b.n	80057fc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2200      	movs	r2, #0
 80057fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d123      	bne.n	800584c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	833b      	strh	r3, [r7, #24]
 8005820:	8b3b      	ldrh	r3, [r7, #24]
 8005822:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005826:	833b      	strh	r3, [r7, #24]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	441a      	add	r2, r3
 8005836:	8b3b      	ldrh	r3, [r7, #24]
 8005838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800583c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005848:	b29b      	uxth	r3, r3
 800584a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800584c:	88fb      	ldrh	r3, [r7, #6]
 800584e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01f      	beq.n	8005896 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005870:	82fb      	strh	r3, [r7, #22]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	441a      	add	r2, r3
 8005880:	8afb      	ldrh	r3, [r7, #22]
 8005882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800588a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800588e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005892:	b29b      	uxth	r3, r3
 8005894:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005896:	8b7b      	ldrh	r3, [r7, #26]
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 8085 	beq.w	80059a8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	6959      	ldr	r1, [r3, #20]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	891a      	ldrh	r2, [r3, #8]
 80058aa:	8b7b      	ldrh	r3, [r7, #26]
 80058ac:	f004 face 	bl	8009e4c <USB_ReadPMA>
 80058b0:	e07a      	b.n	80059a8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	4413      	add	r3, r2
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	4413      	add	r3, r2
 80058cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	699a      	ldr	r2, [r3, #24]
 80058dc:	8b7b      	ldrh	r3, [r7, #26]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d306      	bcc.n	80058f0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	8b7b      	ldrh	r3, [r7, #26]
 80058e8:	1ad2      	subs	r2, r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	619a      	str	r2, [r3, #24]
 80058ee:	e002      	b.n	80058f6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2200      	movs	r2, #0
 80058f4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d123      	bne.n	8005946 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005918:	83fb      	strh	r3, [r7, #30]
 800591a:	8bfb      	ldrh	r3, [r7, #30]
 800591c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005920:	83fb      	strh	r3, [r7, #30]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	8bfb      	ldrh	r3, [r7, #30]
 8005932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800593a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800593e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005942:	b29b      	uxth	r3, r3
 8005944:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d11f      	bne.n	8005990 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	83bb      	strh	r3, [r7, #28]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	441a      	add	r2, r3
 800597a:	8bbb      	ldrh	r3, [r7, #28]
 800597c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005988:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800598c:	b29b      	uxth	r3, r3
 800598e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005990:	8b7b      	ldrh	r3, [r7, #26]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d008      	beq.n	80059a8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6959      	ldr	r1, [r3, #20]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	895a      	ldrh	r2, [r3, #10]
 80059a2:	8b7b      	ldrh	r3, [r7, #26]
 80059a4:	f004 fa52 	bl	8009e4c <USB_ReadPMA>
    }
  }

  return count;
 80059a8:	8b7b      	ldrh	r3, [r7, #26]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3720      	adds	r7, #32
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b094      	sub	sp, #80	; 0x50
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	4613      	mov	r3, r2
 80059be:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80059c0:	88fb      	ldrh	r3, [r7, #6]
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 8136 	beq.w	8005c38 <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	461a      	mov	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	4413      	add	r3, r2
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	4413      	add	r3, r2
 80059e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059f0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d907      	bls.n	8005a10 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	699a      	ldr	r2, [r3, #24]
 8005a04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a08:	1ad2      	subs	r2, r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	619a      	str	r2, [r3, #24]
 8005a0e:	e002      	b.n	8005a16 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2200      	movs	r2, #0
 8005a14:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d12c      	bne.n	8005a78 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	4619      	mov	r1, r3
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f006 f868 	bl	800bafa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 8238 	beq.w	8005ea6 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a50:	82fb      	strh	r3, [r7, #22]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	441a      	add	r2, r3
 8005a60:	8afb      	ldrh	r3, [r7, #22]
 8005a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	8013      	strh	r3, [r2, #0]
 8005a76:	e216      	b.n	8005ea6 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a78:	88fb      	ldrh	r3, [r7, #6]
 8005a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d01f      	beq.n	8005ac2 <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	441a      	add	r2, r3
 8005aac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	f040 81ec 	bne.w	8005ea6 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	695a      	ldr	r2, [r3, #20]
 8005ad2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ad6:	441a      	add	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ae4:	441a      	add	r2, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6a1a      	ldr	r2, [r3, #32]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d309      	bcc.n	8005b0a <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6a1a      	ldr	r2, [r3, #32]
 8005b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b02:	1ad2      	subs	r2, r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	621a      	str	r2, [r3, #32]
 8005b08:	e015      	b.n	8005b36 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d107      	bne.n	8005b22 <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 8005b12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005b16:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005b20:	e009      	b.n	8005b36 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2200      	movs	r2, #0
 8005b34:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	785b      	ldrb	r3, [r3, #1]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d155      	bne.n	8005bea <HAL_PCD_EP_DB_Transmit+0x238>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	61fb      	str	r3, [r7, #28]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	00da      	lsls	r2, r3, #3
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d112      	bne.n	8005b92 <HAL_PCD_EP_DB_Transmit+0x1e0>
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	801a      	strh	r2, [r3, #0]
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	801a      	strh	r2, [r3, #0]
 8005b90:	e047      	b.n	8005c22 <HAL_PCD_EP_DB_Transmit+0x270>
 8005b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b94:	2b3e      	cmp	r3, #62	; 0x3e
 8005b96:	d811      	bhi.n	8005bbc <HAL_PCD_EP_DB_Transmit+0x20a>
 8005b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <HAL_PCD_EP_DB_Transmit+0x1fc>
 8005ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005baa:	3301      	adds	r3, #1
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	029b      	lsls	r3, r3, #10
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	801a      	strh	r2, [r3, #0]
 8005bba:	e032      	b.n	8005c22 <HAL_PCD_EP_DB_Transmit+0x270>
 8005bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d102      	bne.n	8005bd2 <HAL_PCD_EP_DB_Transmit+0x220>
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	029b      	lsls	r3, r3, #10
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	801a      	strh	r2, [r3, #0]
 8005be8:	e01b      	b.n	8005c22 <HAL_PCD_EP_DB_Transmit+0x270>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	785b      	ldrb	r3, [r3, #1]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d117      	bne.n	8005c22 <HAL_PCD_EP_DB_Transmit+0x270>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	461a      	mov	r2, r3
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	4413      	add	r3, r2
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	00da      	lsls	r2, r3, #3
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	4413      	add	r3, r2
 8005c14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c18:	623b      	str	r3, [r7, #32]
 8005c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6959      	ldr	r1, [r3, #20]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	891a      	ldrh	r2, [r3, #8]
 8005c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	f004 f8c9 	bl	8009dc8 <USB_WritePMA>
 8005c36:	e136      	b.n	8005ea6 <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	4413      	add	r3, r2
 8005c52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c5c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	699a      	ldr	r2, [r3, #24]
 8005c64:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d307      	bcc.n	8005c7c <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	699a      	ldr	r2, [r3, #24]
 8005c70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c74:	1ad2      	subs	r2, r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	619a      	str	r2, [r3, #24]
 8005c7a:	e002      	b.n	8005c82 <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d12e      	bne.n	8005ce8 <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f005 ff32 	bl	800bafa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f040 8102 	bne.w	8005ea6 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cbc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	441a      	add	r2, r3
 8005cce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	8013      	strh	r3, [r2, #0]
 8005ce6:	e0de      	b.n	8005ea6 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d11f      	bne.n	8005d32 <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	867b      	strh	r3, [r7, #50]	; 0x32
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	441a      	add	r2, r3
 8005d1c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	f040 80b4 	bne.w	8005ea6 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	695a      	ldr	r2, [r3, #20]
 8005d42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d46:	441a      	add	r2, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d54:	441a      	add	r2, r3
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6a1a      	ldr	r2, [r3, #32]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d309      	bcc.n	8005d7a <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	6a1a      	ldr	r2, [r3, #32]
 8005d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d72:	1ad2      	subs	r2, r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	621a      	str	r2, [r3, #32]
 8005d78:	e015      	b.n	8005da6 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d107      	bne.n	8005d92 <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 8005d82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d86:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d90:	e009      	b.n	8005da6 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	643b      	str	r3, [r7, #64]	; 0x40
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d155      	bne.n	8005e60 <HAL_PCD_EP_DB_Transmit+0x4ae>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	4413      	add	r3, r2
 8005dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	00da      	lsls	r2, r3, #3
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dda:	637b      	str	r3, [r7, #52]	; 0x34
 8005ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d112      	bne.n	8005e08 <HAL_PCD_EP_DB_Transmit+0x456>
 8005de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e04:	801a      	strh	r2, [r3, #0]
 8005e06:	e044      	b.n	8005e92 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8005e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e0c:	d811      	bhi.n	8005e32 <HAL_PCD_EP_DB_Transmit+0x480>
 8005e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e10:	085b      	lsrs	r3, r3, #1
 8005e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_PCD_EP_DB_Transmit+0x472>
 8005e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e20:	3301      	adds	r3, #1
 8005e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	029b      	lsls	r3, r3, #10
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2e:	801a      	strh	r2, [r3, #0]
 8005e30:	e02f      	b.n	8005e92 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8005e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3a:	f003 031f 	and.w	r3, r3, #31
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d102      	bne.n	8005e48 <HAL_PCD_EP_DB_Transmit+0x496>
 8005e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e44:	3b01      	subs	r3, #1
 8005e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	029b      	lsls	r3, r3, #10
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5c:	801a      	strh	r2, [r3, #0]
 8005e5e:	e018      	b.n	8005e92 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	785b      	ldrb	r3, [r3, #1]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d114      	bne.n	8005e92 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e76:	4413      	add	r3, r2
 8005e78:	643b      	str	r3, [r7, #64]	; 0x40
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	00da      	lsls	r2, r3, #3
 8005e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e82:	4413      	add	r3, r2
 8005e84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e90:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6959      	ldr	r1, [r3, #20]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	895a      	ldrh	r2, [r3, #10]
 8005e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f003 ff91 	bl	8009dc8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec0:	82bb      	strh	r3, [r7, #20]
 8005ec2:	8abb      	ldrh	r3, [r7, #20]
 8005ec4:	f083 0310 	eor.w	r3, r3, #16
 8005ec8:	82bb      	strh	r3, [r7, #20]
 8005eca:	8abb      	ldrh	r3, [r7, #20]
 8005ecc:	f083 0320 	eor.w	r3, r3, #32
 8005ed0:	82bb      	strh	r3, [r7, #20]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	441a      	add	r2, r3
 8005ee0:	8abb      	ldrh	r3, [r7, #20]
 8005ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3750      	adds	r7, #80	; 0x50
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	607b      	str	r3, [r7, #4]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	817b      	strh	r3, [r7, #10]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005f12:	897b      	ldrh	r3, [r7, #10]
 8005f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00b      	beq.n	8005f36 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f1e:	897b      	ldrh	r3, [r7, #10]
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	4613      	mov	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4413      	add	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	e009      	b.n	8005f4a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f36:	897a      	ldrh	r2, [r7, #10]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005f4a:	893b      	ldrh	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d107      	bne.n	8005f60 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2200      	movs	r2, #0
 8005f54:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	80da      	strh	r2, [r3, #6]
 8005f5e:	e00b      	b.n	8005f78 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2201      	movs	r2, #1
 8005f64:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	0c1b      	lsrs	r3, r3, #16
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f043 0301 	orr.w	r3, r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	f043 0302 	orr.w	r3, r3, #2
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d141      	bne.n	800607a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ff6:	4b4b      	ldr	r3, [pc, #300]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006002:	d131      	bne.n	8006068 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006004:	4b47      	ldr	r3, [pc, #284]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800600a:	4a46      	ldr	r2, [pc, #280]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800600c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006010:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006014:	4b43      	ldr	r3, [pc, #268]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800601c:	4a41      	ldr	r2, [pc, #260]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800601e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006022:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006024:	4b40      	ldr	r3, [pc, #256]	; (8006128 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2232      	movs	r2, #50	; 0x32
 800602a:	fb02 f303 	mul.w	r3, r2, r3
 800602e:	4a3f      	ldr	r2, [pc, #252]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006030:	fba2 2303 	umull	r2, r3, r2, r3
 8006034:	0c9b      	lsrs	r3, r3, #18
 8006036:	3301      	adds	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800603a:	e002      	b.n	8006042 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3b01      	subs	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006042:	4b38      	ldr	r3, [pc, #224]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800604a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800604e:	d102      	bne.n	8006056 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f2      	bne.n	800603c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006056:	4b33      	ldr	r3, [pc, #204]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006062:	d158      	bne.n	8006116 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e057      	b.n	8006118 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006068:	4b2e      	ldr	r3, [pc, #184]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800606a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800606e:	4a2d      	ldr	r2, [pc, #180]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006074:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006078:	e04d      	b.n	8006116 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006080:	d141      	bne.n	8006106 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006082:	4b28      	ldr	r3, [pc, #160]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800608a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608e:	d131      	bne.n	80060f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006090:	4b24      	ldr	r3, [pc, #144]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006096:	4a23      	ldr	r2, [pc, #140]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800609c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80060a0:	4b20      	ldr	r3, [pc, #128]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80060a8:	4a1e      	ldr	r2, [pc, #120]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060b0:	4b1d      	ldr	r3, [pc, #116]	; (8006128 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2232      	movs	r2, #50	; 0x32
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
 80060ba:	4a1c      	ldr	r2, [pc, #112]	; (800612c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80060bc:	fba2 2303 	umull	r2, r3, r2, r3
 80060c0:	0c9b      	lsrs	r3, r3, #18
 80060c2:	3301      	adds	r3, #1
 80060c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060c6:	e002      	b.n	80060ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060ce:	4b15      	ldr	r3, [pc, #84]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060da:	d102      	bne.n	80060e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f2      	bne.n	80060c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060e2:	4b10      	ldr	r3, [pc, #64]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ee:	d112      	bne.n	8006116 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e011      	b.n	8006118 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060f4:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060fa:	4a0a      	ldr	r2, [pc, #40]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006100:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006104:	e007      	b.n	8006116 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006106:	4b07      	ldr	r3, [pc, #28]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800610e:	4a05      	ldr	r2, [pc, #20]	; (8006124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006110:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006114:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	40007000 	.word	0x40007000
 8006128:	20000000 	.word	0x20000000
 800612c:	431bde83 	.word	0x431bde83

08006130 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8006134:	4b1c      	ldr	r3, [pc, #112]	; (80061a8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8006140:	f7ff ff4b 	bl	8005fda <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8006144:	4b18      	ldr	r3, [pc, #96]	; (80061a8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8006146:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800614a:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 800614c:	4b16      	ldr	r3, [pc, #88]	; (80061a8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800614e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8006158:	f000 f828 	bl	80061ac <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800615c:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800615e:	2208      	movs	r2, #8
 8006160:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0U)
 8006162:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8006164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006166:	f003 0310 	and.w	r3, r3, #16
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 800616e:	f000 f824 	bl	80061ba <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8006172:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8006174:	2210      	movs	r2, #16
 8006176:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800617a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617c:	f003 0320 	and.w	r3, r3, #32
 8006180:	2b00      	cmp	r3, #0
 8006182:	d004      	beq.n	800618e <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8006184:	f000 f820 	bl	80061c8 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8006188:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800618a:	2220      	movs	r2, #32
 800618c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0U)
 800618e:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8006190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d004      	beq.n	80061a4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 800619a:	f000 f81c 	bl	80061d6 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 800619e:	4b02      	ldr	r3, [pc, #8]	; (80061a8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80061a0:	2240      	movs	r2, #64	; 0x40
 80061a2:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80061a4:	bf00      	nop
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40010400 	.word	0x40010400

080061ac <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 80061ba:	b480      	push	{r7}
 80061bc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 80061be:	bf00      	nop
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 80061d6:	b480      	push	{r7}
 80061d8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80061e4:	b480      	push	{r7}
 80061e6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	4a04      	ldr	r2, [pc, #16]	; (8006200 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80061ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061f2:	6093      	str	r3, [r2, #8]
}
 80061f4:	bf00      	nop
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40007000 	.word	0x40007000

08006204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e308      	b.n	8006828 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d075      	beq.n	800630e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006222:	4ba3      	ldr	r3, [pc, #652]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 030c 	and.w	r3, r3, #12
 800622a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800622c:	4ba0      	ldr	r3, [pc, #640]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f003 0303 	and.w	r3, r3, #3
 8006234:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2b0c      	cmp	r3, #12
 800623a:	d102      	bne.n	8006242 <HAL_RCC_OscConfig+0x3e>
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2b03      	cmp	r3, #3
 8006240:	d002      	beq.n	8006248 <HAL_RCC_OscConfig+0x44>
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	2b08      	cmp	r3, #8
 8006246:	d10b      	bne.n	8006260 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006248:	4b99      	ldr	r3, [pc, #612]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d05b      	beq.n	800630c <HAL_RCC_OscConfig+0x108>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d157      	bne.n	800630c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e2e3      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006268:	d106      	bne.n	8006278 <HAL_RCC_OscConfig+0x74>
 800626a:	4b91      	ldr	r3, [pc, #580]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a90      	ldr	r2, [pc, #576]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 8006270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	e01d      	b.n	80062b4 <HAL_RCC_OscConfig+0xb0>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006280:	d10c      	bne.n	800629c <HAL_RCC_OscConfig+0x98>
 8006282:	4b8b      	ldr	r3, [pc, #556]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a8a      	ldr	r2, [pc, #552]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 8006288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	4b88      	ldr	r3, [pc, #544]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a87      	ldr	r2, [pc, #540]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 8006294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	e00b      	b.n	80062b4 <HAL_RCC_OscConfig+0xb0>
 800629c:	4b84      	ldr	r3, [pc, #528]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a83      	ldr	r2, [pc, #524]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 80062a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	4b81      	ldr	r3, [pc, #516]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a80      	ldr	r2, [pc, #512]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 80062ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d013      	beq.n	80062e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062bc:	f7fb fc66 	bl	8001b8c <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c4:	f7fb fc62 	bl	8001b8c <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b64      	cmp	r3, #100	; 0x64
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e2a8      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062d6:	4b76      	ldr	r3, [pc, #472]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0f0      	beq.n	80062c4 <HAL_RCC_OscConfig+0xc0>
 80062e2:	e014      	b.n	800630e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e4:	f7fb fc52 	bl	8001b8c <HAL_GetTick>
 80062e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062ea:	e008      	b.n	80062fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062ec:	f7fb fc4e 	bl	8001b8c <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b64      	cmp	r3, #100	; 0x64
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e294      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062fe:	4b6c      	ldr	r3, [pc, #432]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1f0      	bne.n	80062ec <HAL_RCC_OscConfig+0xe8>
 800630a:	e000      	b.n	800630e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800630c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d075      	beq.n	8006406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800631a:	4b65      	ldr	r3, [pc, #404]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 030c 	and.w	r3, r3, #12
 8006322:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006324:	4b62      	ldr	r3, [pc, #392]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0303 	and.w	r3, r3, #3
 800632c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	2b0c      	cmp	r3, #12
 8006332:	d102      	bne.n	800633a <HAL_RCC_OscConfig+0x136>
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d002      	beq.n	8006340 <HAL_RCC_OscConfig+0x13c>
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	2b04      	cmp	r3, #4
 800633e:	d11f      	bne.n	8006380 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006340:	4b5b      	ldr	r3, [pc, #364]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_RCC_OscConfig+0x154>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e267      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006358:	4b55      	ldr	r3, [pc, #340]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	061b      	lsls	r3, r3, #24
 8006366:	4952      	ldr	r1, [pc, #328]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 8006368:	4313      	orrs	r3, r2
 800636a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800636c:	4b51      	ldr	r3, [pc, #324]	; (80064b4 <HAL_RCC_OscConfig+0x2b0>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4618      	mov	r0, r3
 8006372:	f7fb fbbf 	bl	8001af4 <HAL_InitTick>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d043      	beq.n	8006404 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e253      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d023      	beq.n	80063d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006388:	4b49      	ldr	r3, [pc, #292]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a48      	ldr	r2, [pc, #288]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 800638e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006394:	f7fb fbfa 	bl	8001b8c <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800639c:	f7fb fbf6 	bl	8001b8c <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e23c      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063ae:	4b40      	ldr	r3, [pc, #256]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0f0      	beq.n	800639c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ba:	4b3d      	ldr	r3, [pc, #244]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	061b      	lsls	r3, r3, #24
 80063c8:	4939      	ldr	r1, [pc, #228]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	604b      	str	r3, [r1, #4]
 80063ce:	e01a      	b.n	8006406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063d0:	4b37      	ldr	r3, [pc, #220]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a36      	ldr	r2, [pc, #216]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 80063d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063dc:	f7fb fbd6 	bl	8001b8c <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063e4:	f7fb fbd2 	bl	8001b8c <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e218      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063f6:	4b2e      	ldr	r3, [pc, #184]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1f0      	bne.n	80063e4 <HAL_RCC_OscConfig+0x1e0>
 8006402:	e000      	b.n	8006406 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006404:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b00      	cmp	r3, #0
 8006410:	d03c      	beq.n	800648c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d01c      	beq.n	8006454 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800641a:	4b25      	ldr	r3, [pc, #148]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 800641c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006420:	4a23      	ldr	r2, [pc, #140]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 8006422:	f043 0301 	orr.w	r3, r3, #1
 8006426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800642a:	f7fb fbaf 	bl	8001b8c <HAL_GetTick>
 800642e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006432:	f7fb fbab 	bl	8001b8c <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e1f1      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006444:	4b1a      	ldr	r3, [pc, #104]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 8006446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0ef      	beq.n	8006432 <HAL_RCC_OscConfig+0x22e>
 8006452:	e01b      	b.n	800648c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006454:	4b16      	ldr	r3, [pc, #88]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 8006456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800645a:	4a15      	ldr	r2, [pc, #84]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 800645c:	f023 0301 	bic.w	r3, r3, #1
 8006460:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006464:	f7fb fb92 	bl	8001b8c <HAL_GetTick>
 8006468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800646c:	f7fb fb8e 	bl	8001b8c <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e1d4      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800647e:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 8006480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1ef      	bne.n	800646c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 80ab 	beq.w	80065f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800649a:	2300      	movs	r3, #0
 800649c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800649e:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <HAL_RCC_OscConfig+0x2ac>)
 80064a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_RCC_OscConfig+0x2b4>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e005      	b.n	80064ba <HAL_RCC_OscConfig+0x2b6>
 80064ae:	bf00      	nop
 80064b0:	40021000 	.word	0x40021000
 80064b4:	20000004 	.word	0x20000004
 80064b8:	2300      	movs	r3, #0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00d      	beq.n	80064da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064be:	4baf      	ldr	r3, [pc, #700]	; (800677c <HAL_RCC_OscConfig+0x578>)
 80064c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c2:	4aae      	ldr	r2, [pc, #696]	; (800677c <HAL_RCC_OscConfig+0x578>)
 80064c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c8:	6593      	str	r3, [r2, #88]	; 0x58
 80064ca:	4bac      	ldr	r3, [pc, #688]	; (800677c <HAL_RCC_OscConfig+0x578>)
 80064cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80064d6:	2301      	movs	r3, #1
 80064d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064da:	4ba9      	ldr	r3, [pc, #676]	; (8006780 <HAL_RCC_OscConfig+0x57c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d118      	bne.n	8006518 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064e6:	4ba6      	ldr	r3, [pc, #664]	; (8006780 <HAL_RCC_OscConfig+0x57c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4aa5      	ldr	r2, [pc, #660]	; (8006780 <HAL_RCC_OscConfig+0x57c>)
 80064ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064f2:	f7fb fb4b 	bl	8001b8c <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064fa:	f7fb fb47 	bl	8001b8c <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e18d      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800650c:	4b9c      	ldr	r3, [pc, #624]	; (8006780 <HAL_RCC_OscConfig+0x57c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f0      	beq.n	80064fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d108      	bne.n	8006532 <HAL_RCC_OscConfig+0x32e>
 8006520:	4b96      	ldr	r3, [pc, #600]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006526:	4a95      	ldr	r2, [pc, #596]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006528:	f043 0301 	orr.w	r3, r3, #1
 800652c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006530:	e024      	b.n	800657c <HAL_RCC_OscConfig+0x378>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2b05      	cmp	r3, #5
 8006538:	d110      	bne.n	800655c <HAL_RCC_OscConfig+0x358>
 800653a:	4b90      	ldr	r3, [pc, #576]	; (800677c <HAL_RCC_OscConfig+0x578>)
 800653c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006540:	4a8e      	ldr	r2, [pc, #568]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006542:	f043 0304 	orr.w	r3, r3, #4
 8006546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800654a:	4b8c      	ldr	r3, [pc, #560]	; (800677c <HAL_RCC_OscConfig+0x578>)
 800654c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006550:	4a8a      	ldr	r2, [pc, #552]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006552:	f043 0301 	orr.w	r3, r3, #1
 8006556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800655a:	e00f      	b.n	800657c <HAL_RCC_OscConfig+0x378>
 800655c:	4b87      	ldr	r3, [pc, #540]	; (800677c <HAL_RCC_OscConfig+0x578>)
 800655e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006562:	4a86      	ldr	r2, [pc, #536]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006564:	f023 0301 	bic.w	r3, r3, #1
 8006568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800656c:	4b83      	ldr	r3, [pc, #524]	; (800677c <HAL_RCC_OscConfig+0x578>)
 800656e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006572:	4a82      	ldr	r2, [pc, #520]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006574:	f023 0304 	bic.w	r3, r3, #4
 8006578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d016      	beq.n	80065b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006584:	f7fb fb02 	bl	8001b8c <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800658a:	e00a      	b.n	80065a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800658c:	f7fb fafe 	bl	8001b8c <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	f241 3288 	movw	r2, #5000	; 0x1388
 800659a:	4293      	cmp	r3, r2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e142      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065a2:	4b76      	ldr	r3, [pc, #472]	; (800677c <HAL_RCC_OscConfig+0x578>)
 80065a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0ed      	beq.n	800658c <HAL_RCC_OscConfig+0x388>
 80065b0:	e015      	b.n	80065de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b2:	f7fb faeb 	bl	8001b8c <HAL_GetTick>
 80065b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065b8:	e00a      	b.n	80065d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ba:	f7fb fae7 	bl	8001b8c <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d901      	bls.n	80065d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e12b      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065d0:	4b6a      	ldr	r3, [pc, #424]	; (800677c <HAL_RCC_OscConfig+0x578>)
 80065d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1ed      	bne.n	80065ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065de:	7ffb      	ldrb	r3, [r7, #31]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d105      	bne.n	80065f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065e4:	4b65      	ldr	r3, [pc, #404]	; (800677c <HAL_RCC_OscConfig+0x578>)
 80065e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e8:	4a64      	ldr	r2, [pc, #400]	; (800677c <HAL_RCC_OscConfig+0x578>)
 80065ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d03c      	beq.n	8006676 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01c      	beq.n	800663e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006604:	4b5d      	ldr	r3, [pc, #372]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006606:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800660a:	4a5c      	ldr	r2, [pc, #368]	; (800677c <HAL_RCC_OscConfig+0x578>)
 800660c:	f043 0301 	orr.w	r3, r3, #1
 8006610:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006614:	f7fb faba 	bl	8001b8c <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800661c:	f7fb fab6 	bl	8001b8c <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e0fc      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800662e:	4b53      	ldr	r3, [pc, #332]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0ef      	beq.n	800661c <HAL_RCC_OscConfig+0x418>
 800663c:	e01b      	b.n	8006676 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800663e:	4b4f      	ldr	r3, [pc, #316]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006644:	4a4d      	ldr	r2, [pc, #308]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664e:	f7fb fa9d 	bl	8001b8c <HAL_GetTick>
 8006652:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006654:	e008      	b.n	8006668 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006656:	f7fb fa99 	bl	8001b8c <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e0df      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006668:	4b44      	ldr	r3, [pc, #272]	; (800677c <HAL_RCC_OscConfig+0x578>)
 800666a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1ef      	bne.n	8006656 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 80d3 	beq.w	8006826 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006680:	4b3e      	ldr	r3, [pc, #248]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 030c 	and.w	r3, r3, #12
 8006688:	2b0c      	cmp	r3, #12
 800668a:	f000 808d 	beq.w	80067a8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d15a      	bne.n	800674c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006696:	4b39      	ldr	r3, [pc, #228]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a38      	ldr	r2, [pc, #224]	; (800677c <HAL_RCC_OscConfig+0x578>)
 800669c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a2:	f7fb fa73 	bl	8001b8c <HAL_GetTick>
 80066a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066a8:	e008      	b.n	80066bc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066aa:	f7fb fa6f 	bl	8001b8c <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e0b5      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066bc:	4b2f      	ldr	r3, [pc, #188]	; (800677c <HAL_RCC_OscConfig+0x578>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1f0      	bne.n	80066aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066c8:	4b2c      	ldr	r3, [pc, #176]	; (800677c <HAL_RCC_OscConfig+0x578>)
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	4b2d      	ldr	r3, [pc, #180]	; (8006784 <HAL_RCC_OscConfig+0x580>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6a11      	ldr	r1, [r2, #32]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066d8:	3a01      	subs	r2, #1
 80066da:	0112      	lsls	r2, r2, #4
 80066dc:	4311      	orrs	r1, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80066e2:	0212      	lsls	r2, r2, #8
 80066e4:	4311      	orrs	r1, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80066ea:	0852      	lsrs	r2, r2, #1
 80066ec:	3a01      	subs	r2, #1
 80066ee:	0552      	lsls	r2, r2, #21
 80066f0:	4311      	orrs	r1, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066f6:	0852      	lsrs	r2, r2, #1
 80066f8:	3a01      	subs	r2, #1
 80066fa:	0652      	lsls	r2, r2, #25
 80066fc:	4311      	orrs	r1, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006702:	06d2      	lsls	r2, r2, #27
 8006704:	430a      	orrs	r2, r1
 8006706:	491d      	ldr	r1, [pc, #116]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006708:	4313      	orrs	r3, r2
 800670a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800670c:	4b1b      	ldr	r3, [pc, #108]	; (800677c <HAL_RCC_OscConfig+0x578>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a1a      	ldr	r2, [pc, #104]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006716:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006718:	4b18      	ldr	r3, [pc, #96]	; (800677c <HAL_RCC_OscConfig+0x578>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4a17      	ldr	r2, [pc, #92]	; (800677c <HAL_RCC_OscConfig+0x578>)
 800671e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006722:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006724:	f7fb fa32 	bl	8001b8c <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800672c:	f7fb fa2e 	bl	8001b8c <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e074      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800673e:	4b0f      	ldr	r3, [pc, #60]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0f0      	beq.n	800672c <HAL_RCC_OscConfig+0x528>
 800674a:	e06c      	b.n	8006826 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <HAL_RCC_OscConfig+0x578>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a0a      	ldr	r2, [pc, #40]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006756:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006758:	4b08      	ldr	r3, [pc, #32]	; (800677c <HAL_RCC_OscConfig+0x578>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4a07      	ldr	r2, [pc, #28]	; (800677c <HAL_RCC_OscConfig+0x578>)
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <HAL_RCC_OscConfig+0x578>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	4a04      	ldr	r2, [pc, #16]	; (800677c <HAL_RCC_OscConfig+0x578>)
 800676a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800676e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006772:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006774:	f7fb fa0a 	bl	8001b8c <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800677a:	e00e      	b.n	800679a <HAL_RCC_OscConfig+0x596>
 800677c:	40021000 	.word	0x40021000
 8006780:	40007000 	.word	0x40007000
 8006784:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006788:	f7fb fa00 	bl	8001b8c <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e046      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800679a:	4b25      	ldr	r3, [pc, #148]	; (8006830 <HAL_RCC_OscConfig+0x62c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1f0      	bne.n	8006788 <HAL_RCC_OscConfig+0x584>
 80067a6:	e03e      	b.n	8006826 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e039      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80067b4:	4b1e      	ldr	r3, [pc, #120]	; (8006830 <HAL_RCC_OscConfig+0x62c>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f003 0203 	and.w	r2, r3, #3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d12c      	bne.n	8006822 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	3b01      	subs	r3, #1
 80067d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d123      	bne.n	8006822 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d11b      	bne.n	8006822 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d113      	bne.n	8006822 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	085b      	lsrs	r3, r3, #1
 8006806:	3b01      	subs	r3, #1
 8006808:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800680a:	429a      	cmp	r2, r3
 800680c:	d109      	bne.n	8006822 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006818:	085b      	lsrs	r3, r3, #1
 800681a:	3b01      	subs	r3, #1
 800681c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800681e:	429a      	cmp	r2, r3
 8006820:	d001      	beq.n	8006826 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40021000 	.word	0x40021000

08006834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800683e:	2300      	movs	r3, #0
 8006840:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e11e      	b.n	8006a8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800684c:	4b91      	ldr	r3, [pc, #580]	; (8006a94 <HAL_RCC_ClockConfig+0x260>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d910      	bls.n	800687c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685a:	4b8e      	ldr	r3, [pc, #568]	; (8006a94 <HAL_RCC_ClockConfig+0x260>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f023 020f 	bic.w	r2, r3, #15
 8006862:	498c      	ldr	r1, [pc, #560]	; (8006a94 <HAL_RCC_ClockConfig+0x260>)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	4313      	orrs	r3, r2
 8006868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800686a:	4b8a      	ldr	r3, [pc, #552]	; (8006a94 <HAL_RCC_ClockConfig+0x260>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	429a      	cmp	r2, r3
 8006876:	d001      	beq.n	800687c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e106      	b.n	8006a8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d073      	beq.n	8006970 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b03      	cmp	r3, #3
 800688e:	d129      	bne.n	80068e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006890:	4b81      	ldr	r3, [pc, #516]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0f4      	b.n	8006a8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80068a0:	f000 f99e 	bl	8006be0 <RCC_GetSysClockFreqFromPLLSource>
 80068a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	4a7c      	ldr	r2, [pc, #496]	; (8006a9c <HAL_RCC_ClockConfig+0x268>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d93f      	bls.n	800692e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80068ae:	4b7a      	ldr	r3, [pc, #488]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d009      	beq.n	80068ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d033      	beq.n	800692e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d12f      	bne.n	800692e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068ce:	4b72      	ldr	r3, [pc, #456]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068d6:	4a70      	ldr	r2, [pc, #448]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 80068d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80068de:	2380      	movs	r3, #128	; 0x80
 80068e0:	617b      	str	r3, [r7, #20]
 80068e2:	e024      	b.n	800692e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d107      	bne.n	80068fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068ec:	4b6a      	ldr	r3, [pc, #424]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d109      	bne.n	800690c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e0c6      	b.n	8006a8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068fc:	4b66      	ldr	r3, [pc, #408]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e0be      	b.n	8006a8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800690c:	f000 f8ce 	bl	8006aac <HAL_RCC_GetSysClockFreq>
 8006910:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	4a61      	ldr	r2, [pc, #388]	; (8006a9c <HAL_RCC_ClockConfig+0x268>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d909      	bls.n	800692e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800691a:	4b5f      	ldr	r3, [pc, #380]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006922:	4a5d      	ldr	r2, [pc, #372]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 8006924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006928:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800692a:	2380      	movs	r3, #128	; 0x80
 800692c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800692e:	4b5a      	ldr	r3, [pc, #360]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f023 0203 	bic.w	r2, r3, #3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	4957      	ldr	r1, [pc, #348]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 800693c:	4313      	orrs	r3, r2
 800693e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006940:	f7fb f924 	bl	8001b8c <HAL_GetTick>
 8006944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006946:	e00a      	b.n	800695e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006948:	f7fb f920 	bl	8001b8c <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	f241 3288 	movw	r2, #5000	; 0x1388
 8006956:	4293      	cmp	r3, r2
 8006958:	d901      	bls.n	800695e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e095      	b.n	8006a8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800695e:	4b4e      	ldr	r3, [pc, #312]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 020c 	and.w	r2, r3, #12
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	429a      	cmp	r2, r3
 800696e:	d1eb      	bne.n	8006948 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d023      	beq.n	80069c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d005      	beq.n	8006994 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006988:	4b43      	ldr	r3, [pc, #268]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	4a42      	ldr	r2, [pc, #264]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 800698e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006992:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0308 	and.w	r3, r3, #8
 800699c:	2b00      	cmp	r3, #0
 800699e:	d007      	beq.n	80069b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80069a0:	4b3d      	ldr	r3, [pc, #244]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069a8:	4a3b      	ldr	r2, [pc, #236]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 80069aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80069ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069b0:	4b39      	ldr	r3, [pc, #228]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	4936      	ldr	r1, [pc, #216]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	608b      	str	r3, [r1, #8]
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2b80      	cmp	r3, #128	; 0x80
 80069c8:	d105      	bne.n	80069d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80069ca:	4b33      	ldr	r3, [pc, #204]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	4a32      	ldr	r2, [pc, #200]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 80069d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069d6:	4b2f      	ldr	r3, [pc, #188]	; (8006a94 <HAL_RCC_ClockConfig+0x260>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d21d      	bcs.n	8006a20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e4:	4b2b      	ldr	r3, [pc, #172]	; (8006a94 <HAL_RCC_ClockConfig+0x260>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f023 020f 	bic.w	r2, r3, #15
 80069ec:	4929      	ldr	r1, [pc, #164]	; (8006a94 <HAL_RCC_ClockConfig+0x260>)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80069f4:	f7fb f8ca 	bl	8001b8c <HAL_GetTick>
 80069f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069fa:	e00a      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069fc:	f7fb f8c6 	bl	8001b8c <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e03b      	b.n	8006a8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a12:	4b20      	ldr	r3, [pc, #128]	; (8006a94 <HAL_RCC_ClockConfig+0x260>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d1ed      	bne.n	80069fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0304 	and.w	r3, r3, #4
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d008      	beq.n	8006a3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a2c:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	4917      	ldr	r1, [pc, #92]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0308 	and.w	r3, r3, #8
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a4a:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	490f      	ldr	r1, [pc, #60]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a5e:	f000 f825 	bl	8006aac <HAL_RCC_GetSysClockFreq>
 8006a62:	4602      	mov	r2, r0
 8006a64:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <HAL_RCC_ClockConfig+0x264>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	091b      	lsrs	r3, r3, #4
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	490c      	ldr	r1, [pc, #48]	; (8006aa0 <HAL_RCC_ClockConfig+0x26c>)
 8006a70:	5ccb      	ldrb	r3, [r1, r3]
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7a:	4a0a      	ldr	r2, [pc, #40]	; (8006aa4 <HAL_RCC_ClockConfig+0x270>)
 8006a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a7e:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <HAL_RCC_ClockConfig+0x274>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fb f836 	bl	8001af4 <HAL_InitTick>
 8006a88:	4603      	mov	r3, r0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	40022000 	.word	0x40022000
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	04c4b400 	.word	0x04c4b400
 8006aa0:	0800c1dc 	.word	0x0800c1dc
 8006aa4:	20000000 	.word	0x20000000
 8006aa8:	20000004 	.word	0x20000004

08006aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006ab2:	4b2c      	ldr	r3, [pc, #176]	; (8006b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 030c 	and.w	r3, r3, #12
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d102      	bne.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006abe:	4b2a      	ldr	r3, [pc, #168]	; (8006b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ac0:	613b      	str	r3, [r7, #16]
 8006ac2:	e047      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006ac4:	4b27      	ldr	r3, [pc, #156]	; (8006b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f003 030c 	and.w	r3, r3, #12
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d102      	bne.n	8006ad6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ad0:	4b26      	ldr	r3, [pc, #152]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	e03e      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006ad6:	4b23      	ldr	r3, [pc, #140]	; (8006b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 030c 	and.w	r3, r3, #12
 8006ade:	2b0c      	cmp	r3, #12
 8006ae0:	d136      	bne.n	8006b50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ae2:	4b20      	ldr	r3, [pc, #128]	; (8006b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006aec:	4b1d      	ldr	r3, [pc, #116]	; (8006b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	091b      	lsrs	r3, r3, #4
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	3301      	adds	r3, #1
 8006af8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d10c      	bne.n	8006b1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b00:	4a1a      	ldr	r2, [pc, #104]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b08:	4a16      	ldr	r2, [pc, #88]	; (8006b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b0a:	68d2      	ldr	r2, [r2, #12]
 8006b0c:	0a12      	lsrs	r2, r2, #8
 8006b0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b12:	fb02 f303 	mul.w	r3, r2, r3
 8006b16:	617b      	str	r3, [r7, #20]
      break;
 8006b18:	e00c      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b1a:	4a13      	ldr	r2, [pc, #76]	; (8006b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b22:	4a10      	ldr	r2, [pc, #64]	; (8006b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b24:	68d2      	ldr	r2, [r2, #12]
 8006b26:	0a12      	lsrs	r2, r2, #8
 8006b28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b2c:	fb02 f303 	mul.w	r3, r2, r3
 8006b30:	617b      	str	r3, [r7, #20]
      break;
 8006b32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b34:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	0e5b      	lsrs	r3, r3, #25
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	3301      	adds	r3, #1
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4c:	613b      	str	r3, [r7, #16]
 8006b4e:	e001      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006b54:	693b      	ldr	r3, [r7, #16]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	40021000 	.word	0x40021000
 8006b68:	00f42400 	.word	0x00f42400
 8006b6c:	016e3600 	.word	0x016e3600

08006b70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b74:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b76:	681b      	ldr	r3, [r3, #0]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000000 	.word	0x20000000

08006b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b8c:	f7ff fff0 	bl	8006b70 <HAL_RCC_GetHCLKFreq>
 8006b90:	4602      	mov	r2, r0
 8006b92:	4b06      	ldr	r3, [pc, #24]	; (8006bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	0a1b      	lsrs	r3, r3, #8
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	4904      	ldr	r1, [pc, #16]	; (8006bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b9e:	5ccb      	ldrb	r3, [r1, r3]
 8006ba0:	f003 031f 	and.w	r3, r3, #31
 8006ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	0800c1ec 	.word	0x0800c1ec

08006bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006bb8:	f7ff ffda 	bl	8006b70 <HAL_RCC_GetHCLKFreq>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	0adb      	lsrs	r3, r3, #11
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	4904      	ldr	r1, [pc, #16]	; (8006bdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bca:	5ccb      	ldrb	r3, [r1, r3]
 8006bcc:	f003 031f 	and.w	r3, r3, #31
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	40021000 	.word	0x40021000
 8006bdc:	0800c1ec 	.word	0x0800c1ec

08006be0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006be6:	4b1e      	ldr	r3, [pc, #120]	; (8006c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f003 0303 	and.w	r3, r3, #3
 8006bee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006bf0:	4b1b      	ldr	r3, [pc, #108]	; (8006c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	091b      	lsrs	r3, r3, #4
 8006bf6:	f003 030f 	and.w	r3, r3, #15
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d10c      	bne.n	8006c1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c04:	4a17      	ldr	r2, [pc, #92]	; (8006c64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0c:	4a14      	ldr	r2, [pc, #80]	; (8006c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c0e:	68d2      	ldr	r2, [r2, #12]
 8006c10:	0a12      	lsrs	r2, r2, #8
 8006c12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c16:	fb02 f303 	mul.w	r3, r2, r3
 8006c1a:	617b      	str	r3, [r7, #20]
    break;
 8006c1c:	e00c      	b.n	8006c38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c1e:	4a12      	ldr	r2, [pc, #72]	; (8006c68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c26:	4a0e      	ldr	r2, [pc, #56]	; (8006c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c28:	68d2      	ldr	r2, [r2, #12]
 8006c2a:	0a12      	lsrs	r2, r2, #8
 8006c2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c30:	fb02 f303 	mul.w	r3, r2, r3
 8006c34:	617b      	str	r3, [r7, #20]
    break;
 8006c36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c38:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	0e5b      	lsrs	r3, r3, #25
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	3301      	adds	r3, #1
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006c52:	687b      	ldr	r3, [r7, #4]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	371c      	adds	r7, #28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	40021000 	.word	0x40021000
 8006c64:	016e3600 	.word	0x016e3600
 8006c68:	00f42400 	.word	0x00f42400

08006c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c74:	2300      	movs	r3, #0
 8006c76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c78:	2300      	movs	r3, #0
 8006c7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 8098 	beq.w	8006dba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c8e:	4b43      	ldr	r3, [pc, #268]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10d      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c9a:	4b40      	ldr	r3, [pc, #256]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9e:	4a3f      	ldr	r2, [pc, #252]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8006ca6:	4b3d      	ldr	r3, [pc, #244]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cae:	60bb      	str	r3, [r7, #8]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cb6:	4b3a      	ldr	r3, [pc, #232]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a39      	ldr	r2, [pc, #228]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cc2:	f7fa ff63 	bl	8001b8c <HAL_GetTick>
 8006cc6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cc8:	e009      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cca:	f7fa ff5f 	bl	8001b8c <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d902      	bls.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	74fb      	strb	r3, [r7, #19]
        break;
 8006cdc:	e005      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cde:	4b30      	ldr	r3, [pc, #192]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0ef      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006cea:	7cfb      	ldrb	r3, [r7, #19]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d159      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006cf0:	4b2a      	ldr	r3, [pc, #168]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cfa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d01e      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d019      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d0c:	4b23      	ldr	r3, [pc, #140]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d18:	4b20      	ldr	r3, [pc, #128]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1e:	4a1f      	ldr	r2, [pc, #124]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d28:	4b1c      	ldr	r3, [pc, #112]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2e:	4a1b      	ldr	r2, [pc, #108]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d38:	4a18      	ldr	r2, [pc, #96]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d016      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4a:	f7fa ff1f 	bl	8001b8c <HAL_GetTick>
 8006d4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d50:	e00b      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d52:	f7fa ff1b 	bl	8001b8c <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d902      	bls.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	74fb      	strb	r3, [r7, #19]
            break;
 8006d68:	e006      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d6a:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d0ec      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006d78:	7cfb      	ldrb	r3, [r7, #19]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10b      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d7e:	4b07      	ldr	r3, [pc, #28]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8c:	4903      	ldr	r1, [pc, #12]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006d94:	e008      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d96:	7cfb      	ldrb	r3, [r7, #19]
 8006d98:	74bb      	strb	r3, [r7, #18]
 8006d9a:	e005      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006d9c:	40021000 	.word	0x40021000
 8006da0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da4:	7cfb      	ldrb	r3, [r7, #19]
 8006da6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006da8:	7c7b      	ldrb	r3, [r7, #17]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d105      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dae:	4baf      	ldr	r3, [pc, #700]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db2:	4aae      	ldr	r2, [pc, #696]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006db8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00a      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dc6:	4ba9      	ldr	r3, [pc, #676]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dcc:	f023 0203 	bic.w	r2, r3, #3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	49a5      	ldr	r1, [pc, #660]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00a      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006de8:	4ba0      	ldr	r3, [pc, #640]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dee:	f023 020c 	bic.w	r2, r3, #12
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	499d      	ldr	r1, [pc, #628]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00a      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e0a:	4b98      	ldr	r3, [pc, #608]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	4994      	ldr	r1, [pc, #592]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00a      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e2c:	4b8f      	ldr	r3, [pc, #572]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	498c      	ldr	r1, [pc, #560]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0310 	and.w	r3, r3, #16
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00a      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e4e:	4b87      	ldr	r3, [pc, #540]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	4983      	ldr	r1, [pc, #524]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00a      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e70:	4b7e      	ldr	r3, [pc, #504]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	497b      	ldr	r1, [pc, #492]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e92:	4b76      	ldr	r3, [pc, #472]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	4972      	ldr	r1, [pc, #456]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006eb4:	4b6d      	ldr	r3, [pc, #436]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	496a      	ldr	r1, [pc, #424]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ed6:	4b65      	ldr	r3, [pc, #404]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	4961      	ldr	r1, [pc, #388]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ef8:	4b5c      	ldr	r3, [pc, #368]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006efe:	f023 0203 	bic.w	r2, r3, #3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	4959      	ldr	r1, [pc, #356]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f1a:	4b54      	ldr	r3, [pc, #336]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	4950      	ldr	r1, [pc, #320]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d015      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f3c:	4b4b      	ldr	r3, [pc, #300]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	4948      	ldr	r1, [pc, #288]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f5a:	d105      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f5c:	4b43      	ldr	r3, [pc, #268]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	4a42      	ldr	r2, [pc, #264]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d015      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f74:	4b3d      	ldr	r3, [pc, #244]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f82:	493a      	ldr	r1, [pc, #232]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f92:	d105      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f94:	4b35      	ldr	r3, [pc, #212]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	4a34      	ldr	r2, [pc, #208]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f9e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d015      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fac:	4b2f      	ldr	r3, [pc, #188]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fba:	492c      	ldr	r1, [pc, #176]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fca:	d105      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fcc:	4b27      	ldr	r3, [pc, #156]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	4a26      	ldr	r2, [pc, #152]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fd6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d015      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fe4:	4b21      	ldr	r3, [pc, #132]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff2:	491e      	ldr	r1, [pc, #120]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007002:	d105      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007004:	4b19      	ldr	r3, [pc, #100]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	4a18      	ldr	r2, [pc, #96]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800700a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800700e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d015      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800701c:	4b13      	ldr	r3, [pc, #76]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800701e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007022:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	4910      	ldr	r1, [pc, #64]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800702c:	4313      	orrs	r3, r2
 800702e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800703a:	d105      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800703c:	4b0b      	ldr	r3, [pc, #44]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	4a0a      	ldr	r2, [pc, #40]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007046:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d018      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007054:	4b05      	ldr	r3, [pc, #20]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007062:	4902      	ldr	r1, [pc, #8]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007064:	4313      	orrs	r3, r2
 8007066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800706a:	e001      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800706c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007074:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007078:	d105      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800707a:	4b21      	ldr	r3, [pc, #132]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	4a20      	ldr	r2, [pc, #128]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007084:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d015      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007092:	4b1b      	ldr	r3, [pc, #108]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007098:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070a0:	4917      	ldr	r1, [pc, #92]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b0:	d105      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070b2:	4b13      	ldr	r3, [pc, #76]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	4a12      	ldr	r2, [pc, #72]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80070b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070bc:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d015      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070ca:	4b0d      	ldr	r3, [pc, #52]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80070cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d8:	4909      	ldr	r1, [pc, #36]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070e8:	d105      	bne.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070ea:	4b05      	ldr	r3, [pc, #20]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	4a04      	ldr	r2, [pc, #16]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80070f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070f4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80070f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40021000 	.word	0x40021000

08007104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e042      	b.n	800719c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800711c:	2b00      	cmp	r3, #0
 800711e:	d106      	bne.n	800712e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fa fa91 	bl	8001650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2224      	movs	r2, #36	; 0x24
 8007132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0201 	bic.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f8c2 	bl	80072d0 <UART_SetConfig>
 800714c:	4603      	mov	r3, r0
 800714e:	2b01      	cmp	r3, #1
 8007150:	d101      	bne.n	8007156 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e022      	b.n	800719c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fb86 	bl	8007870 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007172:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007182:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fc0d 	bl	80079b4 <UART_CheckIdleState>
 800719a:	4603      	mov	r3, r0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	; 0x28
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	603b      	str	r3, [r7, #0]
 80071b0:	4613      	mov	r3, r2
 80071b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	f040 8083 	bne.w	80072c6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <HAL_UART_Transmit+0x28>
 80071c6:	88fb      	ldrh	r3, [r7, #6]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e07b      	b.n	80072c8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d101      	bne.n	80071de <HAL_UART_Transmit+0x3a>
 80071da:	2302      	movs	r3, #2
 80071dc:	e074      	b.n	80072c8 <HAL_UART_Transmit+0x124>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2221      	movs	r2, #33	; 0x21
 80071f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071f6:	f7fa fcc9 	bl	8001b8c <HAL_GetTick>
 80071fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	88fa      	ldrh	r2, [r7, #6]
 8007200:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007214:	d108      	bne.n	8007228 <HAL_UART_Transmit+0x84>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d104      	bne.n	8007228 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800721e:	2300      	movs	r3, #0
 8007220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	e003      	b.n	8007230 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800722c:	2300      	movs	r3, #0
 800722e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8007238:	e02c      	b.n	8007294 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2200      	movs	r2, #0
 8007242:	2180      	movs	r1, #128	; 0x80
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 fbfd 	bl	8007a44 <UART_WaitOnFlagUntilTimeout>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e039      	b.n	80072c8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10b      	bne.n	8007272 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007268:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	3302      	adds	r3, #2
 800726e:	61bb      	str	r3, [r7, #24]
 8007270:	e007      	b.n	8007282 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	781a      	ldrb	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	3301      	adds	r3, #1
 8007280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007288:	b29b      	uxth	r3, r3
 800728a:	3b01      	subs	r3, #1
 800728c:	b29a      	uxth	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800729a:	b29b      	uxth	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1cc      	bne.n	800723a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	2200      	movs	r2, #0
 80072a8:	2140      	movs	r1, #64	; 0x40
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fbca 	bl	8007a44 <UART_WaitOnFlagUntilTimeout>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e006      	b.n	80072c8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2220      	movs	r2, #32
 80072be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	e000      	b.n	80072c8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80072c6:	2302      	movs	r3, #2
  }
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3720      	adds	r7, #32
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d0:	b5b0      	push	{r4, r5, r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	431a      	orrs	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	4bb1      	ldr	r3, [pc, #708]	; (80075cc <UART_SetConfig+0x2fc>)
 8007306:	4013      	ands	r3, r2
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	6812      	ldr	r2, [r2, #0]
 800730c:	69f9      	ldr	r1, [r7, #28]
 800730e:	430b      	orrs	r3, r1
 8007310:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68da      	ldr	r2, [r3, #12]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4aa7      	ldr	r2, [pc, #668]	; (80075d0 <UART_SetConfig+0x300>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d004      	beq.n	8007342 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	4313      	orrs	r3, r2
 8007340:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800734c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	6812      	ldr	r2, [r2, #0]
 8007354:	69f9      	ldr	r1, [r7, #28]
 8007356:	430b      	orrs	r3, r1
 8007358:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	f023 010f 	bic.w	r1, r3, #15
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a97      	ldr	r2, [pc, #604]	; (80075d4 <UART_SetConfig+0x304>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d121      	bne.n	80073be <UART_SetConfig+0xee>
 800737a:	4b97      	ldr	r3, [pc, #604]	; (80075d8 <UART_SetConfig+0x308>)
 800737c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007380:	f003 0303 	and.w	r3, r3, #3
 8007384:	2b03      	cmp	r3, #3
 8007386:	d817      	bhi.n	80073b8 <UART_SetConfig+0xe8>
 8007388:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <UART_SetConfig+0xc0>)
 800738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738e:	bf00      	nop
 8007390:	080073a1 	.word	0x080073a1
 8007394:	080073ad 	.word	0x080073ad
 8007398:	080073a7 	.word	0x080073a7
 800739c:	080073b3 	.word	0x080073b3
 80073a0:	2301      	movs	r3, #1
 80073a2:	76fb      	strb	r3, [r7, #27]
 80073a4:	e0e7      	b.n	8007576 <UART_SetConfig+0x2a6>
 80073a6:	2302      	movs	r3, #2
 80073a8:	76fb      	strb	r3, [r7, #27]
 80073aa:	e0e4      	b.n	8007576 <UART_SetConfig+0x2a6>
 80073ac:	2304      	movs	r3, #4
 80073ae:	76fb      	strb	r3, [r7, #27]
 80073b0:	e0e1      	b.n	8007576 <UART_SetConfig+0x2a6>
 80073b2:	2308      	movs	r3, #8
 80073b4:	76fb      	strb	r3, [r7, #27]
 80073b6:	e0de      	b.n	8007576 <UART_SetConfig+0x2a6>
 80073b8:	2310      	movs	r3, #16
 80073ba:	76fb      	strb	r3, [r7, #27]
 80073bc:	e0db      	b.n	8007576 <UART_SetConfig+0x2a6>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a86      	ldr	r2, [pc, #536]	; (80075dc <UART_SetConfig+0x30c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d132      	bne.n	800742e <UART_SetConfig+0x15e>
 80073c8:	4b83      	ldr	r3, [pc, #524]	; (80075d8 <UART_SetConfig+0x308>)
 80073ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ce:	f003 030c 	and.w	r3, r3, #12
 80073d2:	2b0c      	cmp	r3, #12
 80073d4:	d828      	bhi.n	8007428 <UART_SetConfig+0x158>
 80073d6:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <UART_SetConfig+0x10c>)
 80073d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073dc:	08007411 	.word	0x08007411
 80073e0:	08007429 	.word	0x08007429
 80073e4:	08007429 	.word	0x08007429
 80073e8:	08007429 	.word	0x08007429
 80073ec:	0800741d 	.word	0x0800741d
 80073f0:	08007429 	.word	0x08007429
 80073f4:	08007429 	.word	0x08007429
 80073f8:	08007429 	.word	0x08007429
 80073fc:	08007417 	.word	0x08007417
 8007400:	08007429 	.word	0x08007429
 8007404:	08007429 	.word	0x08007429
 8007408:	08007429 	.word	0x08007429
 800740c:	08007423 	.word	0x08007423
 8007410:	2300      	movs	r3, #0
 8007412:	76fb      	strb	r3, [r7, #27]
 8007414:	e0af      	b.n	8007576 <UART_SetConfig+0x2a6>
 8007416:	2302      	movs	r3, #2
 8007418:	76fb      	strb	r3, [r7, #27]
 800741a:	e0ac      	b.n	8007576 <UART_SetConfig+0x2a6>
 800741c:	2304      	movs	r3, #4
 800741e:	76fb      	strb	r3, [r7, #27]
 8007420:	e0a9      	b.n	8007576 <UART_SetConfig+0x2a6>
 8007422:	2308      	movs	r3, #8
 8007424:	76fb      	strb	r3, [r7, #27]
 8007426:	e0a6      	b.n	8007576 <UART_SetConfig+0x2a6>
 8007428:	2310      	movs	r3, #16
 800742a:	76fb      	strb	r3, [r7, #27]
 800742c:	e0a3      	b.n	8007576 <UART_SetConfig+0x2a6>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a6b      	ldr	r2, [pc, #428]	; (80075e0 <UART_SetConfig+0x310>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d120      	bne.n	800747a <UART_SetConfig+0x1aa>
 8007438:	4b67      	ldr	r3, [pc, #412]	; (80075d8 <UART_SetConfig+0x308>)
 800743a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800743e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007442:	2b30      	cmp	r3, #48	; 0x30
 8007444:	d013      	beq.n	800746e <UART_SetConfig+0x19e>
 8007446:	2b30      	cmp	r3, #48	; 0x30
 8007448:	d814      	bhi.n	8007474 <UART_SetConfig+0x1a4>
 800744a:	2b20      	cmp	r3, #32
 800744c:	d009      	beq.n	8007462 <UART_SetConfig+0x192>
 800744e:	2b20      	cmp	r3, #32
 8007450:	d810      	bhi.n	8007474 <UART_SetConfig+0x1a4>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <UART_SetConfig+0x18c>
 8007456:	2b10      	cmp	r3, #16
 8007458:	d006      	beq.n	8007468 <UART_SetConfig+0x198>
 800745a:	e00b      	b.n	8007474 <UART_SetConfig+0x1a4>
 800745c:	2300      	movs	r3, #0
 800745e:	76fb      	strb	r3, [r7, #27]
 8007460:	e089      	b.n	8007576 <UART_SetConfig+0x2a6>
 8007462:	2302      	movs	r3, #2
 8007464:	76fb      	strb	r3, [r7, #27]
 8007466:	e086      	b.n	8007576 <UART_SetConfig+0x2a6>
 8007468:	2304      	movs	r3, #4
 800746a:	76fb      	strb	r3, [r7, #27]
 800746c:	e083      	b.n	8007576 <UART_SetConfig+0x2a6>
 800746e:	2308      	movs	r3, #8
 8007470:	76fb      	strb	r3, [r7, #27]
 8007472:	e080      	b.n	8007576 <UART_SetConfig+0x2a6>
 8007474:	2310      	movs	r3, #16
 8007476:	76fb      	strb	r3, [r7, #27]
 8007478:	e07d      	b.n	8007576 <UART_SetConfig+0x2a6>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a59      	ldr	r2, [pc, #356]	; (80075e4 <UART_SetConfig+0x314>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d120      	bne.n	80074c6 <UART_SetConfig+0x1f6>
 8007484:	4b54      	ldr	r3, [pc, #336]	; (80075d8 <UART_SetConfig+0x308>)
 8007486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800748a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800748e:	2bc0      	cmp	r3, #192	; 0xc0
 8007490:	d013      	beq.n	80074ba <UART_SetConfig+0x1ea>
 8007492:	2bc0      	cmp	r3, #192	; 0xc0
 8007494:	d814      	bhi.n	80074c0 <UART_SetConfig+0x1f0>
 8007496:	2b80      	cmp	r3, #128	; 0x80
 8007498:	d009      	beq.n	80074ae <UART_SetConfig+0x1de>
 800749a:	2b80      	cmp	r3, #128	; 0x80
 800749c:	d810      	bhi.n	80074c0 <UART_SetConfig+0x1f0>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <UART_SetConfig+0x1d8>
 80074a2:	2b40      	cmp	r3, #64	; 0x40
 80074a4:	d006      	beq.n	80074b4 <UART_SetConfig+0x1e4>
 80074a6:	e00b      	b.n	80074c0 <UART_SetConfig+0x1f0>
 80074a8:	2300      	movs	r3, #0
 80074aa:	76fb      	strb	r3, [r7, #27]
 80074ac:	e063      	b.n	8007576 <UART_SetConfig+0x2a6>
 80074ae:	2302      	movs	r3, #2
 80074b0:	76fb      	strb	r3, [r7, #27]
 80074b2:	e060      	b.n	8007576 <UART_SetConfig+0x2a6>
 80074b4:	2304      	movs	r3, #4
 80074b6:	76fb      	strb	r3, [r7, #27]
 80074b8:	e05d      	b.n	8007576 <UART_SetConfig+0x2a6>
 80074ba:	2308      	movs	r3, #8
 80074bc:	76fb      	strb	r3, [r7, #27]
 80074be:	e05a      	b.n	8007576 <UART_SetConfig+0x2a6>
 80074c0:	2310      	movs	r3, #16
 80074c2:	76fb      	strb	r3, [r7, #27]
 80074c4:	e057      	b.n	8007576 <UART_SetConfig+0x2a6>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a47      	ldr	r2, [pc, #284]	; (80075e8 <UART_SetConfig+0x318>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d125      	bne.n	800751c <UART_SetConfig+0x24c>
 80074d0:	4b41      	ldr	r3, [pc, #260]	; (80075d8 <UART_SetConfig+0x308>)
 80074d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074de:	d017      	beq.n	8007510 <UART_SetConfig+0x240>
 80074e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074e4:	d817      	bhi.n	8007516 <UART_SetConfig+0x246>
 80074e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ea:	d00b      	beq.n	8007504 <UART_SetConfig+0x234>
 80074ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f0:	d811      	bhi.n	8007516 <UART_SetConfig+0x246>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <UART_SetConfig+0x22e>
 80074f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074fa:	d006      	beq.n	800750a <UART_SetConfig+0x23a>
 80074fc:	e00b      	b.n	8007516 <UART_SetConfig+0x246>
 80074fe:	2300      	movs	r3, #0
 8007500:	76fb      	strb	r3, [r7, #27]
 8007502:	e038      	b.n	8007576 <UART_SetConfig+0x2a6>
 8007504:	2302      	movs	r3, #2
 8007506:	76fb      	strb	r3, [r7, #27]
 8007508:	e035      	b.n	8007576 <UART_SetConfig+0x2a6>
 800750a:	2304      	movs	r3, #4
 800750c:	76fb      	strb	r3, [r7, #27]
 800750e:	e032      	b.n	8007576 <UART_SetConfig+0x2a6>
 8007510:	2308      	movs	r3, #8
 8007512:	76fb      	strb	r3, [r7, #27]
 8007514:	e02f      	b.n	8007576 <UART_SetConfig+0x2a6>
 8007516:	2310      	movs	r3, #16
 8007518:	76fb      	strb	r3, [r7, #27]
 800751a:	e02c      	b.n	8007576 <UART_SetConfig+0x2a6>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a2b      	ldr	r2, [pc, #172]	; (80075d0 <UART_SetConfig+0x300>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d125      	bne.n	8007572 <UART_SetConfig+0x2a2>
 8007526:	4b2c      	ldr	r3, [pc, #176]	; (80075d8 <UART_SetConfig+0x308>)
 8007528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007530:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007534:	d017      	beq.n	8007566 <UART_SetConfig+0x296>
 8007536:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800753a:	d817      	bhi.n	800756c <UART_SetConfig+0x29c>
 800753c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007540:	d00b      	beq.n	800755a <UART_SetConfig+0x28a>
 8007542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007546:	d811      	bhi.n	800756c <UART_SetConfig+0x29c>
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <UART_SetConfig+0x284>
 800754c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007550:	d006      	beq.n	8007560 <UART_SetConfig+0x290>
 8007552:	e00b      	b.n	800756c <UART_SetConfig+0x29c>
 8007554:	2300      	movs	r3, #0
 8007556:	76fb      	strb	r3, [r7, #27]
 8007558:	e00d      	b.n	8007576 <UART_SetConfig+0x2a6>
 800755a:	2302      	movs	r3, #2
 800755c:	76fb      	strb	r3, [r7, #27]
 800755e:	e00a      	b.n	8007576 <UART_SetConfig+0x2a6>
 8007560:	2304      	movs	r3, #4
 8007562:	76fb      	strb	r3, [r7, #27]
 8007564:	e007      	b.n	8007576 <UART_SetConfig+0x2a6>
 8007566:	2308      	movs	r3, #8
 8007568:	76fb      	strb	r3, [r7, #27]
 800756a:	e004      	b.n	8007576 <UART_SetConfig+0x2a6>
 800756c:	2310      	movs	r3, #16
 800756e:	76fb      	strb	r3, [r7, #27]
 8007570:	e001      	b.n	8007576 <UART_SetConfig+0x2a6>
 8007572:	2310      	movs	r3, #16
 8007574:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a15      	ldr	r2, [pc, #84]	; (80075d0 <UART_SetConfig+0x300>)
 800757c:	4293      	cmp	r3, r2
 800757e:	f040 809f 	bne.w	80076c0 <UART_SetConfig+0x3f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007582:	7efb      	ldrb	r3, [r7, #27]
 8007584:	2b08      	cmp	r3, #8
 8007586:	d837      	bhi.n	80075f8 <UART_SetConfig+0x328>
 8007588:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <UART_SetConfig+0x2c0>)
 800758a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758e:	bf00      	nop
 8007590:	080075b5 	.word	0x080075b5
 8007594:	080075f9 	.word	0x080075f9
 8007598:	080075bd 	.word	0x080075bd
 800759c:	080075f9 	.word	0x080075f9
 80075a0:	080075c3 	.word	0x080075c3
 80075a4:	080075f9 	.word	0x080075f9
 80075a8:	080075f9 	.word	0x080075f9
 80075ac:	080075f9 	.word	0x080075f9
 80075b0:	080075f1 	.word	0x080075f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075b4:	f7ff fae8 	bl	8006b88 <HAL_RCC_GetPCLK1Freq>
 80075b8:	6178      	str	r0, [r7, #20]
        break;
 80075ba:	e022      	b.n	8007602 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075bc:	4b0b      	ldr	r3, [pc, #44]	; (80075ec <UART_SetConfig+0x31c>)
 80075be:	617b      	str	r3, [r7, #20]
        break;
 80075c0:	e01f      	b.n	8007602 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075c2:	f7ff fa73 	bl	8006aac <HAL_RCC_GetSysClockFreq>
 80075c6:	6178      	str	r0, [r7, #20]
        break;
 80075c8:	e01b      	b.n	8007602 <UART_SetConfig+0x332>
 80075ca:	bf00      	nop
 80075cc:	cfff69f3 	.word	0xcfff69f3
 80075d0:	40008000 	.word	0x40008000
 80075d4:	40013800 	.word	0x40013800
 80075d8:	40021000 	.word	0x40021000
 80075dc:	40004400 	.word	0x40004400
 80075e0:	40004800 	.word	0x40004800
 80075e4:	40004c00 	.word	0x40004c00
 80075e8:	40005000 	.word	0x40005000
 80075ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075f4:	617b      	str	r3, [r7, #20]
        break;
 80075f6:	e004      	b.n	8007602 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	76bb      	strb	r3, [r7, #26]
        break;
 8007600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 811b 	beq.w	8007840 <UART_SetConfig+0x570>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	4a96      	ldr	r2, [pc, #600]	; (8007868 <UART_SetConfig+0x598>)
 8007610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007614:	461a      	mov	r2, r3
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	fbb3 f3f2 	udiv	r3, r3, r2
 800761c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	4413      	add	r3, r2
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	429a      	cmp	r2, r3
 800762c:	d305      	bcc.n	800763a <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	429a      	cmp	r2, r3
 8007638:	d902      	bls.n	8007640 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	76bb      	strb	r3, [r7, #26]
 800763e:	e0ff      	b.n	8007840 <UART_SetConfig+0x570>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	4618      	mov	r0, r3
 8007644:	f04f 0100 	mov.w	r1, #0
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	4a86      	ldr	r2, [pc, #536]	; (8007868 <UART_SetConfig+0x598>)
 800764e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007652:	b29a      	uxth	r2, r3
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	f7f9 f82a 	bl	80006b0 <__aeabi_uldivmod>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4610      	mov	r0, r2
 8007662:	4619      	mov	r1, r3
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	f04f 0300 	mov.w	r3, #0
 800766c:	020b      	lsls	r3, r1, #8
 800766e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007672:	0202      	lsls	r2, r0, #8
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	6849      	ldr	r1, [r1, #4]
 8007678:	0849      	lsrs	r1, r1, #1
 800767a:	4608      	mov	r0, r1
 800767c:	f04f 0100 	mov.w	r1, #0
 8007680:	1814      	adds	r4, r2, r0
 8007682:	eb43 0501 	adc.w	r5, r3, r1
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	461a      	mov	r2, r3
 800768c:	f04f 0300 	mov.w	r3, #0
 8007690:	4620      	mov	r0, r4
 8007692:	4629      	mov	r1, r5
 8007694:	f7f9 f80c 	bl	80006b0 <__aeabi_uldivmod>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	4613      	mov	r3, r2
 800769e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076a6:	d308      	bcc.n	80076ba <UART_SetConfig+0x3ea>
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ae:	d204      	bcs.n	80076ba <UART_SetConfig+0x3ea>
        {
          huart->Instance->BRR = usartdiv;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	60da      	str	r2, [r3, #12]
 80076b8:	e0c2      	b.n	8007840 <UART_SetConfig+0x570>
        }
        else
        {
          ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	76bb      	strb	r3, [r7, #26]
 80076be:	e0bf      	b.n	8007840 <UART_SetConfig+0x570>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076c8:	d165      	bne.n	8007796 <UART_SetConfig+0x4c6>
  {
    switch (clocksource)
 80076ca:	7efb      	ldrb	r3, [r7, #27]
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d828      	bhi.n	8007722 <UART_SetConfig+0x452>
 80076d0:	a201      	add	r2, pc, #4	; (adr r2, 80076d8 <UART_SetConfig+0x408>)
 80076d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d6:	bf00      	nop
 80076d8:	080076fd 	.word	0x080076fd
 80076dc:	08007705 	.word	0x08007705
 80076e0:	0800770d 	.word	0x0800770d
 80076e4:	08007723 	.word	0x08007723
 80076e8:	08007713 	.word	0x08007713
 80076ec:	08007723 	.word	0x08007723
 80076f0:	08007723 	.word	0x08007723
 80076f4:	08007723 	.word	0x08007723
 80076f8:	0800771b 	.word	0x0800771b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076fc:	f7ff fa44 	bl	8006b88 <HAL_RCC_GetPCLK1Freq>
 8007700:	6178      	str	r0, [r7, #20]
        break;
 8007702:	e013      	b.n	800772c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007704:	f7ff fa56 	bl	8006bb4 <HAL_RCC_GetPCLK2Freq>
 8007708:	6178      	str	r0, [r7, #20]
        break;
 800770a:	e00f      	b.n	800772c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800770c:	4b57      	ldr	r3, [pc, #348]	; (800786c <UART_SetConfig+0x59c>)
 800770e:	617b      	str	r3, [r7, #20]
        break;
 8007710:	e00c      	b.n	800772c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007712:	f7ff f9cb 	bl	8006aac <HAL_RCC_GetSysClockFreq>
 8007716:	6178      	str	r0, [r7, #20]
        break;
 8007718:	e008      	b.n	800772c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800771a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800771e:	617b      	str	r3, [r7, #20]
        break;
 8007720:	e004      	b.n	800772c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	76bb      	strb	r3, [r7, #26]
        break;
 800772a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 8086 	beq.w	8007840 <UART_SetConfig+0x570>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	4a4b      	ldr	r2, [pc, #300]	; (8007868 <UART_SetConfig+0x598>)
 800773a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800773e:	461a      	mov	r2, r3
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	fbb3 f3f2 	udiv	r3, r3, r2
 8007746:	005a      	lsls	r2, r3, #1
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	085b      	lsrs	r3, r3, #1
 800774e:	441a      	add	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	fbb2 f3f3 	udiv	r3, r2, r3
 8007758:	b29b      	uxth	r3, r3
 800775a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	2b0f      	cmp	r3, #15
 8007760:	d916      	bls.n	8007790 <UART_SetConfig+0x4c0>
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007768:	d212      	bcs.n	8007790 <UART_SetConfig+0x4c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	b29b      	uxth	r3, r3
 800776e:	f023 030f 	bic.w	r3, r3, #15
 8007772:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	085b      	lsrs	r3, r3, #1
 8007778:	b29b      	uxth	r3, r3
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	b29a      	uxth	r2, r3
 8007780:	89fb      	ldrh	r3, [r7, #14]
 8007782:	4313      	orrs	r3, r2
 8007784:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	89fa      	ldrh	r2, [r7, #14]
 800778c:	60da      	str	r2, [r3, #12]
 800778e:	e057      	b.n	8007840 <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	76bb      	strb	r3, [r7, #26]
 8007794:	e054      	b.n	8007840 <UART_SetConfig+0x570>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007796:	7efb      	ldrb	r3, [r7, #27]
 8007798:	2b08      	cmp	r3, #8
 800779a:	d828      	bhi.n	80077ee <UART_SetConfig+0x51e>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <UART_SetConfig+0x4d4>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077c9 	.word	0x080077c9
 80077a8:	080077d1 	.word	0x080077d1
 80077ac:	080077d9 	.word	0x080077d9
 80077b0:	080077ef 	.word	0x080077ef
 80077b4:	080077df 	.word	0x080077df
 80077b8:	080077ef 	.word	0x080077ef
 80077bc:	080077ef 	.word	0x080077ef
 80077c0:	080077ef 	.word	0x080077ef
 80077c4:	080077e7 	.word	0x080077e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077c8:	f7ff f9de 	bl	8006b88 <HAL_RCC_GetPCLK1Freq>
 80077cc:	6178      	str	r0, [r7, #20]
        break;
 80077ce:	e013      	b.n	80077f8 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077d0:	f7ff f9f0 	bl	8006bb4 <HAL_RCC_GetPCLK2Freq>
 80077d4:	6178      	str	r0, [r7, #20]
        break;
 80077d6:	e00f      	b.n	80077f8 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077d8:	4b24      	ldr	r3, [pc, #144]	; (800786c <UART_SetConfig+0x59c>)
 80077da:	617b      	str	r3, [r7, #20]
        break;
 80077dc:	e00c      	b.n	80077f8 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077de:	f7ff f965 	bl	8006aac <HAL_RCC_GetSysClockFreq>
 80077e2:	6178      	str	r0, [r7, #20]
        break;
 80077e4:	e008      	b.n	80077f8 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ea:	617b      	str	r3, [r7, #20]
        break;
 80077ec:	e004      	b.n	80077f8 <UART_SetConfig+0x528>
      default:
        pclk = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	76bb      	strb	r3, [r7, #26]
        break;
 80077f6:	bf00      	nop
    }

    if (pclk != 0U)
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d020      	beq.n	8007840 <UART_SetConfig+0x570>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	4a19      	ldr	r2, [pc, #100]	; (8007868 <UART_SetConfig+0x598>)
 8007804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007808:	461a      	mov	r2, r3
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	085b      	lsrs	r3, r3, #1
 8007816:	441a      	add	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007820:	b29b      	uxth	r3, r3
 8007822:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b0f      	cmp	r3, #15
 8007828:	d908      	bls.n	800783c <UART_SetConfig+0x56c>
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007830:	d204      	bcs.n	800783c <UART_SetConfig+0x56c>
      {
        huart->Instance->BRR = usartdiv;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	60da      	str	r2, [r3, #12]
 800783a:	e001      	b.n	8007840 <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800785c:	7ebb      	ldrb	r3, [r7, #26]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3720      	adds	r7, #32
 8007862:	46bd      	mov	sp, r7
 8007864:	bdb0      	pop	{r4, r5, r7, pc}
 8007866:	bf00      	nop
 8007868:	0800c1f4 	.word	0x0800c1f4
 800786c:	00f42400 	.word	0x00f42400

08007870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00a      	beq.n	800789a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00a      	beq.n	80078de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e2:	f003 0308 	and.w	r3, r3, #8
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007904:	f003 0310 	and.w	r3, r3, #16
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00a      	beq.n	8007922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007926:	f003 0320 	and.w	r3, r3, #32
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00a      	beq.n	8007944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01a      	beq.n	8007986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800796e:	d10a      	bne.n	8007986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	605a      	str	r2, [r3, #4]
  }
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079c4:	f7fa f8e2 	bl	8001b8c <HAL_GetTick>
 80079c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0308 	and.w	r3, r3, #8
 80079d4:	2b08      	cmp	r3, #8
 80079d6:	d10e      	bne.n	80079f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f82c 	bl	8007a44 <UART_WaitOnFlagUntilTimeout>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e022      	b.n	8007a3c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b04      	cmp	r3, #4
 8007a02:	d10e      	bne.n	8007a22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f816 	bl	8007a44 <UART_WaitOnFlagUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e00c      	b.n	8007a3c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	4613      	mov	r3, r2
 8007a52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a54:	e062      	b.n	8007b1c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5c:	d05e      	beq.n	8007b1c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a5e:	f7fa f895 	bl	8001b8c <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d302      	bcc.n	8007a74 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d11d      	bne.n	8007ab0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a82:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689a      	ldr	r2, [r3, #8]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0201 	bic.w	r2, r2, #1
 8007a92:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e045      	b.n	8007b3c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0304 	and.w	r3, r3, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d02e      	beq.n	8007b1c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007acc:	d126      	bne.n	8007b1c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ad6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ae6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0201 	bic.w	r2, r2, #1
 8007af6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e00f      	b.n	8007b3c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	69da      	ldr	r2, [r3, #28]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	4013      	ands	r3, r2
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	bf0c      	ite	eq
 8007b2c:	2301      	moveq	r3, #1
 8007b2e:	2300      	movne	r3, #0
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	461a      	mov	r2, r3
 8007b34:	79fb      	ldrb	r3, [r7, #7]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d08d      	beq.n	8007a56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d101      	bne.n	8007b5a <HAL_UARTEx_DisableFifoMode+0x16>
 8007b56:	2302      	movs	r3, #2
 8007b58:	e027      	b.n	8007baa <HAL_UARTEx_DisableFifoMode+0x66>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2224      	movs	r2, #36	; 0x24
 8007b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0201 	bic.w	r2, r2, #1
 8007b80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d101      	bne.n	8007bce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bca:	2302      	movs	r3, #2
 8007bcc:	e02d      	b.n	8007c2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2224      	movs	r2, #36	; 0x24
 8007bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0201 	bic.w	r2, r2, #1
 8007bf4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f850 	bl	8007cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d101      	bne.n	8007c4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c46:	2302      	movs	r3, #2
 8007c48:	e02d      	b.n	8007ca6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2224      	movs	r2, #36	; 0x24
 8007c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 0201 	bic.w	r2, r2, #1
 8007c70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f812 	bl	8007cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b089      	sub	sp, #36	; 0x24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007cb8:	4a2f      	ldr	r2, [pc, #188]	; (8007d78 <UARTEx_SetNbDataToProcess+0xc8>)
 8007cba:	f107 0314 	add.w	r3, r7, #20
 8007cbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cc2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007cc6:	4a2d      	ldr	r2, [pc, #180]	; (8007d7c <UARTEx_SetNbDataToProcess+0xcc>)
 8007cc8:	f107 030c 	add.w	r3, r7, #12
 8007ccc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cd0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d108      	bne.n	8007cee <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cec:	e03d      	b.n	8007d6a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cee:	2308      	movs	r3, #8
 8007cf0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cf2:	2308      	movs	r3, #8
 8007cf4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	0e5b      	lsrs	r3, r3, #25
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	0f5b      	lsrs	r3, r3, #29
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d16:	7fbb      	ldrb	r3, [r7, #30]
 8007d18:	7f3a      	ldrb	r2, [r7, #28]
 8007d1a:	f107 0120 	add.w	r1, r7, #32
 8007d1e:	440a      	add	r2, r1
 8007d20:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007d24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d28:	7f3a      	ldrb	r2, [r7, #28]
 8007d2a:	f107 0120 	add.w	r1, r7, #32
 8007d2e:	440a      	add	r2, r1
 8007d30:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d34:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d40:	7ffb      	ldrb	r3, [r7, #31]
 8007d42:	7f7a      	ldrb	r2, [r7, #29]
 8007d44:	f107 0120 	add.w	r1, r7, #32
 8007d48:	440a      	add	r2, r1
 8007d4a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007d4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d52:	7f7a      	ldrb	r2, [r7, #29]
 8007d54:	f107 0120 	add.w	r1, r7, #32
 8007d58:	440a      	add	r2, r1
 8007d5a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d6a:	bf00      	nop
 8007d6c:	3724      	adds	r7, #36	; 0x24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	0800c184 	.word	0x0800c184
 8007d7c:	0800c18c 	.word	0x0800c18c

08007d80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d90:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007d94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007db6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007dba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	43db      	mvns	r3, r3
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	4013      	ands	r3, r2
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007de4:	b084      	sub	sp, #16
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	f107 0014 	add.w	r0, r7, #20
 8007df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	b004      	add	sp, #16
 8007e24:	4770      	bx	lr
	...

08007e28 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b09b      	sub	sp, #108	; 0x6c
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	78db      	ldrb	r3, [r3, #3]
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d81f      	bhi.n	8007e9a <USB_ActivateEndpoint+0x72>
 8007e5a:	a201      	add	r2, pc, #4	; (adr r2, 8007e60 <USB_ActivateEndpoint+0x38>)
 8007e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e60:	08007e71 	.word	0x08007e71
 8007e64:	08007e8d 	.word	0x08007e8d
 8007e68:	08007ea3 	.word	0x08007ea3
 8007e6c:	08007e7f 	.word	0x08007e7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007e70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007e7c:	e012      	b.n	8007ea4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007e7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e82:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007e86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007e8a:	e00b      	b.n	8007ea4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007e8c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e94:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007e98:	e004      	b.n	8007ea4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007ea0:	e000      	b.n	8007ea4 <USB_ActivateEndpoint+0x7c>
      break;
 8007ea2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	441a      	add	r2, r3
 8007eae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	b21b      	sxth	r3, r3
 8007ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ede:	b21a      	sxth	r2, r3
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	b21b      	sxth	r3, r3
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	b21b      	sxth	r3, r3
 8007eea:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	441a      	add	r2, r3
 8007ef8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	7b1b      	ldrb	r3, [r3, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f040 8149 	bne.w	80081ac <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	785b      	ldrb	r3, [r3, #1]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 8084 	beq.w	800802c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	461a      	mov	r2, r3
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	4413      	add	r3, r2
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	00da      	lsls	r2, r3, #3
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f46:	613b      	str	r3, [r7, #16]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	88db      	ldrh	r3, [r3, #6]
 8007f4c:	085b      	lsrs	r3, r3, #1
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	81fb      	strh	r3, [r7, #14]
 8007f66:	89fb      	ldrh	r3, [r7, #14]
 8007f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01b      	beq.n	8007fa8 <USB_ActivateEndpoint+0x180>
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f86:	81bb      	strh	r3, [r7, #12]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	441a      	add	r2, r3
 8007f92:	89bb      	ldrh	r3, [r7, #12]
 8007f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	78db      	ldrb	r3, [r3, #3]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d020      	beq.n	8007ff2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fc6:	813b      	strh	r3, [r7, #8]
 8007fc8:	893b      	ldrh	r3, [r7, #8]
 8007fca:	f083 0320 	eor.w	r3, r3, #32
 8007fce:	813b      	strh	r3, [r7, #8]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	441a      	add	r2, r3
 8007fda:	893b      	ldrh	r3, [r7, #8]
 8007fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	8013      	strh	r3, [r2, #0]
 8007ff0:	e27f      	b.n	80084f2 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008008:	817b      	strh	r3, [r7, #10]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	441a      	add	r2, r3
 8008014:	897b      	ldrh	r3, [r7, #10]
 8008016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800801a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800801e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008026:	b29b      	uxth	r3, r3
 8008028:	8013      	strh	r3, [r2, #0]
 800802a:	e262      	b.n	80084f2 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008036:	b29b      	uxth	r3, r3
 8008038:	461a      	mov	r2, r3
 800803a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803c:	4413      	add	r3, r2
 800803e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	00da      	lsls	r2, r3, #3
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	4413      	add	r3, r2
 800804a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800804e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	88db      	ldrh	r3, [r3, #6]
 8008054:	085b      	lsrs	r3, r3, #1
 8008056:	b29b      	uxth	r3, r3
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	b29a      	uxth	r2, r3
 800805c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805e:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	627b      	str	r3, [r7, #36]	; 0x24
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800806a:	b29b      	uxth	r3, r3
 800806c:	461a      	mov	r2, r3
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	4413      	add	r3, r2
 8008072:	627b      	str	r3, [r7, #36]	; 0x24
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	00da      	lsls	r2, r3, #3
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	4413      	add	r3, r2
 800807e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008082:	623b      	str	r3, [r7, #32]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d112      	bne.n	80080b2 <USB_ActivateEndpoint+0x28a>
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	b29b      	uxth	r3, r3
 8008092:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008096:	b29a      	uxth	r2, r3
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	801a      	strh	r2, [r3, #0]
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	801a      	strh	r2, [r3, #0]
 80080b0:	e02f      	b.n	8008112 <USB_ActivateEndpoint+0x2ea>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	2b3e      	cmp	r3, #62	; 0x3e
 80080b8:	d813      	bhi.n	80080e2 <USB_ActivateEndpoint+0x2ba>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	085b      	lsrs	r3, r3, #1
 80080c0:	663b      	str	r3, [r7, #96]	; 0x60
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <USB_ActivateEndpoint+0x2ac>
 80080ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080d0:	3301      	adds	r3, #1
 80080d2:	663b      	str	r3, [r7, #96]	; 0x60
 80080d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	029b      	lsls	r3, r3, #10
 80080da:	b29a      	uxth	r2, r3
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	801a      	strh	r2, [r3, #0]
 80080e0:	e017      	b.n	8008112 <USB_ActivateEndpoint+0x2ea>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	095b      	lsrs	r3, r3, #5
 80080e8:	663b      	str	r3, [r7, #96]	; 0x60
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f003 031f 	and.w	r3, r3, #31
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d102      	bne.n	80080fc <USB_ActivateEndpoint+0x2d4>
 80080f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080f8:	3b01      	subs	r3, #1
 80080fa:	663b      	str	r3, [r7, #96]	; 0x60
 80080fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080fe:	b29b      	uxth	r3, r3
 8008100:	029b      	lsls	r3, r3, #10
 8008102:	b29b      	uxth	r3, r3
 8008104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800810c:	b29a      	uxth	r2, r3
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	83fb      	strh	r3, [r7, #30]
 8008120:	8bfb      	ldrh	r3, [r7, #30]
 8008122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d01b      	beq.n	8008162 <USB_ActivateEndpoint+0x33a>
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	b29b      	uxth	r3, r3
 8008138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800813c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008140:	83bb      	strh	r3, [r7, #28]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	441a      	add	r2, r3
 800814c:	8bbb      	ldrh	r3, [r7, #28]
 800814e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008156:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800815a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800815e:	b29b      	uxth	r3, r3
 8008160:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	b29b      	uxth	r3, r3
 8008170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008178:	837b      	strh	r3, [r7, #26]
 800817a:	8b7b      	ldrh	r3, [r7, #26]
 800817c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008180:	837b      	strh	r3, [r7, #26]
 8008182:	8b7b      	ldrh	r3, [r7, #26]
 8008184:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008188:	837b      	strh	r3, [r7, #26]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	441a      	add	r2, r3
 8008194:	8b7b      	ldrh	r3, [r7, #26]
 8008196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800819a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800819e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	8013      	strh	r3, [r2, #0]
 80081aa:	e1a2      	b.n	80084f2 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	441a      	add	r2, r3
 80081d0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80081d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80081e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	461a      	mov	r2, r3
 80081f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081f8:	4413      	add	r3, r2
 80081fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	00da      	lsls	r2, r3, #3
 8008202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008204:	4413      	add	r3, r2
 8008206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800820a:	657b      	str	r3, [r7, #84]	; 0x54
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	891b      	ldrh	r3, [r3, #8]
 8008210:	085b      	lsrs	r3, r3, #1
 8008212:	b29b      	uxth	r3, r3
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	b29a      	uxth	r2, r3
 8008218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800821a:	801a      	strh	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	653b      	str	r3, [r7, #80]	; 0x50
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008226:	b29b      	uxth	r3, r3
 8008228:	461a      	mov	r2, r3
 800822a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800822c:	4413      	add	r3, r2
 800822e:	653b      	str	r3, [r7, #80]	; 0x50
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	00da      	lsls	r2, r3, #3
 8008236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008238:	4413      	add	r3, r2
 800823a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800823e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	895b      	ldrh	r3, [r3, #10]
 8008244:	085b      	lsrs	r3, r3, #1
 8008246:	b29b      	uxth	r3, r3
 8008248:	005b      	lsls	r3, r3, #1
 800824a:	b29a      	uxth	r2, r3
 800824c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800824e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	785b      	ldrb	r3, [r3, #1]
 8008254:	2b00      	cmp	r3, #0
 8008256:	f040 8091 	bne.w	800837c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008268:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800826a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d01b      	beq.n	80082aa <USB_ActivateEndpoint+0x482>
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008288:	877b      	strh	r3, [r7, #58]	; 0x3a
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	441a      	add	r2, r3
 8008294:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800829a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800829e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	873b      	strh	r3, [r7, #56]	; 0x38
 80082b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80082ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d01b      	beq.n	80082fa <USB_ActivateEndpoint+0x4d2>
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	441a      	add	r2, r3
 80082e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80082e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29b      	uxth	r3, r3
 8008308:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800830c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008310:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008312:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008314:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008318:	86bb      	strh	r3, [r7, #52]	; 0x34
 800831a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800831c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008320:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	441a      	add	r2, r3
 800832c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800832e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800833a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833e:	b29b      	uxth	r3, r3
 8008340:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008358:	867b      	strh	r3, [r7, #50]	; 0x32
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	441a      	add	r2, r3
 8008364:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800836a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800836e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008376:	b29b      	uxth	r3, r3
 8008378:	8013      	strh	r3, [r2, #0]
 800837a:	e0ba      	b.n	80084f2 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800838c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d01d      	beq.n	80083d4 <USB_ActivateEndpoint+0x5ac>
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	441a      	add	r2, r3
 80083bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80083c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80083e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80083e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d01d      	beq.n	800842c <USB_ActivateEndpoint+0x604>
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008406:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	441a      	add	r2, r3
 8008414:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800841c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008424:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008428:	b29b      	uxth	r3, r3
 800842a:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	78db      	ldrb	r3, [r3, #3]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d024      	beq.n	800847e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	b29b      	uxth	r3, r3
 8008442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800844a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800844e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008452:	f083 0320 	eor.w	r3, r3, #32
 8008456:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	441a      	add	r2, r3
 8008464:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800846c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008478:	b29b      	uxth	r3, r3
 800847a:	8013      	strh	r3, [r2, #0]
 800847c:	e01d      	b.n	80084ba <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	b29b      	uxth	r3, r3
 800848c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008494:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	441a      	add	r2, r3
 80084a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80084a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	441a      	add	r2, r3
 80084dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80084de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80084f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	376c      	adds	r7, #108	; 0x6c
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop

08008504 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008504:	b480      	push	{r7}
 8008506:	b08d      	sub	sp, #52	; 0x34
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	7b1b      	ldrb	r3, [r3, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	f040 808e 	bne.w	8008634 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	785b      	ldrb	r3, [r3, #1]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d044      	beq.n	80085aa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	81bb      	strh	r3, [r7, #12]
 800852e:	89bb      	ldrh	r3, [r7, #12]
 8008530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008534:	2b00      	cmp	r3, #0
 8008536:	d01b      	beq.n	8008570 <USB_DeactivateEndpoint+0x6c>
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800854a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800854e:	817b      	strh	r3, [r7, #10]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	441a      	add	r2, r3
 800855a:	897b      	ldrh	r3, [r7, #10]
 800855c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008568:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800856c:	b29b      	uxth	r3, r3
 800856e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4413      	add	r3, r2
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	b29b      	uxth	r3, r3
 800857e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008586:	813b      	strh	r3, [r7, #8]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	441a      	add	r2, r3
 8008592:	893b      	ldrh	r3, [r7, #8]
 8008594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800859c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	8013      	strh	r3, [r2, #0]
 80085a8:	e192      	b.n	80088d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	827b      	strh	r3, [r7, #18]
 80085b8:	8a7b      	ldrh	r3, [r7, #18]
 80085ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d01b      	beq.n	80085fa <USB_DeactivateEndpoint+0xf6>
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d8:	823b      	strh	r3, [r7, #16]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	441a      	add	r2, r3
 80085e4:	8a3b      	ldrh	r3, [r7, #16]
 80085e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	b29b      	uxth	r3, r3
 8008608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800860c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008610:	81fb      	strh	r3, [r7, #14]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	441a      	add	r2, r3
 800861c:	89fb      	ldrh	r3, [r7, #14]
 800861e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800862a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800862e:	b29b      	uxth	r3, r3
 8008630:	8013      	strh	r3, [r2, #0]
 8008632:	e14d      	b.n	80088d0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	785b      	ldrb	r3, [r3, #1]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f040 80a5 	bne.w	8008788 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	881b      	ldrh	r3, [r3, #0]
 800864a:	843b      	strh	r3, [r7, #32]
 800864c:	8c3b      	ldrh	r3, [r7, #32]
 800864e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d01b      	beq.n	800868e <USB_DeactivateEndpoint+0x18a>
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	b29b      	uxth	r3, r3
 8008664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800866c:	83fb      	strh	r3, [r7, #30]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	441a      	add	r2, r3
 8008678:	8bfb      	ldrh	r3, [r7, #30]
 800867a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800867e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800868a:	b29b      	uxth	r3, r3
 800868c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	83bb      	strh	r3, [r7, #28]
 800869c:	8bbb      	ldrh	r3, [r7, #28]
 800869e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d01b      	beq.n	80086de <USB_DeactivateEndpoint+0x1da>
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	881b      	ldrh	r3, [r3, #0]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086bc:	837b      	strh	r3, [r7, #26]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	441a      	add	r2, r3
 80086c8:	8b7b      	ldrh	r3, [r7, #26]
 80086ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086da:	b29b      	uxth	r3, r3
 80086dc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	881b      	ldrh	r3, [r3, #0]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f4:	833b      	strh	r3, [r7, #24]
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	441a      	add	r2, r3
 8008700:	8b3b      	ldrh	r3, [r7, #24]
 8008702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800870a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800870e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008712:	b29b      	uxth	r3, r3
 8008714:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	b29b      	uxth	r3, r3
 8008724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800872c:	82fb      	strh	r3, [r7, #22]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	441a      	add	r2, r3
 8008738:	8afb      	ldrh	r3, [r7, #22]
 800873a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800873e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874a:	b29b      	uxth	r3, r3
 800874c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	b29b      	uxth	r3, r3
 800875c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008764:	82bb      	strh	r3, [r7, #20]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	441a      	add	r2, r3
 8008770:	8abb      	ldrh	r3, [r7, #20]
 8008772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800877a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800877e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008782:	b29b      	uxth	r3, r3
 8008784:	8013      	strh	r3, [r2, #0]
 8008786:	e0a3      	b.n	80088d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	881b      	ldrh	r3, [r3, #0]
 8008794:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008796:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d01b      	beq.n	80087d8 <USB_DeactivateEndpoint+0x2d4>
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	441a      	add	r2, r3
 80087c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80087c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80087e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80087e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01b      	beq.n	8008828 <USB_DeactivateEndpoint+0x324>
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	4413      	add	r3, r2
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008806:	853b      	strh	r3, [r7, #40]	; 0x28
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	441a      	add	r2, r3
 8008812:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800881c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008820:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008824:	b29b      	uxth	r3, r3
 8008826:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	b29b      	uxth	r3, r3
 8008836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800883a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	441a      	add	r2, r3
 800884a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800884c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800885c:	b29b      	uxth	r3, r3
 800885e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	b29b      	uxth	r3, r3
 800886e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008876:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	441a      	add	r2, r3
 8008882:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800888c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008894:	b29b      	uxth	r3, r3
 8008896:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4413      	add	r3, r2
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	441a      	add	r2, r3
 80088ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80088bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3734      	adds	r7, #52	; 0x34
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b0c4      	sub	sp, #272	; 0x110
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	1d3b      	adds	r3, r7, #4
 80088e6:	6018      	str	r0, [r3, #0]
 80088e8:	463b      	mov	r3, r7
 80088ea:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088ec:	463b      	mov	r3, r7
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	785b      	ldrb	r3, [r3, #1]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	f040 8566 	bne.w	80093c4 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80088f8:	463b      	mov	r3, r7
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699a      	ldr	r2, [r3, #24]
 80088fe:	463b      	mov	r3, r7
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	429a      	cmp	r2, r3
 8008906:	d905      	bls.n	8008914 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008908:	463b      	mov	r3, r7
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008912:	e004      	b.n	800891e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008914:	463b      	mov	r3, r7
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800891e:	463b      	mov	r3, r7
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	7b1b      	ldrb	r3, [r3, #12]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d12c      	bne.n	8008982 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008928:	463b      	mov	r3, r7
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6959      	ldr	r1, [r3, #20]
 800892e:	463b      	mov	r3, r7
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	88da      	ldrh	r2, [r3, #6]
 8008934:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008938:	b29b      	uxth	r3, r3
 800893a:	1d38      	adds	r0, r7, #4
 800893c:	6800      	ldr	r0, [r0, #0]
 800893e:	f001 fa43 	bl	8009dc8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008942:	1d3b      	adds	r3, r7, #4
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	617b      	str	r3, [r7, #20]
 8008948:	1d3b      	adds	r3, r7, #4
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008950:	b29b      	uxth	r3, r3
 8008952:	461a      	mov	r2, r3
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	4413      	add	r3, r2
 8008958:	617b      	str	r3, [r7, #20]
 800895a:	463b      	mov	r3, r7
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	00da      	lsls	r2, r3, #3
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	4413      	add	r3, r2
 8008966:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800896a:	f107 0310 	add.w	r3, r7, #16
 800896e:	601a      	str	r2, [r3, #0]
 8008970:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008974:	b29a      	uxth	r2, r3
 8008976:	f107 0310 	add.w	r3, r7, #16
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	801a      	strh	r2, [r3, #0]
 800897e:	f000 bcec 	b.w	800935a <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008982:	463b      	mov	r3, r7
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	78db      	ldrb	r3, [r3, #3]
 8008988:	2b02      	cmp	r3, #2
 800898a:	f040 8356 	bne.w	800903a <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800898e:	463b      	mov	r3, r7
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6a1a      	ldr	r2, [r3, #32]
 8008994:	463b      	mov	r3, r7
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	429a      	cmp	r2, r3
 800899c:	f240 82fa 	bls.w	8008f94 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80089a0:	1d3b      	adds	r3, r7, #4
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	463b      	mov	r3, r7
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ba:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80089be:	1d3b      	adds	r3, r7, #4
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	463b      	mov	r3, r7
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	441a      	add	r2, r3
 80089cc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80089d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80089dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80089e4:	463b      	mov	r3, r7
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80089ee:	463b      	mov	r3, r7
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6a1a      	ldr	r2, [r3, #32]
 80089f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80089f8:	1ad2      	subs	r2, r2, r3
 80089fa:	463b      	mov	r3, r7
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008a00:	1d3b      	adds	r3, r7, #4
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	463b      	mov	r3, r7
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 815e 	beq.w	8008cd8 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a1c:	1d3b      	adds	r3, r7, #4
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	637b      	str	r3, [r7, #52]	; 0x34
 8008a22:	463b      	mov	r3, r7
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	785b      	ldrb	r3, [r3, #1]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d164      	bne.n	8008af6 <USB_EPStartXfer+0x218>
 8008a2c:	1d3b      	adds	r3, r7, #4
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a32:	1d3b      	adds	r3, r7, #4
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	4413      	add	r3, r2
 8008a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a44:	463b      	mov	r3, r7
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	00da      	lsls	r2, r3, #3
 8008a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4e:	4413      	add	r3, r2
 8008a50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d112      	bne.n	8008a84 <USB_EPStartXfer+0x1a6>
 8008a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6c:	801a      	strh	r2, [r3, #0]
 8008a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	801a      	strh	r2, [r3, #0]
 8008a82:	e054      	b.n	8008b2e <USB_EPStartXfer+0x250>
 8008a84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a88:	2b3e      	cmp	r3, #62	; 0x3e
 8008a8a:	d817      	bhi.n	8008abc <USB_EPStartXfer+0x1de>
 8008a8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a90:	085b      	lsrs	r3, r3, #1
 8008a92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008a96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d004      	beq.n	8008aac <USB_EPStartXfer+0x1ce>
 8008aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	029b      	lsls	r3, r3, #10
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab8:	801a      	strh	r2, [r3, #0]
 8008aba:	e038      	b.n	8008b2e <USB_EPStartXfer+0x250>
 8008abc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ac0:	095b      	lsrs	r3, r3, #5
 8008ac2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008ac6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008aca:	f003 031f 	and.w	r3, r3, #31
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d104      	bne.n	8008adc <USB_EPStartXfer+0x1fe>
 8008ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	029b      	lsls	r3, r3, #10
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	801a      	strh	r2, [r3, #0]
 8008af4:	e01b      	b.n	8008b2e <USB_EPStartXfer+0x250>
 8008af6:	463b      	mov	r3, r7
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	785b      	ldrb	r3, [r3, #1]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d116      	bne.n	8008b2e <USB_EPStartXfer+0x250>
 8008b00:	1d3b      	adds	r3, r7, #4
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0e:	4413      	add	r3, r2
 8008b10:	637b      	str	r3, [r7, #52]	; 0x34
 8008b12:	463b      	mov	r3, r7
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	00da      	lsls	r2, r3, #3
 8008b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b22:	633b      	str	r3, [r7, #48]	; 0x30
 8008b24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b2e:	463b      	mov	r3, r7
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	895b      	ldrh	r3, [r3, #10]
 8008b34:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b38:	463b      	mov	r3, r7
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6959      	ldr	r1, [r3, #20]
 8008b3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008b48:	1d38      	adds	r0, r7, #4
 8008b4a:	6800      	ldr	r0, [r0, #0]
 8008b4c:	f001 f93c 	bl	8009dc8 <USB_WritePMA>
            ep->xfer_buff += len;
 8008b50:	463b      	mov	r3, r7
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	695a      	ldr	r2, [r3, #20]
 8008b56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b5a:	441a      	add	r2, r3
 8008b5c:	463b      	mov	r3, r7
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008b62:	463b      	mov	r3, r7
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6a1a      	ldr	r2, [r3, #32]
 8008b68:	463b      	mov	r3, r7
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d90e      	bls.n	8008b90 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8008b72:	463b      	mov	r3, r7
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8008b7c:	463b      	mov	r3, r7
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6a1a      	ldr	r2, [r3, #32]
 8008b82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b86:	1ad2      	subs	r2, r2, r3
 8008b88:	463b      	mov	r3, r7
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	621a      	str	r2, [r3, #32]
 8008b8e:	e008      	b.n	8008ba2 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008b90:	463b      	mov	r3, r7
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8008b9a:	463b      	mov	r3, r7
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ba2:	463b      	mov	r3, r7
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	785b      	ldrb	r3, [r3, #1]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d164      	bne.n	8008c76 <USB_EPStartXfer+0x398>
 8008bac:	1d3b      	adds	r3, r7, #4
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	61fb      	str	r3, [r7, #28]
 8008bb2:	1d3b      	adds	r3, r7, #4
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	61fb      	str	r3, [r7, #28]
 8008bc4:	463b      	mov	r3, r7
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	00da      	lsls	r2, r3, #3
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bd4:	61bb      	str	r3, [r7, #24]
 8008bd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d112      	bne.n	8008c04 <USB_EPStartXfer+0x326>
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	881b      	ldrh	r3, [r3, #0]
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	801a      	strh	r2, [r3, #0]
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	801a      	strh	r2, [r3, #0]
 8008c02:	e057      	b.n	8008cb4 <USB_EPStartXfer+0x3d6>
 8008c04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c08:	2b3e      	cmp	r3, #62	; 0x3e
 8008c0a:	d817      	bhi.n	8008c3c <USB_EPStartXfer+0x35e>
 8008c0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c10:	085b      	lsrs	r3, r3, #1
 8008c12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d004      	beq.n	8008c2c <USB_EPStartXfer+0x34e>
 8008c22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c26:	3301      	adds	r3, #1
 8008c28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	029b      	lsls	r3, r3, #10
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	801a      	strh	r2, [r3, #0]
 8008c3a:	e03b      	b.n	8008cb4 <USB_EPStartXfer+0x3d6>
 8008c3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c40:	095b      	lsrs	r3, r3, #5
 8008c42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c4a:	f003 031f 	and.w	r3, r3, #31
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d104      	bne.n	8008c5c <USB_EPStartXfer+0x37e>
 8008c52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c56:	3b01      	subs	r3, #1
 8008c58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	029b      	lsls	r3, r3, #10
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	801a      	strh	r2, [r3, #0]
 8008c74:	e01e      	b.n	8008cb4 <USB_EPStartXfer+0x3d6>
 8008c76:	463b      	mov	r3, r7
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	785b      	ldrb	r3, [r3, #1]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d119      	bne.n	8008cb4 <USB_EPStartXfer+0x3d6>
 8008c80:	1d3b      	adds	r3, r7, #4
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24
 8008c86:	1d3b      	adds	r3, r7, #4
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	461a      	mov	r2, r3
 8008c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c94:	4413      	add	r3, r2
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
 8008c98:	463b      	mov	r3, r7
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	00da      	lsls	r2, r3, #3
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ca8:	623b      	str	r3, [r7, #32]
 8008caa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008cb4:	463b      	mov	r3, r7
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	891b      	ldrh	r3, [r3, #8]
 8008cba:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cbe:	463b      	mov	r3, r7
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6959      	ldr	r1, [r3, #20]
 8008cc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008cce:	1d38      	adds	r0, r7, #4
 8008cd0:	6800      	ldr	r0, [r0, #0]
 8008cd2:	f001 f879 	bl	8009dc8 <USB_WritePMA>
 8008cd6:	e340      	b.n	800935a <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008cd8:	463b      	mov	r3, r7
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	785b      	ldrb	r3, [r3, #1]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d164      	bne.n	8008dac <USB_EPStartXfer+0x4ce>
 8008ce2:	1d3b      	adds	r3, r7, #4
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ce8:	1d3b      	adds	r3, r7, #4
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf6:	4413      	add	r3, r2
 8008cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	00da      	lsls	r2, r3, #3
 8008d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d04:	4413      	add	r3, r2
 8008d06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d112      	bne.n	8008d3a <USB_EPStartXfer+0x45c>
 8008d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d16:	881b      	ldrh	r3, [r3, #0]
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d22:	801a      	strh	r2, [r3, #0]
 8008d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d36:	801a      	strh	r2, [r3, #0]
 8008d38:	e057      	b.n	8008dea <USB_EPStartXfer+0x50c>
 8008d3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d3e:	2b3e      	cmp	r3, #62	; 0x3e
 8008d40:	d817      	bhi.n	8008d72 <USB_EPStartXfer+0x494>
 8008d42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d46:	085b      	lsrs	r3, r3, #1
 8008d48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d004      	beq.n	8008d62 <USB_EPStartXfer+0x484>
 8008d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	029b      	lsls	r3, r3, #10
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d6e:	801a      	strh	r2, [r3, #0]
 8008d70:	e03b      	b.n	8008dea <USB_EPStartXfer+0x50c>
 8008d72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d76:	095b      	lsrs	r3, r3, #5
 8008d78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d80:	f003 031f 	and.w	r3, r3, #31
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d104      	bne.n	8008d92 <USB_EPStartXfer+0x4b4>
 8008d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	029b      	lsls	r3, r3, #10
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da8:	801a      	strh	r2, [r3, #0]
 8008daa:	e01e      	b.n	8008dea <USB_EPStartXfer+0x50c>
 8008dac:	463b      	mov	r3, r7
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	785b      	ldrb	r3, [r3, #1]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d119      	bne.n	8008dea <USB_EPStartXfer+0x50c>
 8008db6:	1d3b      	adds	r3, r7, #4
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	657b      	str	r3, [r7, #84]	; 0x54
 8008dbc:	1d3b      	adds	r3, r7, #4
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dca:	4413      	add	r3, r2
 8008dcc:	657b      	str	r3, [r7, #84]	; 0x54
 8008dce:	463b      	mov	r3, r7
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	00da      	lsls	r2, r3, #3
 8008dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dd8:	4413      	add	r3, r2
 8008dda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008dde:	653b      	str	r3, [r7, #80]	; 0x50
 8008de0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008de8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008dea:	463b      	mov	r3, r7
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	891b      	ldrh	r3, [r3, #8]
 8008df0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008df4:	463b      	mov	r3, r7
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6959      	ldr	r1, [r3, #20]
 8008dfa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008e04:	1d38      	adds	r0, r7, #4
 8008e06:	6800      	ldr	r0, [r0, #0]
 8008e08:	f000 ffde 	bl	8009dc8 <USB_WritePMA>
            ep->xfer_buff += len;
 8008e0c:	463b      	mov	r3, r7
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	695a      	ldr	r2, [r3, #20]
 8008e12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e16:	441a      	add	r2, r3
 8008e18:	463b      	mov	r3, r7
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008e1e:	463b      	mov	r3, r7
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6a1a      	ldr	r2, [r3, #32]
 8008e24:	463b      	mov	r3, r7
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d90e      	bls.n	8008e4c <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8008e2e:	463b      	mov	r3, r7
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8008e38:	463b      	mov	r3, r7
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6a1a      	ldr	r2, [r3, #32]
 8008e3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e42:	1ad2      	subs	r2, r2, r3
 8008e44:	463b      	mov	r3, r7
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	621a      	str	r2, [r3, #32]
 8008e4a:	e008      	b.n	8008e5e <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8008e4c:	463b      	mov	r3, r7
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8008e56:	463b      	mov	r3, r7
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e5e:	1d3b      	adds	r3, r7, #4
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	647b      	str	r3, [r7, #68]	; 0x44
 8008e64:	463b      	mov	r3, r7
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	785b      	ldrb	r3, [r3, #1]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d164      	bne.n	8008f38 <USB_EPStartXfer+0x65a>
 8008e6e:	1d3b      	adds	r3, r7, #4
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e74:	1d3b      	adds	r3, r7, #4
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	461a      	mov	r2, r3
 8008e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e82:	4413      	add	r3, r2
 8008e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e86:	463b      	mov	r3, r7
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	00da      	lsls	r2, r3, #3
 8008e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e90:	4413      	add	r3, r2
 8008e92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e96:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d112      	bne.n	8008ec6 <USB_EPStartXfer+0x5e8>
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	801a      	strh	r2, [r3, #0]
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	801a      	strh	r2, [r3, #0]
 8008ec4:	e054      	b.n	8008f70 <USB_EPStartXfer+0x692>
 8008ec6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008eca:	2b3e      	cmp	r3, #62	; 0x3e
 8008ecc:	d817      	bhi.n	8008efe <USB_EPStartXfer+0x620>
 8008ece:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ed2:	085b      	lsrs	r3, r3, #1
 8008ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ed8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008edc:	f003 0301 	and.w	r3, r3, #1
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d004      	beq.n	8008eee <USB_EPStartXfer+0x610>
 8008ee4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ee8:	3301      	adds	r3, #1
 8008eea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	029b      	lsls	r3, r3, #10
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efa:	801a      	strh	r2, [r3, #0]
 8008efc:	e038      	b.n	8008f70 <USB_EPStartXfer+0x692>
 8008efe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f02:	095b      	lsrs	r3, r3, #5
 8008f04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f0c:	f003 031f 	and.w	r3, r3, #31
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d104      	bne.n	8008f1e <USB_EPStartXfer+0x640>
 8008f14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	029b      	lsls	r3, r3, #10
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f34:	801a      	strh	r2, [r3, #0]
 8008f36:	e01b      	b.n	8008f70 <USB_EPStartXfer+0x692>
 8008f38:	463b      	mov	r3, r7
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	785b      	ldrb	r3, [r3, #1]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d116      	bne.n	8008f70 <USB_EPStartXfer+0x692>
 8008f42:	1d3b      	adds	r3, r7, #4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f50:	4413      	add	r3, r2
 8008f52:	647b      	str	r3, [r7, #68]	; 0x44
 8008f54:	463b      	mov	r3, r7
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	00da      	lsls	r2, r3, #3
 8008f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f5e:	4413      	add	r3, r2
 8008f60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f64:	643b      	str	r3, [r7, #64]	; 0x40
 8008f66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008f70:	463b      	mov	r3, r7
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	895b      	ldrh	r3, [r3, #10]
 8008f76:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f7a:	463b      	mov	r3, r7
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6959      	ldr	r1, [r3, #20]
 8008f80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008f8a:	1d38      	adds	r0, r7, #4
 8008f8c:	6800      	ldr	r0, [r0, #0]
 8008f8e:	f000 ff1b 	bl	8009dc8 <USB_WritePMA>
 8008f92:	e1e2      	b.n	800935a <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8008f94:	463b      	mov	r3, r7
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008f9e:	1d3b      	adds	r3, r7, #4
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008fbc:	1d3b      	adds	r3, r7, #4
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	463b      	mov	r3, r7
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	441a      	add	r2, r3
 8008fca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008fe2:	1d3b      	adds	r3, r7, #4
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	663b      	str	r3, [r7, #96]	; 0x60
 8008fe8:	1d3b      	adds	r3, r7, #4
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ff6:	4413      	add	r3, r2
 8008ff8:	663b      	str	r3, [r7, #96]	; 0x60
 8008ffa:	463b      	mov	r3, r7
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	00da      	lsls	r2, r3, #3
 8009002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009004:	4413      	add	r3, r2
 8009006:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800900a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800900c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009010:	b29a      	uxth	r2, r3
 8009012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009014:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009016:	463b      	mov	r3, r7
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	891b      	ldrh	r3, [r3, #8]
 800901c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009020:	463b      	mov	r3, r7
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6959      	ldr	r1, [r3, #20]
 8009026:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800902a:	b29b      	uxth	r3, r3
 800902c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009030:	1d38      	adds	r0, r7, #4
 8009032:	6800      	ldr	r0, [r0, #0]
 8009034:	f000 fec8 	bl	8009dc8 <USB_WritePMA>
 8009038:	e18f      	b.n	800935a <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800903a:	1d3b      	adds	r3, r7, #4
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	463b      	mov	r3, r7
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	b29b      	uxth	r3, r3
 800904c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 808f 	beq.w	8009174 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009056:	1d3b      	adds	r3, r7, #4
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	67bb      	str	r3, [r7, #120]	; 0x78
 800905c:	463b      	mov	r3, r7
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d164      	bne.n	8009130 <USB_EPStartXfer+0x852>
 8009066:	1d3b      	adds	r3, r7, #4
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	673b      	str	r3, [r7, #112]	; 0x70
 800906c:	1d3b      	adds	r3, r7, #4
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009074:	b29b      	uxth	r3, r3
 8009076:	461a      	mov	r2, r3
 8009078:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800907a:	4413      	add	r3, r2
 800907c:	673b      	str	r3, [r7, #112]	; 0x70
 800907e:	463b      	mov	r3, r7
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	00da      	lsls	r2, r3, #3
 8009086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009088:	4413      	add	r3, r2
 800908a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800908e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009090:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009094:	2b00      	cmp	r3, #0
 8009096:	d112      	bne.n	80090be <USB_EPStartXfer+0x7e0>
 8009098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	b29b      	uxth	r3, r3
 800909e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090a6:	801a      	strh	r2, [r3, #0]
 80090a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090ba:	801a      	strh	r2, [r3, #0]
 80090bc:	e054      	b.n	8009168 <USB_EPStartXfer+0x88a>
 80090be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090c2:	2b3e      	cmp	r3, #62	; 0x3e
 80090c4:	d817      	bhi.n	80090f6 <USB_EPStartXfer+0x818>
 80090c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090ca:	085b      	lsrs	r3, r3, #1
 80090cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80090d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d004      	beq.n	80090e6 <USB_EPStartXfer+0x808>
 80090dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e0:	3301      	adds	r3, #1
 80090e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80090e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	029b      	lsls	r3, r3, #10
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090f2:	801a      	strh	r2, [r3, #0]
 80090f4:	e038      	b.n	8009168 <USB_EPStartXfer+0x88a>
 80090f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090fa:	095b      	lsrs	r3, r3, #5
 80090fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009100:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009104:	f003 031f 	and.w	r3, r3, #31
 8009108:	2b00      	cmp	r3, #0
 800910a:	d104      	bne.n	8009116 <USB_EPStartXfer+0x838>
 800910c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009110:	3b01      	subs	r3, #1
 8009112:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800911a:	b29b      	uxth	r3, r3
 800911c:	029b      	lsls	r3, r3, #10
 800911e:	b29b      	uxth	r3, r3
 8009120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009128:	b29a      	uxth	r2, r3
 800912a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800912c:	801a      	strh	r2, [r3, #0]
 800912e:	e01b      	b.n	8009168 <USB_EPStartXfer+0x88a>
 8009130:	463b      	mov	r3, r7
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	785b      	ldrb	r3, [r3, #1]
 8009136:	2b01      	cmp	r3, #1
 8009138:	d116      	bne.n	8009168 <USB_EPStartXfer+0x88a>
 800913a:	1d3b      	adds	r3, r7, #4
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009142:	b29b      	uxth	r3, r3
 8009144:	461a      	mov	r2, r3
 8009146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009148:	4413      	add	r3, r2
 800914a:	67bb      	str	r3, [r7, #120]	; 0x78
 800914c:	463b      	mov	r3, r7
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	00da      	lsls	r2, r3, #3
 8009154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009156:	4413      	add	r3, r2
 8009158:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800915c:	677b      	str	r3, [r7, #116]	; 0x74
 800915e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009162:	b29a      	uxth	r2, r3
 8009164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009166:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009168:	463b      	mov	r3, r7
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	895b      	ldrh	r3, [r3, #10]
 800916e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8009172:	e097      	b.n	80092a4 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009174:	463b      	mov	r3, r7
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	785b      	ldrb	r3, [r3, #1]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d168      	bne.n	8009250 <USB_EPStartXfer+0x972>
 800917e:	1d3b      	adds	r3, r7, #4
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009186:	1d3b      	adds	r3, r7, #4
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800918e:	b29b      	uxth	r3, r3
 8009190:	461a      	mov	r2, r3
 8009192:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009196:	4413      	add	r3, r2
 8009198:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800919c:	463b      	mov	r3, r7
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	00da      	lsls	r2, r3, #3
 80091a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091a8:	4413      	add	r3, r2
 80091aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d112      	bne.n	80091de <USB_EPStartXfer+0x900>
 80091b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091c6:	801a      	strh	r2, [r3, #0]
 80091c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091da:	801a      	strh	r2, [r3, #0]
 80091dc:	e05d      	b.n	800929a <USB_EPStartXfer+0x9bc>
 80091de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80091e2:	2b3e      	cmp	r3, #62	; 0x3e
 80091e4:	d817      	bhi.n	8009216 <USB_EPStartXfer+0x938>
 80091e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80091ea:	085b      	lsrs	r3, r3, #1
 80091ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80091f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80091f4:	f003 0301 	and.w	r3, r3, #1
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d004      	beq.n	8009206 <USB_EPStartXfer+0x928>
 80091fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009200:	3301      	adds	r3, #1
 8009202:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009206:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800920a:	b29b      	uxth	r3, r3
 800920c:	029b      	lsls	r3, r3, #10
 800920e:	b29a      	uxth	r2, r3
 8009210:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009212:	801a      	strh	r2, [r3, #0]
 8009214:	e041      	b.n	800929a <USB_EPStartXfer+0x9bc>
 8009216:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800921a:	095b      	lsrs	r3, r3, #5
 800921c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009220:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009224:	f003 031f 	and.w	r3, r3, #31
 8009228:	2b00      	cmp	r3, #0
 800922a:	d104      	bne.n	8009236 <USB_EPStartXfer+0x958>
 800922c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009230:	3b01      	subs	r3, #1
 8009232:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009236:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800923a:	b29b      	uxth	r3, r3
 800923c:	029b      	lsls	r3, r3, #10
 800923e:	b29b      	uxth	r3, r3
 8009240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009248:	b29a      	uxth	r2, r3
 800924a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800924c:	801a      	strh	r2, [r3, #0]
 800924e:	e024      	b.n	800929a <USB_EPStartXfer+0x9bc>
 8009250:	463b      	mov	r3, r7
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d11f      	bne.n	800929a <USB_EPStartXfer+0x9bc>
 800925a:	1d3b      	adds	r3, r7, #4
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009262:	1d3b      	adds	r3, r7, #4
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800926a:	b29b      	uxth	r3, r3
 800926c:	461a      	mov	r2, r3
 800926e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009272:	4413      	add	r3, r2
 8009274:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009278:	463b      	mov	r3, r7
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	00da      	lsls	r2, r3, #3
 8009280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009284:	4413      	add	r3, r2
 8009286:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800928a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800928e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009292:	b29a      	uxth	r2, r3
 8009294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009298:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800929a:	463b      	mov	r3, r7
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	891b      	ldrh	r3, [r3, #8]
 80092a0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092a4:	463b      	mov	r3, r7
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6959      	ldr	r1, [r3, #20]
 80092aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80092b4:	1d38      	adds	r0, r7, #4
 80092b6:	6800      	ldr	r0, [r0, #0]
 80092b8:	f000 fd86 	bl	8009dc8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80092bc:	463b      	mov	r3, r7
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	785b      	ldrb	r3, [r3, #1]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d122      	bne.n	800930c <USB_EPStartXfer+0xa2e>
 80092c6:	1d3b      	adds	r3, r7, #4
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	463b      	mov	r3, r7
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4413      	add	r3, r2
 80092d4:	881b      	ldrh	r3, [r3, #0]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092e0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80092e4:	1d3b      	adds	r3, r7, #4
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	463b      	mov	r3, r7
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	441a      	add	r2, r3
 80092f2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80092f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009302:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009306:	b29b      	uxth	r3, r3
 8009308:	8013      	strh	r3, [r2, #0]
 800930a:	e026      	b.n	800935a <USB_EPStartXfer+0xa7c>
 800930c:	463b      	mov	r3, r7
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	785b      	ldrb	r3, [r3, #1]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d121      	bne.n	800935a <USB_EPStartXfer+0xa7c>
 8009316:	1d3b      	adds	r3, r7, #4
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	463b      	mov	r3, r7
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	881b      	ldrh	r3, [r3, #0]
 8009326:	b29b      	uxth	r3, r3
 8009328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800932c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009330:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8009334:	1d3b      	adds	r3, r7, #4
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	463b      	mov	r3, r7
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	441a      	add	r2, r3
 8009342:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8009346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800934a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800934e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009356:	b29b      	uxth	r3, r3
 8009358:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800935a:	1d3b      	adds	r3, r7, #4
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	463b      	mov	r3, r7
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4413      	add	r3, r2
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	b29b      	uxth	r3, r3
 800936c:	f107 020e 	add.w	r2, r7, #14
 8009370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009378:	8013      	strh	r3, [r2, #0]
 800937a:	f107 030e 	add.w	r3, r7, #14
 800937e:	f107 020e 	add.w	r2, r7, #14
 8009382:	8812      	ldrh	r2, [r2, #0]
 8009384:	f082 0210 	eor.w	r2, r2, #16
 8009388:	801a      	strh	r2, [r3, #0]
 800938a:	f107 030e 	add.w	r3, r7, #14
 800938e:	f107 020e 	add.w	r2, r7, #14
 8009392:	8812      	ldrh	r2, [r2, #0]
 8009394:	f082 0220 	eor.w	r2, r2, #32
 8009398:	801a      	strh	r2, [r3, #0]
 800939a:	1d3b      	adds	r3, r7, #4
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	463b      	mov	r3, r7
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	441a      	add	r2, r3
 80093a8:	f107 030e 	add.w	r3, r7, #14
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093be:	b29b      	uxth	r3, r3
 80093c0:	8013      	strh	r3, [r2, #0]
 80093c2:	e3b5      	b.n	8009b30 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80093c4:	463b      	mov	r3, r7
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	7b1b      	ldrb	r3, [r3, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f040 8090 	bne.w	80094f0 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80093d0:	463b      	mov	r3, r7
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	699a      	ldr	r2, [r3, #24]
 80093d6:	463b      	mov	r3, r7
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d90e      	bls.n	80093fe <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80093e0:	463b      	mov	r3, r7
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 80093ea:	463b      	mov	r3, r7
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	699a      	ldr	r2, [r3, #24]
 80093f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80093f4:	1ad2      	subs	r2, r2, r3
 80093f6:	463b      	mov	r3, r7
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	619a      	str	r2, [r3, #24]
 80093fc:	e008      	b.n	8009410 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 80093fe:	463b      	mov	r3, r7
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8009408:	463b      	mov	r3, r7
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2200      	movs	r2, #0
 800940e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009410:	1d3b      	adds	r3, r7, #4
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009418:	1d3b      	adds	r3, r7, #4
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009420:	b29b      	uxth	r3, r3
 8009422:	461a      	mov	r2, r3
 8009424:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009428:	4413      	add	r3, r2
 800942a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800942e:	463b      	mov	r3, r7
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	00da      	lsls	r2, r3, #3
 8009436:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800943a:	4413      	add	r3, r2
 800943c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009444:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009448:	2b00      	cmp	r3, #0
 800944a:	d116      	bne.n	800947a <USB_EPStartXfer+0xb9c>
 800944c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	b29b      	uxth	r3, r3
 8009454:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009458:	b29a      	uxth	r2, r3
 800945a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800945e:	801a      	strh	r2, [r3, #0]
 8009460:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009464:	881b      	ldrh	r3, [r3, #0]
 8009466:	b29b      	uxth	r3, r3
 8009468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800946c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009470:	b29a      	uxth	r2, r3
 8009472:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009476:	801a      	strh	r2, [r3, #0]
 8009478:	e32c      	b.n	8009ad4 <USB_EPStartXfer+0x11f6>
 800947a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800947e:	2b3e      	cmp	r3, #62	; 0x3e
 8009480:	d818      	bhi.n	80094b4 <USB_EPStartXfer+0xbd6>
 8009482:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009486:	085b      	lsrs	r3, r3, #1
 8009488:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800948c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b00      	cmp	r3, #0
 8009496:	d004      	beq.n	80094a2 <USB_EPStartXfer+0xbc4>
 8009498:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800949c:	3301      	adds	r3, #1
 800949e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	029b      	lsls	r3, r3, #10
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094b0:	801a      	strh	r2, [r3, #0]
 80094b2:	e30f      	b.n	8009ad4 <USB_EPStartXfer+0x11f6>
 80094b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094b8:	095b      	lsrs	r3, r3, #5
 80094ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094c2:	f003 031f 	and.w	r3, r3, #31
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d104      	bne.n	80094d4 <USB_EPStartXfer+0xbf6>
 80094ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80094ce:	3b01      	subs	r3, #1
 80094d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80094d8:	b29b      	uxth	r3, r3
 80094da:	029b      	lsls	r3, r3, #10
 80094dc:	b29b      	uxth	r3, r3
 80094de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094ec:	801a      	strh	r2, [r3, #0]
 80094ee:	e2f1      	b.n	8009ad4 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 80094f0:	463b      	mov	r3, r7
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	78db      	ldrb	r3, [r3, #3]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	f040 818f 	bne.w	800981a <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80094fc:	463b      	mov	r3, r7
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	785b      	ldrb	r3, [r3, #1]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d175      	bne.n	80095f2 <USB_EPStartXfer+0xd14>
 8009506:	1d3b      	adds	r3, r7, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800950e:	1d3b      	adds	r3, r7, #4
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009516:	b29b      	uxth	r3, r3
 8009518:	461a      	mov	r2, r3
 800951a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800951e:	4413      	add	r3, r2
 8009520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009524:	463b      	mov	r3, r7
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	00da      	lsls	r2, r3, #3
 800952c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009530:	4413      	add	r3, r2
 8009532:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800953a:	463b      	mov	r3, r7
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d116      	bne.n	8009572 <USB_EPStartXfer+0xc94>
 8009544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	b29b      	uxth	r3, r3
 800954c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009550:	b29a      	uxth	r2, r3
 8009552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009556:	801a      	strh	r2, [r3, #0]
 8009558:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800955c:	881b      	ldrh	r3, [r3, #0]
 800955e:	b29b      	uxth	r3, r3
 8009560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009568:	b29a      	uxth	r2, r3
 800956a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800956e:	801a      	strh	r2, [r3, #0]
 8009570:	e065      	b.n	800963e <USB_EPStartXfer+0xd60>
 8009572:	463b      	mov	r3, r7
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	2b3e      	cmp	r3, #62	; 0x3e
 800957a:	d81a      	bhi.n	80095b2 <USB_EPStartXfer+0xcd4>
 800957c:	463b      	mov	r3, r7
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	085b      	lsrs	r3, r3, #1
 8009584:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009588:	463b      	mov	r3, r7
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	d004      	beq.n	80095a0 <USB_EPStartXfer+0xcc2>
 8009596:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800959a:	3301      	adds	r3, #1
 800959c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	029b      	lsls	r3, r3, #10
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095ae:	801a      	strh	r2, [r3, #0]
 80095b0:	e045      	b.n	800963e <USB_EPStartXfer+0xd60>
 80095b2:	463b      	mov	r3, r7
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	095b      	lsrs	r3, r3, #5
 80095ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095be:	463b      	mov	r3, r7
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	f003 031f 	and.w	r3, r3, #31
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d104      	bne.n	80095d6 <USB_EPStartXfer+0xcf8>
 80095cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095d0:	3b01      	subs	r3, #1
 80095d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095da:	b29b      	uxth	r3, r3
 80095dc:	029b      	lsls	r3, r3, #10
 80095de:	b29b      	uxth	r3, r3
 80095e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095ee:	801a      	strh	r2, [r3, #0]
 80095f0:	e025      	b.n	800963e <USB_EPStartXfer+0xd60>
 80095f2:	463b      	mov	r3, r7
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	785b      	ldrb	r3, [r3, #1]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d120      	bne.n	800963e <USB_EPStartXfer+0xd60>
 80095fc:	1d3b      	adds	r3, r7, #4
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009604:	1d3b      	adds	r3, r7, #4
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800960c:	b29b      	uxth	r3, r3
 800960e:	461a      	mov	r2, r3
 8009610:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009614:	4413      	add	r3, r2
 8009616:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800961a:	463b      	mov	r3, r7
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	00da      	lsls	r2, r3, #3
 8009622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009626:	4413      	add	r3, r2
 8009628:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800962c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009630:	463b      	mov	r3, r7
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	b29a      	uxth	r2, r3
 8009638:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800963c:	801a      	strh	r2, [r3, #0]
 800963e:	1d3b      	adds	r3, r7, #4
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009646:	463b      	mov	r3, r7
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	785b      	ldrb	r3, [r3, #1]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d175      	bne.n	800973c <USB_EPStartXfer+0xe5e>
 8009650:	1d3b      	adds	r3, r7, #4
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009658:	1d3b      	adds	r3, r7, #4
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009660:	b29b      	uxth	r3, r3
 8009662:	461a      	mov	r2, r3
 8009664:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009668:	4413      	add	r3, r2
 800966a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800966e:	463b      	mov	r3, r7
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	00da      	lsls	r2, r3, #3
 8009676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800967a:	4413      	add	r3, r2
 800967c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009684:	463b      	mov	r3, r7
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d116      	bne.n	80096bc <USB_EPStartXfer+0xdde>
 800968e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800969a:	b29a      	uxth	r2, r3
 800969c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096a0:	801a      	strh	r2, [r3, #0]
 80096a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096a6:	881b      	ldrh	r3, [r3, #0]
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096b8:	801a      	strh	r2, [r3, #0]
 80096ba:	e061      	b.n	8009780 <USB_EPStartXfer+0xea2>
 80096bc:	463b      	mov	r3, r7
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	2b3e      	cmp	r3, #62	; 0x3e
 80096c4:	d81a      	bhi.n	80096fc <USB_EPStartXfer+0xe1e>
 80096c6:	463b      	mov	r3, r7
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	085b      	lsrs	r3, r3, #1
 80096ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096d2:	463b      	mov	r3, r7
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d004      	beq.n	80096ea <USB_EPStartXfer+0xe0c>
 80096e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096e4:	3301      	adds	r3, #1
 80096e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	029b      	lsls	r3, r3, #10
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096f8:	801a      	strh	r2, [r3, #0]
 80096fa:	e041      	b.n	8009780 <USB_EPStartXfer+0xea2>
 80096fc:	463b      	mov	r3, r7
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	095b      	lsrs	r3, r3, #5
 8009704:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009708:	463b      	mov	r3, r7
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	f003 031f 	and.w	r3, r3, #31
 8009712:	2b00      	cmp	r3, #0
 8009714:	d104      	bne.n	8009720 <USB_EPStartXfer+0xe42>
 8009716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800971a:	3b01      	subs	r3, #1
 800971c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009724:	b29b      	uxth	r3, r3
 8009726:	029b      	lsls	r3, r3, #10
 8009728:	b29b      	uxth	r3, r3
 800972a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800972e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009732:	b29a      	uxth	r2, r3
 8009734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009738:	801a      	strh	r2, [r3, #0]
 800973a:	e021      	b.n	8009780 <USB_EPStartXfer+0xea2>
 800973c:	463b      	mov	r3, r7
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	785b      	ldrb	r3, [r3, #1]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d11c      	bne.n	8009780 <USB_EPStartXfer+0xea2>
 8009746:	1d3b      	adds	r3, r7, #4
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800974e:	b29b      	uxth	r3, r3
 8009750:	461a      	mov	r2, r3
 8009752:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009756:	4413      	add	r3, r2
 8009758:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800975c:	463b      	mov	r3, r7
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	00da      	lsls	r2, r3, #3
 8009764:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009768:	4413      	add	r3, r2
 800976a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800976e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009772:	463b      	mov	r3, r7
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	b29a      	uxth	r2, r3
 800977a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800977e:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8009780:	463b      	mov	r3, r7
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 81a4 	beq.w	8009ad4 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800978c:	1d3b      	adds	r3, r7, #4
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	463b      	mov	r3, r7
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80097a0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80097a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d005      	beq.n	80097b8 <USB_EPStartXfer+0xeda>
 80097ac:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80097b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10d      	bne.n	80097d4 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80097b8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80097bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f040 8187 	bne.w	8009ad4 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80097c6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80097ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f040 8180 	bne.w	8009ad4 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80097d4:	1d3b      	adds	r3, r7, #4
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	463b      	mov	r3, r7
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ee:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80097f2:	1d3b      	adds	r3, r7, #4
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	463b      	mov	r3, r7
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	441a      	add	r2, r3
 8009800:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8009804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800980c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009814:	b29b      	uxth	r3, r3
 8009816:	8013      	strh	r3, [r2, #0]
 8009818:	e15c      	b.n	8009ad4 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800981a:	463b      	mov	r3, r7
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	78db      	ldrb	r3, [r3, #3]
 8009820:	2b01      	cmp	r3, #1
 8009822:	f040 8155 	bne.w	8009ad0 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8009826:	463b      	mov	r3, r7
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	699a      	ldr	r2, [r3, #24]
 800982c:	463b      	mov	r3, r7
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	429a      	cmp	r2, r3
 8009834:	d90e      	bls.n	8009854 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8009836:	463b      	mov	r3, r7
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8009840:	463b      	mov	r3, r7
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	699a      	ldr	r2, [r3, #24]
 8009846:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800984a:	1ad2      	subs	r2, r2, r3
 800984c:	463b      	mov	r3, r7
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	619a      	str	r2, [r3, #24]
 8009852:	e008      	b.n	8009866 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8009854:	463b      	mov	r3, r7
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800985e:	463b      	mov	r3, r7
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2200      	movs	r2, #0
 8009864:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009866:	463b      	mov	r3, r7
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	785b      	ldrb	r3, [r3, #1]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d16f      	bne.n	8009950 <USB_EPStartXfer+0x1072>
 8009870:	1d3b      	adds	r3, r7, #4
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009878:	1d3b      	adds	r3, r7, #4
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009880:	b29b      	uxth	r3, r3
 8009882:	461a      	mov	r2, r3
 8009884:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009888:	4413      	add	r3, r2
 800988a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800988e:	463b      	mov	r3, r7
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	00da      	lsls	r2, r3, #3
 8009896:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800989a:	4413      	add	r3, r2
 800989c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80098a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80098a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d116      	bne.n	80098da <USB_EPStartXfer+0xffc>
 80098ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80098be:	801a      	strh	r2, [r3, #0]
 80098c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80098d6:	801a      	strh	r2, [r3, #0]
 80098d8:	e05f      	b.n	800999a <USB_EPStartXfer+0x10bc>
 80098da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098de:	2b3e      	cmp	r3, #62	; 0x3e
 80098e0:	d818      	bhi.n	8009914 <USB_EPStartXfer+0x1036>
 80098e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098e6:	085b      	lsrs	r3, r3, #1
 80098e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098f0:	f003 0301 	and.w	r3, r3, #1
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d004      	beq.n	8009902 <USB_EPStartXfer+0x1024>
 80098f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098fc:	3301      	adds	r3, #1
 80098fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009906:	b29b      	uxth	r3, r3
 8009908:	029b      	lsls	r3, r3, #10
 800990a:	b29a      	uxth	r2, r3
 800990c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009910:	801a      	strh	r2, [r3, #0]
 8009912:	e042      	b.n	800999a <USB_EPStartXfer+0x10bc>
 8009914:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009918:	095b      	lsrs	r3, r3, #5
 800991a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800991e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009922:	f003 031f 	and.w	r3, r3, #31
 8009926:	2b00      	cmp	r3, #0
 8009928:	d104      	bne.n	8009934 <USB_EPStartXfer+0x1056>
 800992a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800992e:	3b01      	subs	r3, #1
 8009930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009938:	b29b      	uxth	r3, r3
 800993a:	029b      	lsls	r3, r3, #10
 800993c:	b29b      	uxth	r3, r3
 800993e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009946:	b29a      	uxth	r2, r3
 8009948:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800994c:	801a      	strh	r2, [r3, #0]
 800994e:	e024      	b.n	800999a <USB_EPStartXfer+0x10bc>
 8009950:	463b      	mov	r3, r7
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	785b      	ldrb	r3, [r3, #1]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d11f      	bne.n	800999a <USB_EPStartXfer+0x10bc>
 800995a:	1d3b      	adds	r3, r7, #4
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009962:	1d3b      	adds	r3, r7, #4
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800996a:	b29b      	uxth	r3, r3
 800996c:	461a      	mov	r2, r3
 800996e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009972:	4413      	add	r3, r2
 8009974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009978:	463b      	mov	r3, r7
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	00da      	lsls	r2, r3, #3
 8009980:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009984:	4413      	add	r3, r2
 8009986:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800998a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800998e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009992:	b29a      	uxth	r2, r3
 8009994:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009998:	801a      	strh	r2, [r3, #0]
 800999a:	1d3b      	adds	r3, r7, #4
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099a2:	463b      	mov	r3, r7
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	785b      	ldrb	r3, [r3, #1]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d16f      	bne.n	8009a8c <USB_EPStartXfer+0x11ae>
 80099ac:	1d3b      	adds	r3, r7, #4
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099b4:	1d3b      	adds	r3, r7, #4
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099bc:	b29b      	uxth	r3, r3
 80099be:	461a      	mov	r2, r3
 80099c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80099c4:	4413      	add	r3, r2
 80099c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099ca:	463b      	mov	r3, r7
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	00da      	lsls	r2, r3, #3
 80099d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80099d6:	4413      	add	r3, r2
 80099d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80099dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80099e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d116      	bne.n	8009a16 <USB_EPStartXfer+0x1138>
 80099e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80099ec:	881b      	ldrh	r3, [r3, #0]
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80099fa:	801a      	strh	r2, [r3, #0]
 80099fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009a00:	881b      	ldrh	r3, [r3, #0]
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009a12:	801a      	strh	r2, [r3, #0]
 8009a14:	e05e      	b.n	8009ad4 <USB_EPStartXfer+0x11f6>
 8009a16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a1a:	2b3e      	cmp	r3, #62	; 0x3e
 8009a1c:	d818      	bhi.n	8009a50 <USB_EPStartXfer+0x1172>
 8009a1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a22:	085b      	lsrs	r3, r3, #1
 8009a24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d004      	beq.n	8009a3e <USB_EPStartXfer+0x1160>
 8009a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a38:	3301      	adds	r3, #1
 8009a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	029b      	lsls	r3, r3, #10
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009a4c:	801a      	strh	r2, [r3, #0]
 8009a4e:	e041      	b.n	8009ad4 <USB_EPStartXfer+0x11f6>
 8009a50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a54:	095b      	lsrs	r3, r3, #5
 8009a56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a5e:	f003 031f 	and.w	r3, r3, #31
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d104      	bne.n	8009a70 <USB_EPStartXfer+0x1192>
 8009a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	029b      	lsls	r3, r3, #10
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009a88:	801a      	strh	r2, [r3, #0]
 8009a8a:	e023      	b.n	8009ad4 <USB_EPStartXfer+0x11f6>
 8009a8c:	463b      	mov	r3, r7
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	785b      	ldrb	r3, [r3, #1]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d11e      	bne.n	8009ad4 <USB_EPStartXfer+0x11f6>
 8009a96:	1d3b      	adds	r3, r7, #4
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009aac:	463b      	mov	r3, r7
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	00da      	lsls	r2, r3, #3
 8009ab4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ab8:	4413      	add	r3, r2
 8009aba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009abe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ac2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009acc:	801a      	strh	r2, [r3, #0]
 8009ace:	e001      	b.n	8009ad4 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e02e      	b.n	8009b32 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ad4:	1d3b      	adds	r3, r7, #4
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	463b      	mov	r3, r7
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009af2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009af6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009afa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009afe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009b02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b06:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009b0a:	1d3b      	adds	r3, r7, #4
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	463b      	mov	r3, r7
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	441a      	add	r2, r3
 8009b18:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	785b      	ldrb	r3, [r3, #1]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d020      	beq.n	8009b90 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b64:	81bb      	strh	r3, [r7, #12]
 8009b66:	89bb      	ldrh	r3, [r7, #12]
 8009b68:	f083 0310 	eor.w	r3, r3, #16
 8009b6c:	81bb      	strh	r3, [r7, #12]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	441a      	add	r2, r3
 8009b78:	89bb      	ldrh	r3, [r7, #12]
 8009b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	8013      	strh	r3, [r2, #0]
 8009b8e:	e01f      	b.n	8009bd0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ba6:	81fb      	strh	r3, [r7, #14]
 8009ba8:	89fb      	ldrh	r3, [r7, #14]
 8009baa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009bae:	81fb      	strh	r3, [r7, #14]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	441a      	add	r2, r3
 8009bba:	89fb      	ldrh	r3, [r7, #14]
 8009bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b087      	sub	sp, #28
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	7b1b      	ldrb	r3, [r3, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f040 809d 	bne.w	8009d2c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	785b      	ldrb	r3, [r3, #1]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d04c      	beq.n	8009c94 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	823b      	strh	r3, [r7, #16]
 8009c08:	8a3b      	ldrh	r3, [r7, #16]
 8009c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d01b      	beq.n	8009c4a <USB_EPClearStall+0x6c>
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4413      	add	r3, r2
 8009c1c:	881b      	ldrh	r3, [r3, #0]
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c28:	81fb      	strh	r3, [r7, #14]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	441a      	add	r2, r3
 8009c34:	89fb      	ldrh	r3, [r7, #14]
 8009c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	78db      	ldrb	r3, [r3, #3]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d06c      	beq.n	8009d2c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	881b      	ldrh	r3, [r3, #0]
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c68:	81bb      	strh	r3, [r7, #12]
 8009c6a:	89bb      	ldrh	r3, [r7, #12]
 8009c6c:	f083 0320 	eor.w	r3, r3, #32
 8009c70:	81bb      	strh	r3, [r7, #12]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	441a      	add	r2, r3
 8009c7c:	89bb      	ldrh	r3, [r7, #12]
 8009c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	8013      	strh	r3, [r2, #0]
 8009c92:	e04b      	b.n	8009d2c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	881b      	ldrh	r3, [r3, #0]
 8009ca0:	82fb      	strh	r3, [r7, #22]
 8009ca2:	8afb      	ldrh	r3, [r7, #22]
 8009ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d01b      	beq.n	8009ce4 <USB_EPClearStall+0x106>
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4413      	add	r3, r2
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cc2:	82bb      	strh	r3, [r7, #20]
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	441a      	add	r2, r3
 8009cce:	8abb      	ldrh	r3, [r7, #20]
 8009cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cfa:	827b      	strh	r3, [r7, #18]
 8009cfc:	8a7b      	ldrh	r3, [r7, #18]
 8009cfe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d02:	827b      	strh	r3, [r7, #18]
 8009d04:	8a7b      	ldrh	r3, [r7, #18]
 8009d06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d0a:	827b      	strh	r3, [r7, #18]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	441a      	add	r2, r3
 8009d16:	8a7b      	ldrh	r3, [r7, #18]
 8009d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	371c      	adds	r7, #28
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b083      	sub	sp, #12
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	460b      	mov	r3, r1
 8009d44:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009d46:	78fb      	ldrb	r3, [r7, #3]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d103      	bne.n	8009d54 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2280      	movs	r2, #128	; 0x80
 8009d50:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	370c      	adds	r7, #12
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b083      	sub	sp, #12
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009da2:	68fb      	ldr	r3, [r7, #12]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b08d      	sub	sp, #52	; 0x34
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	80fb      	strh	r3, [r7, #6]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009dde:	88bb      	ldrh	r3, [r7, #4]
 8009de0:	3301      	adds	r3, #1
 8009de2:	085b      	lsrs	r3, r3, #1
 8009de4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009dee:	88fa      	ldrh	r2, [r7, #6]
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009df8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dfe:	e01b      	b.n	8009e38 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	3301      	adds	r3, #1
 8009e0a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	021b      	lsls	r3, r3, #8
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	461a      	mov	r2, r3
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e24:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e28:	3302      	adds	r3, #2
 8009e2a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	3301      	adds	r3, #1
 8009e30:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e34:	3b01      	subs	r3, #1
 8009e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e0      	bne.n	8009e00 <USB_WritePMA+0x38>
  }
}
 8009e3e:	bf00      	nop
 8009e40:	bf00      	nop
 8009e42:	3734      	adds	r7, #52	; 0x34
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b08b      	sub	sp, #44	; 0x2c
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	4611      	mov	r1, r2
 8009e58:	461a      	mov	r2, r3
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	80fb      	strh	r3, [r7, #6]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009e62:	88bb      	ldrh	r3, [r7, #4]
 8009e64:	085b      	lsrs	r3, r3, #1
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e72:	88fa      	ldrh	r2, [r7, #6]
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e7c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	627b      	str	r3, [r7, #36]	; 0x24
 8009e82:	e018      	b.n	8009eb6 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	3302      	adds	r3, #2
 8009e90:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	0a1b      	lsrs	r3, r3, #8
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	3301      	adds	r3, #1
 8009eae:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1e3      	bne.n	8009e84 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009ebc:	88bb      	ldrh	r3, [r7, #4]
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d007      	beq.n	8009ed8 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	701a      	strb	r2, [r3, #0]
  }
}
 8009ed8:	bf00      	nop
 8009eda:	372c      	adds	r7, #44	; 0x2c
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009ef0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009ef4:	f002 f854 	bl	800bfa0 <USBD_static_malloc>
 8009ef8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d105      	bne.n	8009f0c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009f08:	2302      	movs	r3, #2
 8009f0a:	e066      	b.n	8009fda <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	7c1b      	ldrb	r3, [r3, #16]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d119      	bne.n	8009f50 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f20:	2202      	movs	r2, #2
 8009f22:	2181      	movs	r1, #129	; 0x81
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f001 fee0 	bl	800bcea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f34:	2202      	movs	r2, #2
 8009f36:	2101      	movs	r1, #1
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f001 fed6 	bl	800bcea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2210      	movs	r2, #16
 8009f4a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009f4e:	e016      	b.n	8009f7e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009f50:	2340      	movs	r3, #64	; 0x40
 8009f52:	2202      	movs	r2, #2
 8009f54:	2181      	movs	r1, #129	; 0x81
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f001 fec7 	bl	800bcea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009f62:	2340      	movs	r3, #64	; 0x40
 8009f64:	2202      	movs	r2, #2
 8009f66:	2101      	movs	r1, #1
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 febe 	bl	800bcea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2210      	movs	r2, #16
 8009f7a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009f7e:	2308      	movs	r3, #8
 8009f80:	2203      	movs	r2, #3
 8009f82:	2182      	movs	r1, #130	; 0x82
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f001 feb0 	bl	800bcea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	7c1b      	ldrb	r3, [r3, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d109      	bne.n	8009fc8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f001 ff82 	bl	800beca <USBD_LL_PrepareReceive>
 8009fc6:	e007      	b.n	8009fd8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fce:	2340      	movs	r3, #64	; 0x40
 8009fd0:	2101      	movs	r1, #1
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f001 ff79 	bl	800beca <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	460b      	mov	r3, r1
 8009fec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009fee:	2181      	movs	r1, #129	; 0x81
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f001 fea0 	bl	800bd36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f001 fe99 	bl	800bd36 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a00c:	2182      	movs	r1, #130	; 0x82
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f001 fe91 	bl	800bd36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00e      	beq.n	800a04c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a03e:	4618      	mov	r0, r3
 800a040:	f001 ffbc 	bl	800bfbc <USBD_static_free>
    pdev->pClassData = NULL;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
	...

0800a058 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a068:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a06a:	2300      	movs	r3, #0
 800a06c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a06e:	2300      	movs	r3, #0
 800a070:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d03a      	beq.n	800a0f8 <USBD_CDC_Setup+0xa0>
 800a082:	2b20      	cmp	r3, #32
 800a084:	f040 8097 	bne.w	800a1b6 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	88db      	ldrh	r3, [r3, #6]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d029      	beq.n	800a0e4 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	b25b      	sxtb	r3, r3
 800a096:	2b00      	cmp	r3, #0
 800a098:	da11      	bge.n	800a0be <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a0a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a0a8:	683a      	ldr	r2, [r7, #0]
 800a0aa:	88d2      	ldrh	r2, [r2, #6]
 800a0ac:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a0ae:	6939      	ldr	r1, [r7, #16]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	88db      	ldrh	r3, [r3, #6]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f001 fa6c 	bl	800b594 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a0bc:	e082      	b.n	800a1c4 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	785a      	ldrb	r2, [r3, #1]
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	88db      	ldrh	r3, [r3, #6]
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a0d4:	6939      	ldr	r1, [r7, #16]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	88db      	ldrh	r3, [r3, #6]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f001 fa85 	bl	800b5ec <USBD_CtlPrepareRx>
      break;
 800a0e2:	e06f      	b.n	800a1c4 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	7850      	ldrb	r0, [r2, #1]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	4798      	blx	r3
      break;
 800a0f6:	e065      	b.n	800a1c4 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	785b      	ldrb	r3, [r3, #1]
 800a0fc:	2b0b      	cmp	r3, #11
 800a0fe:	d84f      	bhi.n	800a1a0 <USBD_CDC_Setup+0x148>
 800a100:	a201      	add	r2, pc, #4	; (adr r2, 800a108 <USBD_CDC_Setup+0xb0>)
 800a102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a106:	bf00      	nop
 800a108:	0800a139 	.word	0x0800a139
 800a10c:	0800a1af 	.word	0x0800a1af
 800a110:	0800a1a1 	.word	0x0800a1a1
 800a114:	0800a1a1 	.word	0x0800a1a1
 800a118:	0800a1a1 	.word	0x0800a1a1
 800a11c:	0800a1a1 	.word	0x0800a1a1
 800a120:	0800a1a1 	.word	0x0800a1a1
 800a124:	0800a1a1 	.word	0x0800a1a1
 800a128:	0800a1a1 	.word	0x0800a1a1
 800a12c:	0800a1a1 	.word	0x0800a1a1
 800a130:	0800a161 	.word	0x0800a161
 800a134:	0800a189 	.word	0x0800a189
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a13e:	2b03      	cmp	r3, #3
 800a140:	d107      	bne.n	800a152 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a142:	f107 030c 	add.w	r3, r7, #12
 800a146:	2202      	movs	r2, #2
 800a148:	4619      	mov	r1, r3
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f001 fa22 	bl	800b594 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a150:	e030      	b.n	800a1b4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f001 f9ac 	bl	800b4b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a15a:	2303      	movs	r3, #3
 800a15c:	75fb      	strb	r3, [r7, #23]
          break;
 800a15e:	e029      	b.n	800a1b4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a166:	2b03      	cmp	r3, #3
 800a168:	d107      	bne.n	800a17a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a16a:	f107 030f 	add.w	r3, r7, #15
 800a16e:	2201      	movs	r2, #1
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f001 fa0e 	bl	800b594 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a178:	e01c      	b.n	800a1b4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 f998 	bl	800b4b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a182:	2303      	movs	r3, #3
 800a184:	75fb      	strb	r3, [r7, #23]
          break;
 800a186:	e015      	b.n	800a1b4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d00f      	beq.n	800a1b2 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800a192:	6839      	ldr	r1, [r7, #0]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f001 f98c 	bl	800b4b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a19a:	2303      	movs	r3, #3
 800a19c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a19e:	e008      	b.n	800a1b2 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f001 f985 	bl	800b4b2 <USBD_CtlError>
          ret = USBD_FAIL;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	75fb      	strb	r3, [r7, #23]
          break;
 800a1ac:	e002      	b.n	800a1b4 <USBD_CDC_Setup+0x15c>
          break;
 800a1ae:	bf00      	nop
 800a1b0:	e008      	b.n	800a1c4 <USBD_CDC_Setup+0x16c>
          break;
 800a1b2:	bf00      	nop
      }
      break;
 800a1b4:	e006      	b.n	800a1c4 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f001 f97a 	bl	800b4b2 <USBD_CtlError>
      ret = USBD_FAIL;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1c2:	bf00      	nop
  }

  return (uint8_t)ret;
 800a1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop

0800a1d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e04f      	b.n	800a292 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a1fa:	78fa      	ldrb	r2, [r7, #3]
 800a1fc:	6879      	ldr	r1, [r7, #4]
 800a1fe:	4613      	mov	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	440b      	add	r3, r1
 800a208:	3318      	adds	r3, #24
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d029      	beq.n	800a264 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a210:	78fa      	ldrb	r2, [r7, #3]
 800a212:	6879      	ldr	r1, [r7, #4]
 800a214:	4613      	mov	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4413      	add	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	440b      	add	r3, r1
 800a21e:	3318      	adds	r3, #24
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	78f9      	ldrb	r1, [r7, #3]
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	460b      	mov	r3, r1
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	440b      	add	r3, r1
 800a22c:	00db      	lsls	r3, r3, #3
 800a22e:	4403      	add	r3, r0
 800a230:	3338      	adds	r3, #56	; 0x38
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	fbb2 f1f3 	udiv	r1, r2, r3
 800a238:	fb03 f301 	mul.w	r3, r3, r1
 800a23c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d110      	bne.n	800a264 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a242:	78fa      	ldrb	r2, [r7, #3]
 800a244:	6879      	ldr	r1, [r7, #4]
 800a246:	4613      	mov	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4413      	add	r3, r2
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	440b      	add	r3, r1
 800a250:	3318      	adds	r3, #24
 800a252:	2200      	movs	r2, #0
 800a254:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a256:	78f9      	ldrb	r1, [r7, #3]
 800a258:	2300      	movs	r3, #0
 800a25a:	2200      	movs	r2, #0
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f001 fe13 	bl	800be88 <USBD_LL_Transmit>
 800a262:	e015      	b.n	800a290 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	2200      	movs	r2, #0
 800a268:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00b      	beq.n	800a290 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a28c:	78fa      	ldrb	r2, [r7, #3]
 800a28e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b084      	sub	sp, #16
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d101      	bne.n	800a2bc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	e015      	b.n	800a2e8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a2bc:	78fb      	ldrb	r3, [r7, #3]
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f001 fe23 	bl	800bf0c <USBD_LL_GetRxDataSize>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2fe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d015      	beq.n	800a336 <USBD_CDC_EP0_RxReady+0x46>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a310:	2bff      	cmp	r3, #255	; 0xff
 800a312:	d010      	beq.n	800a336 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a322:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a32a:	b292      	uxth	r2, r2
 800a32c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	22ff      	movs	r2, #255	; 0xff
 800a332:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2243      	movs	r2, #67	; 0x43
 800a34c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a34e:	4b03      	ldr	r3, [pc, #12]	; (800a35c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a350:	4618      	mov	r0, r3
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr
 800a35c:	200000b4 	.word	0x200000b4

0800a360 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2243      	movs	r2, #67	; 0x43
 800a36c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a36e:	4b03      	ldr	r3, [pc, #12]	; (800a37c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a370:	4618      	mov	r0, r3
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	20000070 	.word	0x20000070

0800a380 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2243      	movs	r2, #67	; 0x43
 800a38c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a38e:	4b03      	ldr	r3, [pc, #12]	; (800a39c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a390:	4618      	mov	r0, r3
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	200000f8 	.word	0x200000f8

0800a3a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	220a      	movs	r2, #10
 800a3ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a3ae:	4b03      	ldr	r3, [pc, #12]	; (800a3bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	2000002c 	.word	0x2000002c

0800a3c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d101      	bne.n	800a3d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e004      	b.n	800a3de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b087      	sub	sp, #28
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	60f8      	str	r0, [r7, #12]
 800a3f2:	60b9      	str	r1, [r7, #8]
 800a3f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3fc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	371c      	adds	r7, #28
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a42c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	683a      	ldr	r2, [r7, #0]
 800a432:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a452:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a45e:	2303      	movs	r3, #3
 800a460:	e016      	b.n	800a490 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	7c1b      	ldrb	r3, [r3, #16]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d109      	bne.n	800a47e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a470:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a474:	2101      	movs	r1, #1
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f001 fd27 	bl	800beca <USBD_LL_PrepareReceive>
 800a47c:	e007      	b.n	800a48e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a484:	2340      	movs	r3, #64	; 0x40
 800a486:	2101      	movs	r1, #1
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 fd1e 	bl	800beca <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d101      	bne.n	800a4b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	e01f      	b.n	800a4f0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d003      	beq.n	800a4d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	79fa      	ldrb	r2, [r7, #7]
 800a4e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f001 fb85 	bl	800bbf4 <USBD_LL_Init>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3718      	adds	r7, #24
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a502:	2300      	movs	r3, #0
 800a504:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e016      	b.n	800a53e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00b      	beq.n	800a53c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52c:	f107 020e 	add.w	r2, r7, #14
 800a530:	4610      	mov	r0, r2
 800a532:	4798      	blx	r3
 800a534:	4602      	mov	r2, r0
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b082      	sub	sp, #8
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f001 fbb0 	bl	800bcb4 <USBD_LL_Start>
 800a554:	4603      	mov	r3, r0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a55e:	b480      	push	{r7}
 800a560:	b083      	sub	sp, #12
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	460b      	mov	r3, r1
 800a57e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a580:	2303      	movs	r3, #3
 800a582:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d009      	beq.n	800a5a2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	78fa      	ldrb	r2, [r7, #3]
 800a598:	4611      	mov	r1, r2
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	4798      	blx	r3
 800a59e:	4603      	mov	r3, r0
 800a5a0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d007      	beq.n	800a5d2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	78fa      	ldrb	r2, [r7, #3]
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	4798      	blx	r3
  }

  return USBD_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5ec:	6839      	ldr	r1, [r7, #0]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 ff25 	bl	800b43e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a602:	461a      	mov	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a610:	f003 031f 	and.w	r3, r3, #31
 800a614:	2b02      	cmp	r3, #2
 800a616:	d01a      	beq.n	800a64e <USBD_LL_SetupStage+0x72>
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d822      	bhi.n	800a662 <USBD_LL_SetupStage+0x86>
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <USBD_LL_SetupStage+0x4a>
 800a620:	2b01      	cmp	r3, #1
 800a622:	d00a      	beq.n	800a63a <USBD_LL_SetupStage+0x5e>
 800a624:	e01d      	b.n	800a662 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a62c:	4619      	mov	r1, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f9d6 	bl	800a9e0 <USBD_StdDevReq>
 800a634:	4603      	mov	r3, r0
 800a636:	73fb      	strb	r3, [r7, #15]
      break;
 800a638:	e020      	b.n	800a67c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a640:	4619      	mov	r1, r3
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fa3a 	bl	800aabc <USBD_StdItfReq>
 800a648:	4603      	mov	r3, r0
 800a64a:	73fb      	strb	r3, [r7, #15]
      break;
 800a64c:	e016      	b.n	800a67c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a654:	4619      	mov	r1, r3
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fa78 	bl	800ab4c <USBD_StdEPReq>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73fb      	strb	r3, [r7, #15]
      break;
 800a660:	e00c      	b.n	800a67c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a668:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f001 fb7f 	bl	800bd74 <USBD_LL_StallEP>
 800a676:	4603      	mov	r3, r0
 800a678:	73fb      	strb	r3, [r7, #15]
      break;
 800a67a:	bf00      	nop
  }

  return ret;
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b086      	sub	sp, #24
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	60f8      	str	r0, [r7, #12]
 800a68e:	460b      	mov	r3, r1
 800a690:	607a      	str	r2, [r7, #4]
 800a692:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a694:	7afb      	ldrb	r3, [r7, #11]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d137      	bne.n	800a70a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a6a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6a8:	2b03      	cmp	r3, #3
 800a6aa:	d14a      	bne.n	800a742 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	689a      	ldr	r2, [r3, #8]
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d913      	bls.n	800a6e0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	689a      	ldr	r2, [r3, #8]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	1ad2      	subs	r2, r2, r3
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	68da      	ldr	r2, [r3, #12]
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	bf28      	it	cs
 800a6d2:	4613      	movcs	r3, r2
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 ffa4 	bl	800b626 <USBD_CtlContinueRx>
 800a6de:	e030      	b.n	800a742 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00a      	beq.n	800a702 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a6f2:	2b03      	cmp	r3, #3
 800a6f4:	d105      	bne.n	800a702 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 ffa0 	bl	800b648 <USBD_CtlSendStatus>
 800a708:	e01b      	b.n	800a742 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d013      	beq.n	800a73e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a71c:	2b03      	cmp	r3, #3
 800a71e:	d10e      	bne.n	800a73e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a726:	699b      	ldr	r3, [r3, #24]
 800a728:	7afa      	ldrb	r2, [r7, #11]
 800a72a:	4611      	mov	r1, r2
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	4798      	blx	r3
 800a730:	4603      	mov	r3, r0
 800a732:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a734:	7dfb      	ldrb	r3, [r7, #23]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
 800a73c:	e002      	b.n	800a744 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a73e:	2303      	movs	r3, #3
 800a740:	e000      	b.n	800a744 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	460b      	mov	r3, r1
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a75a:	7afb      	ldrb	r3, [r7, #11]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d16a      	bne.n	800a836 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3314      	adds	r3, #20
 800a764:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d155      	bne.n	800a81c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d914      	bls.n	800a7a6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	689a      	ldr	r2, [r3, #8]
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	1ad2      	subs	r2, r2, r3
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	461a      	mov	r2, r3
 800a790:	6879      	ldr	r1, [r7, #4]
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f000 ff19 	bl	800b5ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a798:	2300      	movs	r3, #0
 800a79a:	2200      	movs	r2, #0
 800a79c:	2100      	movs	r1, #0
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f001 fb93 	bl	800beca <USBD_LL_PrepareReceive>
 800a7a4:	e03a      	b.n	800a81c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	68da      	ldr	r2, [r3, #12]
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d11c      	bne.n	800a7ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	685a      	ldr	r2, [r3, #4]
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d316      	bcc.n	800a7ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d20f      	bcs.n	800a7ec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f000 fefa 	bl	800b5ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7de:	2300      	movs	r3, #0
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f001 fb70 	bl	800beca <USBD_LL_PrepareReceive>
 800a7ea:	e017      	b.n	800a81c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00a      	beq.n	800a80e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a7fe:	2b03      	cmp	r3, #3
 800a800:	d105      	bne.n	800a80e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a80e:	2180      	movs	r1, #128	; 0x80
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f001 faaf 	bl	800bd74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f000 ff29 	bl	800b66e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a822:	2b01      	cmp	r3, #1
 800a824:	d123      	bne.n	800a86e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f7ff fe99 	bl	800a55e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a834:	e01b      	b.n	800a86e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d013      	beq.n	800a86a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d10e      	bne.n	800a86a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a852:	695b      	ldr	r3, [r3, #20]
 800a854:	7afa      	ldrb	r2, [r7, #11]
 800a856:	4611      	mov	r1, r2
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	4798      	blx	r3
 800a85c:	4603      	mov	r3, r0
 800a85e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a860:	7dfb      	ldrb	r3, [r7, #23]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a866:	7dfb      	ldrb	r3, [r7, #23]
 800a868:	e002      	b.n	800a870 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e000      	b.n	800a870 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3718      	adds	r7, #24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d009      	beq.n	800a8bc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	6852      	ldr	r2, [r2, #4]
 800a8b4:	b2d2      	uxtb	r2, r2
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8bc:	2340      	movs	r3, #64	; 0x40
 800a8be:	2200      	movs	r2, #0
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f001 fa11 	bl	800bcea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2240      	movs	r2, #64	; 0x40
 800a8d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8d8:	2340      	movs	r3, #64	; 0x40
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2180      	movs	r1, #128	; 0x80
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f001 fa03 	bl	800bcea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2240      	movs	r2, #64	; 0x40
 800a8ee:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b083      	sub	sp, #12
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	460b      	mov	r3, r1
 800a904:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	78fa      	ldrb	r2, [r7, #3]
 800a90a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b083      	sub	sp, #12
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2204      	movs	r2, #4
 800a932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a952:	2b04      	cmp	r3, #4
 800a954:	d105      	bne.n	800a962 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d10b      	bne.n	800a99a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a988:	69db      	ldr	r3, [r3, #28]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d005      	beq.n	800a99a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a99a:	2300      	movs	r3, #0
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b087      	sub	sp, #28
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a9c2:	8a3b      	ldrh	r3, [r7, #16]
 800a9c4:	021b      	lsls	r3, r3, #8
 800a9c6:	b21a      	sxth	r2, r3
 800a9c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	b21b      	sxth	r3, r3
 800a9d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a9d2:	89fb      	ldrh	r3, [r7, #14]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	371c      	adds	r7, #28
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9f6:	2b40      	cmp	r3, #64	; 0x40
 800a9f8:	d005      	beq.n	800aa06 <USBD_StdDevReq+0x26>
 800a9fa:	2b40      	cmp	r3, #64	; 0x40
 800a9fc:	d853      	bhi.n	800aaa6 <USBD_StdDevReq+0xc6>
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00b      	beq.n	800aa1a <USBD_StdDevReq+0x3a>
 800aa02:	2b20      	cmp	r3, #32
 800aa04:	d14f      	bne.n	800aaa6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	6839      	ldr	r1, [r7, #0]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	4798      	blx	r3
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]
    break;
 800aa18:	e04a      	b.n	800aab0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	785b      	ldrb	r3, [r3, #1]
 800aa1e:	2b09      	cmp	r3, #9
 800aa20:	d83b      	bhi.n	800aa9a <USBD_StdDevReq+0xba>
 800aa22:	a201      	add	r2, pc, #4	; (adr r2, 800aa28 <USBD_StdDevReq+0x48>)
 800aa24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa28:	0800aa7d 	.word	0x0800aa7d
 800aa2c:	0800aa91 	.word	0x0800aa91
 800aa30:	0800aa9b 	.word	0x0800aa9b
 800aa34:	0800aa87 	.word	0x0800aa87
 800aa38:	0800aa9b 	.word	0x0800aa9b
 800aa3c:	0800aa5b 	.word	0x0800aa5b
 800aa40:	0800aa51 	.word	0x0800aa51
 800aa44:	0800aa9b 	.word	0x0800aa9b
 800aa48:	0800aa73 	.word	0x0800aa73
 800aa4c:	0800aa65 	.word	0x0800aa65
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f9da 	bl	800ae0c <USBD_GetDescriptor>
      break;
 800aa58:	e024      	b.n	800aaa4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 fb69 	bl	800b134 <USBD_SetAddress>
      break;
 800aa62:	e01f      	b.n	800aaa4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800aa64:	6839      	ldr	r1, [r7, #0]
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fba8 	bl	800b1bc <USBD_SetConfig>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa70:	e018      	b.n	800aaa4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fc45 	bl	800b304 <USBD_GetConfig>
      break;
 800aa7a:	e013      	b.n	800aaa4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800aa7c:	6839      	ldr	r1, [r7, #0]
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fc75 	bl	800b36e <USBD_GetStatus>
      break;
 800aa84:	e00e      	b.n	800aaa4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fca3 	bl	800b3d4 <USBD_SetFeature>
      break;
 800aa8e:	e009      	b.n	800aaa4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800aa90:	6839      	ldr	r1, [r7, #0]
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fcb2 	bl	800b3fc <USBD_ClrFeature>
      break;
 800aa98:	e004      	b.n	800aaa4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800aa9a:	6839      	ldr	r1, [r7, #0]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fd08 	bl	800b4b2 <USBD_CtlError>
      break;
 800aaa2:	bf00      	nop
    }
    break;
 800aaa4:	e004      	b.n	800aab0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800aaa6:	6839      	ldr	r1, [r7, #0]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fd02 	bl	800b4b2 <USBD_CtlError>
    break;
 800aaae:	bf00      	nop
  }

  return ret;
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop

0800aabc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aad2:	2b40      	cmp	r3, #64	; 0x40
 800aad4:	d005      	beq.n	800aae2 <USBD_StdItfReq+0x26>
 800aad6:	2b40      	cmp	r3, #64	; 0x40
 800aad8:	d82e      	bhi.n	800ab38 <USBD_StdItfReq+0x7c>
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d001      	beq.n	800aae2 <USBD_StdItfReq+0x26>
 800aade:	2b20      	cmp	r3, #32
 800aae0:	d12a      	bne.n	800ab38 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aae8:	3b01      	subs	r3, #1
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d81d      	bhi.n	800ab2a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	889b      	ldrh	r3, [r3, #4]
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d813      	bhi.n	800ab20 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	4798      	blx	r3
 800ab06:	4603      	mov	r3, r0
 800ab08:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	88db      	ldrh	r3, [r3, #6]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d110      	bne.n	800ab34 <USBD_StdItfReq+0x78>
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10d      	bne.n	800ab34 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fd95 	bl	800b648 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ab1e:	e009      	b.n	800ab34 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800ab20:	6839      	ldr	r1, [r7, #0]
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 fcc5 	bl	800b4b2 <USBD_CtlError>
      break;
 800ab28:	e004      	b.n	800ab34 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fcc0 	bl	800b4b2 <USBD_CtlError>
      break;
 800ab32:	e000      	b.n	800ab36 <USBD_StdItfReq+0x7a>
      break;
 800ab34:	bf00      	nop
    }
    break;
 800ab36:	e004      	b.n	800ab42 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fcb9 	bl	800b4b2 <USBD_CtlError>
    break;
 800ab40:	bf00      	nop
  }

  return ret;
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	889b      	ldrh	r3, [r3, #4]
 800ab5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab68:	2b40      	cmp	r3, #64	; 0x40
 800ab6a:	d007      	beq.n	800ab7c <USBD_StdEPReq+0x30>
 800ab6c:	2b40      	cmp	r3, #64	; 0x40
 800ab6e:	f200 8142 	bhi.w	800adf6 <USBD_StdEPReq+0x2aa>
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00c      	beq.n	800ab90 <USBD_StdEPReq+0x44>
 800ab76:	2b20      	cmp	r3, #32
 800ab78:	f040 813d 	bne.w	800adf6 <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	6839      	ldr	r1, [r7, #0]
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	4798      	blx	r3
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab8e:	e137      	b.n	800ae00 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	785b      	ldrb	r3, [r3, #1]
 800ab94:	2b03      	cmp	r3, #3
 800ab96:	d007      	beq.n	800aba8 <USBD_StdEPReq+0x5c>
 800ab98:	2b03      	cmp	r3, #3
 800ab9a:	f300 8126 	bgt.w	800adea <USBD_StdEPReq+0x29e>
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d07d      	beq.n	800ac9e <USBD_StdEPReq+0x152>
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d03b      	beq.n	800ac1e <USBD_StdEPReq+0xd2>
 800aba6:	e120      	b.n	800adea <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d002      	beq.n	800abb8 <USBD_StdEPReq+0x6c>
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	d016      	beq.n	800abe4 <USBD_StdEPReq+0x98>
 800abb6:	e02c      	b.n	800ac12 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abb8:	7bbb      	ldrb	r3, [r7, #14]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00d      	beq.n	800abda <USBD_StdEPReq+0x8e>
 800abbe:	7bbb      	ldrb	r3, [r7, #14]
 800abc0:	2b80      	cmp	r3, #128	; 0x80
 800abc2:	d00a      	beq.n	800abda <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
 800abc6:	4619      	mov	r1, r3
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f001 f8d3 	bl	800bd74 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800abce:	2180      	movs	r1, #128	; 0x80
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f001 f8cf 	bl	800bd74 <USBD_LL_StallEP>
 800abd6:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800abd8:	e020      	b.n	800ac1c <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fc68 	bl	800b4b2 <USBD_CtlError>
        break;
 800abe2:	e01b      	b.n	800ac1c <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	885b      	ldrh	r3, [r3, #2]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d10e      	bne.n	800ac0a <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800abec:	7bbb      	ldrb	r3, [r7, #14]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00b      	beq.n	800ac0a <USBD_StdEPReq+0xbe>
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
 800abf4:	2b80      	cmp	r3, #128	; 0x80
 800abf6:	d008      	beq.n	800ac0a <USBD_StdEPReq+0xbe>
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	88db      	ldrh	r3, [r3, #6]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d104      	bne.n	800ac0a <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
 800ac02:	4619      	mov	r1, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f001 f8b5 	bl	800bd74 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fd1c 	bl	800b648 <USBD_CtlSendStatus>

        break;
 800ac10:	e004      	b.n	800ac1c <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 fc4c 	bl	800b4b2 <USBD_CtlError>
        break;
 800ac1a:	bf00      	nop
      }
      break;
 800ac1c:	e0ea      	b.n	800adf4 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d002      	beq.n	800ac2e <USBD_StdEPReq+0xe2>
 800ac28:	2b03      	cmp	r3, #3
 800ac2a:	d016      	beq.n	800ac5a <USBD_StdEPReq+0x10e>
 800ac2c:	e030      	b.n	800ac90 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac2e:	7bbb      	ldrb	r3, [r7, #14]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00d      	beq.n	800ac50 <USBD_StdEPReq+0x104>
 800ac34:	7bbb      	ldrb	r3, [r7, #14]
 800ac36:	2b80      	cmp	r3, #128	; 0x80
 800ac38:	d00a      	beq.n	800ac50 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac3a:	7bbb      	ldrb	r3, [r7, #14]
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f001 f898 	bl	800bd74 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac44:	2180      	movs	r1, #128	; 0x80
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f001 f894 	bl	800bd74 <USBD_LL_StallEP>
 800ac4c:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ac4e:	e025      	b.n	800ac9c <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fc2d 	bl	800b4b2 <USBD_CtlError>
        break;
 800ac58:	e020      	b.n	800ac9c <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	885b      	ldrh	r3, [r3, #2]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d11b      	bne.n	800ac9a <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
 800ac64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d004      	beq.n	800ac76 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f001 f89e 	bl	800bdb2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 fce6 	bl	800b648 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	6839      	ldr	r1, [r7, #0]
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	4798      	blx	r3
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ac8e:	e004      	b.n	800ac9a <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fc0d 	bl	800b4b2 <USBD_CtlError>
        break;
 800ac98:	e000      	b.n	800ac9c <USBD_StdEPReq+0x150>
        break;
 800ac9a:	bf00      	nop
      }
      break;
 800ac9c:	e0aa      	b.n	800adf4 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d002      	beq.n	800acae <USBD_StdEPReq+0x162>
 800aca8:	2b03      	cmp	r3, #3
 800acaa:	d032      	beq.n	800ad12 <USBD_StdEPReq+0x1c6>
 800acac:	e097      	b.n	800adde <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acae:	7bbb      	ldrb	r3, [r7, #14]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d007      	beq.n	800acc4 <USBD_StdEPReq+0x178>
 800acb4:	7bbb      	ldrb	r3, [r7, #14]
 800acb6:	2b80      	cmp	r3, #128	; 0x80
 800acb8:	d004      	beq.n	800acc4 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 800acba:	6839      	ldr	r1, [r7, #0]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 fbf8 	bl	800b4b2 <USBD_CtlError>
          break;
 800acc2:	e091      	b.n	800ade8 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	da0b      	bge.n	800ace4 <USBD_StdEPReq+0x198>
 800accc:	7bbb      	ldrb	r3, [r7, #14]
 800acce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acd2:	4613      	mov	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	3310      	adds	r3, #16
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	4413      	add	r3, r2
 800ace0:	3304      	adds	r3, #4
 800ace2:	e00b      	b.n	800acfc <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ace4:	7bbb      	ldrb	r3, [r7, #14]
 800ace6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	4413      	add	r3, r2
 800acfa:	3304      	adds	r3, #4
 800acfc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	2200      	movs	r2, #0
 800ad02:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2202      	movs	r2, #2
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fc42 	bl	800b594 <USBD_CtlSendData>
        break;
 800ad10:	e06a      	b.n	800ade8 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ad12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	da11      	bge.n	800ad3e <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
 800ad1c:	f003 020f 	and.w	r2, r3, #15
 800ad20:	6879      	ldr	r1, [r7, #4]
 800ad22:	4613      	mov	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4413      	add	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	440b      	add	r3, r1
 800ad2c:	3324      	adds	r3, #36	; 0x24
 800ad2e:	881b      	ldrh	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d117      	bne.n	800ad64 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fbbb 	bl	800b4b2 <USBD_CtlError>
            break;
 800ad3c:	e054      	b.n	800ade8 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad3e:	7bbb      	ldrb	r3, [r7, #14]
 800ad40:	f003 020f 	and.w	r2, r3, #15
 800ad44:	6879      	ldr	r1, [r7, #4]
 800ad46:	4613      	mov	r3, r2
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	4413      	add	r3, r2
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	440b      	add	r3, r1
 800ad50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad54:	881b      	ldrh	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d104      	bne.n	800ad64 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fba8 	bl	800b4b2 <USBD_CtlError>
            break;
 800ad62:	e041      	b.n	800ade8 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	da0b      	bge.n	800ad84 <USBD_StdEPReq+0x238>
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
 800ad6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad72:	4613      	mov	r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	4413      	add	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	3310      	adds	r3, #16
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	4413      	add	r3, r2
 800ad80:	3304      	adds	r3, #4
 800ad82:	e00b      	b.n	800ad9c <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
 800ad86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	4413      	add	r3, r2
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad9e:	7bbb      	ldrb	r3, [r7, #14]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <USBD_StdEPReq+0x25e>
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	2b80      	cmp	r3, #128	; 0x80
 800ada8:	d103      	bne.n	800adb2 <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	2200      	movs	r2, #0
 800adae:	601a      	str	r2, [r3, #0]
 800adb0:	e00e      	b.n	800add0 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800adb2:	7bbb      	ldrb	r3, [r7, #14]
 800adb4:	4619      	mov	r1, r3
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f001 f81a 	bl	800bdf0 <USBD_LL_IsStallEP>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d003      	beq.n	800adca <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2201      	movs	r2, #1
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	e002      	b.n	800add0 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	2200      	movs	r2, #0
 800adce:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	2202      	movs	r2, #2
 800add4:	4619      	mov	r1, r3
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fbdc 	bl	800b594 <USBD_CtlSendData>
          break;
 800addc:	e004      	b.n	800ade8 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fb66 	bl	800b4b2 <USBD_CtlError>
        break;
 800ade6:	bf00      	nop
      }
      break;
 800ade8:	e004      	b.n	800adf4 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 800adea:	6839      	ldr	r1, [r7, #0]
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 fb60 	bl	800b4b2 <USBD_CtlError>
      break;
 800adf2:	bf00      	nop
    }
    break;
 800adf4:	e004      	b.n	800ae00 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fb5a 	bl	800b4b2 <USBD_CtlError>
    break;
 800adfe:	bf00      	nop
  }

  return ret;
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
	...

0800ae0c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae16:	2300      	movs	r3, #0
 800ae18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	885b      	ldrh	r3, [r3, #2]
 800ae26:	0a1b      	lsrs	r3, r3, #8
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	2b0e      	cmp	r3, #14
 800ae2e:	f200 8152 	bhi.w	800b0d6 <USBD_GetDescriptor+0x2ca>
 800ae32:	a201      	add	r2, pc, #4	; (adr r2, 800ae38 <USBD_GetDescriptor+0x2c>)
 800ae34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae38:	0800aea9 	.word	0x0800aea9
 800ae3c:	0800aec1 	.word	0x0800aec1
 800ae40:	0800af01 	.word	0x0800af01
 800ae44:	0800b0d7 	.word	0x0800b0d7
 800ae48:	0800b0d7 	.word	0x0800b0d7
 800ae4c:	0800b077 	.word	0x0800b077
 800ae50:	0800b0a3 	.word	0x0800b0a3
 800ae54:	0800b0d7 	.word	0x0800b0d7
 800ae58:	0800b0d7 	.word	0x0800b0d7
 800ae5c:	0800b0d7 	.word	0x0800b0d7
 800ae60:	0800b0d7 	.word	0x0800b0d7
 800ae64:	0800b0d7 	.word	0x0800b0d7
 800ae68:	0800b0d7 	.word	0x0800b0d7
 800ae6c:	0800b0d7 	.word	0x0800b0d7
 800ae70:	0800ae75 	.word	0x0800ae75
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae7a:	69db      	ldr	r3, [r3, #28]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00b      	beq.n	800ae98 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae86:	69db      	ldr	r3, [r3, #28]
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	7c12      	ldrb	r2, [r2, #16]
 800ae8c:	f107 0108 	add.w	r1, r7, #8
 800ae90:	4610      	mov	r0, r2
 800ae92:	4798      	blx	r3
 800ae94:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ae96:	e126      	b.n	800b0e6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fb09 	bl	800b4b2 <USBD_CtlError>
      err++;
 800aea0:	7afb      	ldrb	r3, [r7, #11]
 800aea2:	3301      	adds	r3, #1
 800aea4:	72fb      	strb	r3, [r7, #11]
    break;
 800aea6:	e11e      	b.n	800b0e6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	7c12      	ldrb	r2, [r2, #16]
 800aeb4:	f107 0108 	add.w	r1, r7, #8
 800aeb8:	4610      	mov	r0, r2
 800aeba:	4798      	blx	r3
 800aebc:	60f8      	str	r0, [r7, #12]
    break;
 800aebe:	e112      	b.n	800b0e6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	7c1b      	ldrb	r3, [r3, #16]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10d      	bne.n	800aee4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed0:	f107 0208 	add.w	r2, r7, #8
 800aed4:	4610      	mov	r0, r2
 800aed6:	4798      	blx	r3
 800aed8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	3301      	adds	r3, #1
 800aede:	2202      	movs	r2, #2
 800aee0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800aee2:	e100      	b.n	800b0e6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeec:	f107 0208 	add.w	r2, r7, #8
 800aef0:	4610      	mov	r0, r2
 800aef2:	4798      	blx	r3
 800aef4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	3301      	adds	r3, #1
 800aefa:	2202      	movs	r2, #2
 800aefc:	701a      	strb	r2, [r3, #0]
    break;
 800aefe:	e0f2      	b.n	800b0e6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	885b      	ldrh	r3, [r3, #2]
 800af04:	b2db      	uxtb	r3, r3
 800af06:	2b05      	cmp	r3, #5
 800af08:	f200 80ac 	bhi.w	800b064 <USBD_GetDescriptor+0x258>
 800af0c:	a201      	add	r2, pc, #4	; (adr r2, 800af14 <USBD_GetDescriptor+0x108>)
 800af0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af12:	bf00      	nop
 800af14:	0800af2d 	.word	0x0800af2d
 800af18:	0800af61 	.word	0x0800af61
 800af1c:	0800af95 	.word	0x0800af95
 800af20:	0800afc9 	.word	0x0800afc9
 800af24:	0800affd 	.word	0x0800affd
 800af28:	0800b031 	.word	0x0800b031
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00b      	beq.n	800af50 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	7c12      	ldrb	r2, [r2, #16]
 800af44:	f107 0108 	add.w	r1, r7, #8
 800af48:	4610      	mov	r0, r2
 800af4a:	4798      	blx	r3
 800af4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af4e:	e091      	b.n	800b074 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800af50:	6839      	ldr	r1, [r7, #0]
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 faad 	bl	800b4b2 <USBD_CtlError>
        err++;
 800af58:	7afb      	ldrb	r3, [r7, #11]
 800af5a:	3301      	adds	r3, #1
 800af5c:	72fb      	strb	r3, [r7, #11]
      break;
 800af5e:	e089      	b.n	800b074 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00b      	beq.n	800af84 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	7c12      	ldrb	r2, [r2, #16]
 800af78:	f107 0108 	add.w	r1, r7, #8
 800af7c:	4610      	mov	r0, r2
 800af7e:	4798      	blx	r3
 800af80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af82:	e077      	b.n	800b074 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fa93 	bl	800b4b2 <USBD_CtlError>
        err++;
 800af8c:	7afb      	ldrb	r3, [r7, #11]
 800af8e:	3301      	adds	r3, #1
 800af90:	72fb      	strb	r3, [r7, #11]
      break;
 800af92:	e06f      	b.n	800b074 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00b      	beq.n	800afb8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	7c12      	ldrb	r2, [r2, #16]
 800afac:	f107 0108 	add.w	r1, r7, #8
 800afb0:	4610      	mov	r0, r2
 800afb2:	4798      	blx	r3
 800afb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afb6:	e05d      	b.n	800b074 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800afb8:	6839      	ldr	r1, [r7, #0]
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 fa79 	bl	800b4b2 <USBD_CtlError>
        err++;
 800afc0:	7afb      	ldrb	r3, [r7, #11]
 800afc2:	3301      	adds	r3, #1
 800afc4:	72fb      	strb	r3, [r7, #11]
      break;
 800afc6:	e055      	b.n	800b074 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00b      	beq.n	800afec <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	7c12      	ldrb	r2, [r2, #16]
 800afe0:	f107 0108 	add.w	r1, r7, #8
 800afe4:	4610      	mov	r0, r2
 800afe6:	4798      	blx	r3
 800afe8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afea:	e043      	b.n	800b074 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fa5f 	bl	800b4b2 <USBD_CtlError>
        err++;
 800aff4:	7afb      	ldrb	r3, [r7, #11]
 800aff6:	3301      	adds	r3, #1
 800aff8:	72fb      	strb	r3, [r7, #11]
      break;
 800affa:	e03b      	b.n	800b074 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b002:	695b      	ldr	r3, [r3, #20]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00b      	beq.n	800b020 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b00e:	695b      	ldr	r3, [r3, #20]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	7c12      	ldrb	r2, [r2, #16]
 800b014:	f107 0108 	add.w	r1, r7, #8
 800b018:	4610      	mov	r0, r2
 800b01a:	4798      	blx	r3
 800b01c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b01e:	e029      	b.n	800b074 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b020:	6839      	ldr	r1, [r7, #0]
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fa45 	bl	800b4b2 <USBD_CtlError>
        err++;
 800b028:	7afb      	ldrb	r3, [r7, #11]
 800b02a:	3301      	adds	r3, #1
 800b02c:	72fb      	strb	r3, [r7, #11]
      break;
 800b02e:	e021      	b.n	800b074 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00b      	beq.n	800b054 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b042:	699b      	ldr	r3, [r3, #24]
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	7c12      	ldrb	r2, [r2, #16]
 800b048:	f107 0108 	add.w	r1, r7, #8
 800b04c:	4610      	mov	r0, r2
 800b04e:	4798      	blx	r3
 800b050:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b052:	e00f      	b.n	800b074 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fa2b 	bl	800b4b2 <USBD_CtlError>
        err++;
 800b05c:	7afb      	ldrb	r3, [r7, #11]
 800b05e:	3301      	adds	r3, #1
 800b060:	72fb      	strb	r3, [r7, #11]
      break;
 800b062:	e007      	b.n	800b074 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fa23 	bl	800b4b2 <USBD_CtlError>
      err++;
 800b06c:	7afb      	ldrb	r3, [r7, #11]
 800b06e:	3301      	adds	r3, #1
 800b070:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b072:	bf00      	nop
    }
    break;
 800b074:	e037      	b.n	800b0e6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	7c1b      	ldrb	r3, [r3, #16]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d109      	bne.n	800b092 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b086:	f107 0208 	add.w	r2, r7, #8
 800b08a:	4610      	mov	r0, r2
 800b08c:	4798      	blx	r3
 800b08e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b090:	e029      	b.n	800b0e6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 fa0c 	bl	800b4b2 <USBD_CtlError>
      err++;
 800b09a:	7afb      	ldrb	r3, [r7, #11]
 800b09c:	3301      	adds	r3, #1
 800b09e:	72fb      	strb	r3, [r7, #11]
    break;
 800b0a0:	e021      	b.n	800b0e6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	7c1b      	ldrb	r3, [r3, #16]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10d      	bne.n	800b0c6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b2:	f107 0208 	add.w	r2, r7, #8
 800b0b6:	4610      	mov	r0, r2
 800b0b8:	4798      	blx	r3
 800b0ba:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	2207      	movs	r2, #7
 800b0c2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b0c4:	e00f      	b.n	800b0e6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f9f2 	bl	800b4b2 <USBD_CtlError>
      err++;
 800b0ce:	7afb      	ldrb	r3, [r7, #11]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	72fb      	strb	r3, [r7, #11]
    break;
 800b0d4:	e007      	b.n	800b0e6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f9ea 	bl	800b4b2 <USBD_CtlError>
    err++;
 800b0de:	7afb      	ldrb	r3, [r7, #11]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	72fb      	strb	r3, [r7, #11]
    break;
 800b0e4:	bf00      	nop
  }

  if (err != 0U)
 800b0e6:	7afb      	ldrb	r3, [r7, #11]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d11e      	bne.n	800b12a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	88db      	ldrh	r3, [r3, #6]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d016      	beq.n	800b122 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800b0f4:	893b      	ldrh	r3, [r7, #8]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00e      	beq.n	800b118 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	88da      	ldrh	r2, [r3, #6]
 800b0fe:	893b      	ldrh	r3, [r7, #8]
 800b100:	4293      	cmp	r3, r2
 800b102:	bf28      	it	cs
 800b104:	4613      	movcs	r3, r2
 800b106:	b29b      	uxth	r3, r3
 800b108:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b10a:	893b      	ldrh	r3, [r7, #8]
 800b10c:	461a      	mov	r2, r3
 800b10e:	68f9      	ldr	r1, [r7, #12]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fa3f 	bl	800b594 <USBD_CtlSendData>
 800b116:	e009      	b.n	800b12c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f9c9 	bl	800b4b2 <USBD_CtlError>
 800b120:	e004      	b.n	800b12c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fa90 	bl	800b648 <USBD_CtlSendStatus>
 800b128:	e000      	b.n	800b12c <USBD_GetDescriptor+0x320>
    return;
 800b12a:	bf00      	nop
    }
  }
}
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop

0800b134 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	889b      	ldrh	r3, [r3, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d130      	bne.n	800b1a8 <USBD_SetAddress+0x74>
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	88db      	ldrh	r3, [r3, #6]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d12c      	bne.n	800b1a8 <USBD_SetAddress+0x74>
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	885b      	ldrh	r3, [r3, #2]
 800b152:	2b7f      	cmp	r3, #127	; 0x7f
 800b154:	d828      	bhi.n	800b1a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	885b      	ldrh	r3, [r3, #2]
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b160:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b168:	2b03      	cmp	r3, #3
 800b16a:	d104      	bne.n	800b176 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f99f 	bl	800b4b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b174:	e01d      	b.n	800b1b2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	7bfa      	ldrb	r2, [r7, #15]
 800b17a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b17e:	7bfb      	ldrb	r3, [r7, #15]
 800b180:	4619      	mov	r1, r3
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fe61 	bl	800be4a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fa5d 	bl	800b648 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b18e:	7bfb      	ldrb	r3, [r7, #15]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d004      	beq.n	800b19e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2202      	movs	r2, #2
 800b198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b19c:	e009      	b.n	800b1b2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1a6:	e004      	b.n	800b1b2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f981 	bl	800b4b2 <USBD_CtlError>
  }
}
 800b1b0:	bf00      	nop
 800b1b2:	bf00      	nop
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
	...

0800b1bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	885b      	ldrh	r3, [r3, #2]
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	4b4b      	ldr	r3, [pc, #300]	; (800b300 <USBD_SetConfig+0x144>)
 800b1d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b1d4:	4b4a      	ldr	r3, [pc, #296]	; (800b300 <USBD_SetConfig+0x144>)
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d905      	bls.n	800b1e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f967 	bl	800b4b2 <USBD_CtlError>
    return USBD_FAIL;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	e087      	b.n	800b2f8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d002      	beq.n	800b1f8 <USBD_SetConfig+0x3c>
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	d025      	beq.n	800b242 <USBD_SetConfig+0x86>
 800b1f6:	e071      	b.n	800b2dc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b1f8:	4b41      	ldr	r3, [pc, #260]	; (800b300 <USBD_SetConfig+0x144>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d01c      	beq.n	800b23a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b200:	4b3f      	ldr	r3, [pc, #252]	; (800b300 <USBD_SetConfig+0x144>)
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	461a      	mov	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b20a:	4b3d      	ldr	r3, [pc, #244]	; (800b300 <USBD_SetConfig+0x144>)
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	4619      	mov	r1, r3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff f9af 	bl	800a574 <USBD_SetClassConfig>
 800b216:	4603      	mov	r3, r0
 800b218:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d004      	beq.n	800b22a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f945 	bl	800b4b2 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b228:	e065      	b.n	800b2f6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fa0c 	bl	800b648 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2203      	movs	r2, #3
 800b234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b238:	e05d      	b.n	800b2f6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fa04 	bl	800b648 <USBD_CtlSendStatus>
    break;
 800b240:	e059      	b.n	800b2f6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b242:	4b2f      	ldr	r3, [pc, #188]	; (800b300 <USBD_SetConfig+0x144>)
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d112      	bne.n	800b270 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2202      	movs	r2, #2
 800b24e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b252:	4b2b      	ldr	r3, [pc, #172]	; (800b300 <USBD_SetConfig+0x144>)
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b25c:	4b28      	ldr	r3, [pc, #160]	; (800b300 <USBD_SetConfig+0x144>)
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	4619      	mov	r1, r3
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7ff f9a2 	bl	800a5ac <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 f9ed 	bl	800b648 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b26e:	e042      	b.n	800b2f6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b270:	4b23      	ldr	r3, [pc, #140]	; (800b300 <USBD_SetConfig+0x144>)
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	461a      	mov	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d02a      	beq.n	800b2d4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	b2db      	uxtb	r3, r3
 800b284:	4619      	mov	r1, r3
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7ff f990 	bl	800a5ac <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b28c:	4b1c      	ldr	r3, [pc, #112]	; (800b300 <USBD_SetConfig+0x144>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	461a      	mov	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b296:	4b1a      	ldr	r3, [pc, #104]	; (800b300 <USBD_SetConfig+0x144>)
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	4619      	mov	r1, r3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f7ff f969 	bl	800a574 <USBD_SetClassConfig>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b2a6:	7bfb      	ldrb	r3, [r7, #15]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00f      	beq.n	800b2cc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b2ac:	6839      	ldr	r1, [r7, #0]
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f8ff 	bl	800b4b2 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff f975 	bl	800a5ac <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b2ca:	e014      	b.n	800b2f6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f9bb 	bl	800b648 <USBD_CtlSendStatus>
    break;
 800b2d2:	e010      	b.n	800b2f6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 f9b7 	bl	800b648 <USBD_CtlSendStatus>
    break;
 800b2da:	e00c      	b.n	800b2f6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b2dc:	6839      	ldr	r1, [r7, #0]
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f8e7 	bl	800b4b2 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b2e4:	4b06      	ldr	r3, [pc, #24]	; (800b300 <USBD_SetConfig+0x144>)
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7ff f95e 	bl	800a5ac <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f4:	bf00      	nop
  }

  return ret;
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	2001d68c 	.word	0x2001d68c

0800b304 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	88db      	ldrh	r3, [r3, #6]
 800b312:	2b01      	cmp	r3, #1
 800b314:	d004      	beq.n	800b320 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f8ca 	bl	800b4b2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b31e:	e022      	b.n	800b366 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b326:	2b02      	cmp	r3, #2
 800b328:	dc02      	bgt.n	800b330 <USBD_GetConfig+0x2c>
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	dc03      	bgt.n	800b336 <USBD_GetConfig+0x32>
 800b32e:	e015      	b.n	800b35c <USBD_GetConfig+0x58>
 800b330:	2b03      	cmp	r3, #3
 800b332:	d00b      	beq.n	800b34c <USBD_GetConfig+0x48>
 800b334:	e012      	b.n	800b35c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	3308      	adds	r3, #8
 800b340:	2201      	movs	r2, #1
 800b342:	4619      	mov	r1, r3
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 f925 	bl	800b594 <USBD_CtlSendData>
      break;
 800b34a:	e00c      	b.n	800b366 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	3304      	adds	r3, #4
 800b350:	2201      	movs	r2, #1
 800b352:	4619      	mov	r1, r3
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 f91d 	bl	800b594 <USBD_CtlSendData>
      break;
 800b35a:	e004      	b.n	800b366 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800b35c:	6839      	ldr	r1, [r7, #0]
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f8a7 	bl	800b4b2 <USBD_CtlError>
      break;
 800b364:	bf00      	nop
}
 800b366:	bf00      	nop
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b082      	sub	sp, #8
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b37e:	3b01      	subs	r3, #1
 800b380:	2b02      	cmp	r3, #2
 800b382:	d81e      	bhi.n	800b3c2 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	88db      	ldrh	r3, [r3, #6]
 800b388:	2b02      	cmp	r3, #2
 800b38a:	d004      	beq.n	800b396 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b38c:	6839      	ldr	r1, [r7, #0]
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 f88f 	bl	800b4b2 <USBD_CtlError>
      break;
 800b394:	e01a      	b.n	800b3cc <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d005      	beq.n	800b3b2 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	f043 0202 	orr.w	r2, r3, #2
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	330c      	adds	r3, #12
 800b3b6:	2202      	movs	r2, #2
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f8ea 	bl	800b594 <USBD_CtlSendData>
    break;
 800b3c0:	e004      	b.n	800b3cc <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b3c2:	6839      	ldr	r1, [r7, #0]
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 f874 	bl	800b4b2 <USBD_CtlError>
    break;
 800b3ca:	bf00      	nop
  }
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	885b      	ldrh	r3, [r3, #2]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d106      	bne.n	800b3f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f92a 	bl	800b648 <USBD_CtlSendStatus>
  }
}
 800b3f4:	bf00      	nop
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b40c:	3b01      	subs	r3, #1
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d80b      	bhi.n	800b42a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	885b      	ldrh	r3, [r3, #2]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d10c      	bne.n	800b434 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 f910 	bl	800b648 <USBD_CtlSendStatus>
      }
      break;
 800b428:	e004      	b.n	800b434 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 f840 	bl	800b4b2 <USBD_CtlError>
      break;
 800b432:	e000      	b.n	800b436 <USBD_ClrFeature+0x3a>
      break;
 800b434:	bf00      	nop
  }
}
 800b436:	bf00      	nop
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b084      	sub	sp, #16
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	781a      	ldrb	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	3301      	adds	r3, #1
 800b458:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	781a      	ldrb	r2, [r3, #0]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3301      	adds	r3, #1
 800b466:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f7ff fa9b 	bl	800a9a4 <SWAPBYTE>
 800b46e:	4603      	mov	r3, r0
 800b470:	461a      	mov	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3301      	adds	r3, #1
 800b47a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	3301      	adds	r3, #1
 800b480:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f7ff fa8e 	bl	800a9a4 <SWAPBYTE>
 800b488:	4603      	mov	r3, r0
 800b48a:	461a      	mov	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3301      	adds	r3, #1
 800b494:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3301      	adds	r3, #1
 800b49a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f7ff fa81 	bl	800a9a4 <SWAPBYTE>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	80da      	strh	r2, [r3, #6]
}
 800b4aa:	bf00      	nop
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b082      	sub	sp, #8
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4bc:	2180      	movs	r1, #128	; 0x80
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fc58 	bl	800bd74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fc54 	bl	800bd74 <USBD_LL_StallEP>
}
 800b4cc:	bf00      	nop
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d036      	beq.n	800b558 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b4ee:	6938      	ldr	r0, [r7, #16]
 800b4f0:	f000 f836 	bl	800b560 <USBD_GetLen>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	005b      	lsls	r3, r3, #1
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b502:	7dfb      	ldrb	r3, [r7, #23]
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	4413      	add	r3, r2
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	7812      	ldrb	r2, [r2, #0]
 800b50c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	3301      	adds	r3, #1
 800b512:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b514:	7dfb      	ldrb	r3, [r7, #23]
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	4413      	add	r3, r2
 800b51a:	2203      	movs	r2, #3
 800b51c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b51e:	7dfb      	ldrb	r3, [r7, #23]
 800b520:	3301      	adds	r3, #1
 800b522:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b524:	e013      	b.n	800b54e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b526:	7dfb      	ldrb	r3, [r7, #23]
 800b528:	68ba      	ldr	r2, [r7, #8]
 800b52a:	4413      	add	r3, r2
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	7812      	ldrb	r2, [r2, #0]
 800b530:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	3301      	adds	r3, #1
 800b536:	613b      	str	r3, [r7, #16]
    idx++;
 800b538:	7dfb      	ldrb	r3, [r7, #23]
 800b53a:	3301      	adds	r3, #1
 800b53c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b53e:	7dfb      	ldrb	r3, [r7, #23]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	4413      	add	r3, r2
 800b544:	2200      	movs	r2, #0
 800b546:	701a      	strb	r2, [r3, #0]
    idx++;
 800b548:	7dfb      	ldrb	r3, [r7, #23]
 800b54a:	3301      	adds	r3, #1
 800b54c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1e7      	bne.n	800b526 <USBD_GetString+0x52>
 800b556:	e000      	b.n	800b55a <USBD_GetString+0x86>
    return;
 800b558:	bf00      	nop
  }
}
 800b55a:	3718      	adds	r7, #24
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b568:	2300      	movs	r3, #0
 800b56a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b570:	e005      	b.n	800b57e <USBD_GetLen+0x1e>
  {
    len++;
 800b572:	7bfb      	ldrb	r3, [r7, #15]
 800b574:	3301      	adds	r3, #1
 800b576:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	3301      	adds	r3, #1
 800b57c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1f5      	bne.n	800b572 <USBD_GetLen+0x12>
  }

  return len;
 800b586:	7bfb      	ldrb	r3, [r7, #15]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	68ba      	ldr	r2, [r7, #8]
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f000 fc64 	bl	800be88 <USBD_LL_Transmit>

  return USBD_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b084      	sub	sp, #16
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	60f8      	str	r0, [r7, #12]
 800b5d2:	60b9      	str	r1, [r7, #8]
 800b5d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	2100      	movs	r1, #0
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f000 fc53 	bl	800be88 <USBD_LL_Transmit>

  return USBD_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2203      	movs	r2, #3
 800b5fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	68ba      	ldr	r2, [r7, #8]
 800b614:	2100      	movs	r1, #0
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f000 fc57 	bl	800beca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b084      	sub	sp, #16
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	60f8      	str	r0, [r7, #12]
 800b62e:	60b9      	str	r1, [r7, #8]
 800b630:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	2100      	movs	r1, #0
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f000 fc46 	bl	800beca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2204      	movs	r2, #4
 800b654:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b658:	2300      	movs	r3, #0
 800b65a:	2200      	movs	r2, #0
 800b65c:	2100      	movs	r1, #0
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fc12 	bl	800be88 <USBD_LL_Transmit>

  return USBD_OK;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b082      	sub	sp, #8
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2205      	movs	r2, #5
 800b67a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b67e:	2300      	movs	r3, #0
 800b680:	2200      	movs	r2, #0
 800b682:	2100      	movs	r1, #0
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fc20 	bl	800beca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b698:	2200      	movs	r2, #0
 800b69a:	4912      	ldr	r1, [pc, #72]	; (800b6e4 <MX_USB_Device_Init+0x50>)
 800b69c:	4812      	ldr	r0, [pc, #72]	; (800b6e8 <MX_USB_Device_Init+0x54>)
 800b69e:	f7fe fefb 	bl	800a498 <USBD_Init>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b6a8:	f7f5 fea4 	bl	80013f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b6ac:	490f      	ldr	r1, [pc, #60]	; (800b6ec <MX_USB_Device_Init+0x58>)
 800b6ae:	480e      	ldr	r0, [pc, #56]	; (800b6e8 <MX_USB_Device_Init+0x54>)
 800b6b0:	f7fe ff22 	bl	800a4f8 <USBD_RegisterClass>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d001      	beq.n	800b6be <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b6ba:	f7f5 fe9b 	bl	80013f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b6be:	490c      	ldr	r1, [pc, #48]	; (800b6f0 <MX_USB_Device_Init+0x5c>)
 800b6c0:	4809      	ldr	r0, [pc, #36]	; (800b6e8 <MX_USB_Device_Init+0x54>)
 800b6c2:	f7fe fe7d 	bl	800a3c0 <USBD_CDC_RegisterInterface>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b6cc:	f7f5 fe92 	bl	80013f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b6d0:	4805      	ldr	r0, [pc, #20]	; (800b6e8 <MX_USB_Device_Init+0x54>)
 800b6d2:	f7fe ff38 	bl	800a546 <USBD_Start>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b6dc:	f7f5 fe8a 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b6e0:	bf00      	nop
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	20000150 	.word	0x20000150
 800b6e8:	2001dfd0 	.word	0x2001dfd0
 800b6ec:	20000038 	.word	0x20000038
 800b6f0:	2000013c 	.word	0x2000013c

0800b6f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	4905      	ldr	r1, [pc, #20]	; (800b710 <CDC_Init_FS+0x1c>)
 800b6fc:	4805      	ldr	r0, [pc, #20]	; (800b714 <CDC_Init_FS+0x20>)
 800b6fe:	f7fe fe74 	bl	800a3ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b702:	4905      	ldr	r1, [pc, #20]	; (800b718 <CDC_Init_FS+0x24>)
 800b704:	4803      	ldr	r0, [pc, #12]	; (800b714 <CDC_Init_FS+0x20>)
 800b706:	f7fe fe89 	bl	800a41c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b70a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	2001eaa0 	.word	0x2001eaa0
 800b714:	2001dfd0 	.word	0x2001dfd0
 800b718:	2001e2a0 	.word	0x2001e2a0

0800b71c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b71c:	b480      	push	{r7}
 800b71e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b720:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b722:	4618      	mov	r0, r3
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	4603      	mov	r3, r0
 800b734:	6039      	str	r1, [r7, #0]
 800b736:	71fb      	strb	r3, [r7, #7]
 800b738:	4613      	mov	r3, r2
 800b73a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b73c:	79fb      	ldrb	r3, [r7, #7]
 800b73e:	2b23      	cmp	r3, #35	; 0x23
 800b740:	d84a      	bhi.n	800b7d8 <CDC_Control_FS+0xac>
 800b742:	a201      	add	r2, pc, #4	; (adr r2, 800b748 <CDC_Control_FS+0x1c>)
 800b744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b748:	0800b7d9 	.word	0x0800b7d9
 800b74c:	0800b7d9 	.word	0x0800b7d9
 800b750:	0800b7d9 	.word	0x0800b7d9
 800b754:	0800b7d9 	.word	0x0800b7d9
 800b758:	0800b7d9 	.word	0x0800b7d9
 800b75c:	0800b7d9 	.word	0x0800b7d9
 800b760:	0800b7d9 	.word	0x0800b7d9
 800b764:	0800b7d9 	.word	0x0800b7d9
 800b768:	0800b7d9 	.word	0x0800b7d9
 800b76c:	0800b7d9 	.word	0x0800b7d9
 800b770:	0800b7d9 	.word	0x0800b7d9
 800b774:	0800b7d9 	.word	0x0800b7d9
 800b778:	0800b7d9 	.word	0x0800b7d9
 800b77c:	0800b7d9 	.word	0x0800b7d9
 800b780:	0800b7d9 	.word	0x0800b7d9
 800b784:	0800b7d9 	.word	0x0800b7d9
 800b788:	0800b7d9 	.word	0x0800b7d9
 800b78c:	0800b7d9 	.word	0x0800b7d9
 800b790:	0800b7d9 	.word	0x0800b7d9
 800b794:	0800b7d9 	.word	0x0800b7d9
 800b798:	0800b7d9 	.word	0x0800b7d9
 800b79c:	0800b7d9 	.word	0x0800b7d9
 800b7a0:	0800b7d9 	.word	0x0800b7d9
 800b7a4:	0800b7d9 	.word	0x0800b7d9
 800b7a8:	0800b7d9 	.word	0x0800b7d9
 800b7ac:	0800b7d9 	.word	0x0800b7d9
 800b7b0:	0800b7d9 	.word	0x0800b7d9
 800b7b4:	0800b7d9 	.word	0x0800b7d9
 800b7b8:	0800b7d9 	.word	0x0800b7d9
 800b7bc:	0800b7d9 	.word	0x0800b7d9
 800b7c0:	0800b7d9 	.word	0x0800b7d9
 800b7c4:	0800b7d9 	.word	0x0800b7d9
 800b7c8:	0800b7d9 	.word	0x0800b7d9
 800b7cc:	0800b7d9 	.word	0x0800b7d9
 800b7d0:	0800b7d9 	.word	0x0800b7d9
 800b7d4:	0800b7d9 	.word	0x0800b7d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b7d8:	bf00      	nop
  }

  return (USBD_OK);
 800b7da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	4805      	ldr	r0, [pc, #20]	; (800b80c <CDC_Receive_FS+0x24>)
 800b7f6:	f7fe fe11 	bl	800a41c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b7fa:	4804      	ldr	r0, [pc, #16]	; (800b80c <CDC_Receive_FS+0x24>)
 800b7fc:	f7fe fe22 	bl	800a444 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b800:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b802:	4618      	mov	r0, r3
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	2001dfd0 	.word	0x2001dfd0

0800b810 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b810:	b480      	push	{r7}
 800b812:	b087      	sub	sp, #28
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	4613      	mov	r3, r2
 800b81c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b822:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b826:	4618      	mov	r0, r3
 800b828:	371c      	adds	r7, #28
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
	...

0800b834 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	4603      	mov	r3, r0
 800b83c:	6039      	str	r1, [r7, #0]
 800b83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	2212      	movs	r2, #18
 800b844:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b846:	4b03      	ldr	r3, [pc, #12]	; (800b854 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b848:	4618      	mov	r0, r3
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr
 800b854:	20000170 	.word	0x20000170

0800b858 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	4603      	mov	r3, r0
 800b860:	6039      	str	r1, [r7, #0]
 800b862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	2204      	movs	r2, #4
 800b868:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b86a:	4b03      	ldr	r3, [pc, #12]	; (800b878 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	20000184 	.word	0x20000184

0800b87c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	4603      	mov	r3, r0
 800b884:	6039      	str	r1, [r7, #0]
 800b886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b888:	79fb      	ldrb	r3, [r7, #7]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d105      	bne.n	800b89a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b88e:	683a      	ldr	r2, [r7, #0]
 800b890:	4907      	ldr	r1, [pc, #28]	; (800b8b0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b892:	4808      	ldr	r0, [pc, #32]	; (800b8b4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b894:	f7ff fe1e 	bl	800b4d4 <USBD_GetString>
 800b898:	e004      	b.n	800b8a4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	4904      	ldr	r1, [pc, #16]	; (800b8b0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b89e:	4805      	ldr	r0, [pc, #20]	; (800b8b4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b8a0:	f7ff fe18 	bl	800b4d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8a4:	4b02      	ldr	r3, [pc, #8]	; (800b8b0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	2001f2a0 	.word	0x2001f2a0
 800b8b4:	0800c194 	.word	0x0800c194

0800b8b8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	4603      	mov	r3, r0
 800b8c0:	6039      	str	r1, [r7, #0]
 800b8c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b8c4:	683a      	ldr	r2, [r7, #0]
 800b8c6:	4904      	ldr	r1, [pc, #16]	; (800b8d8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b8c8:	4804      	ldr	r0, [pc, #16]	; (800b8dc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b8ca:	f7ff fe03 	bl	800b4d4 <USBD_GetString>
  return USBD_StrDesc;
 800b8ce:	4b02      	ldr	r3, [pc, #8]	; (800b8d8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	2001f2a0 	.word	0x2001f2a0
 800b8dc:	0800c1ac 	.word	0x0800c1ac

0800b8e0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	6039      	str	r1, [r7, #0]
 800b8ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	221a      	movs	r2, #26
 800b8f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b8f2:	f000 f843 	bl	800b97c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b8f6:	4b02      	ldr	r3, [pc, #8]	; (800b900 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	20000188 	.word	0x20000188

0800b904 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	4603      	mov	r3, r0
 800b90c:	6039      	str	r1, [r7, #0]
 800b90e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b910:	79fb      	ldrb	r3, [r7, #7]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d105      	bne.n	800b922 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b916:	683a      	ldr	r2, [r7, #0]
 800b918:	4907      	ldr	r1, [pc, #28]	; (800b938 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b91a:	4808      	ldr	r0, [pc, #32]	; (800b93c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b91c:	f7ff fdda 	bl	800b4d4 <USBD_GetString>
 800b920:	e004      	b.n	800b92c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	4904      	ldr	r1, [pc, #16]	; (800b938 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b926:	4805      	ldr	r0, [pc, #20]	; (800b93c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b928:	f7ff fdd4 	bl	800b4d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b92c:	4b02      	ldr	r3, [pc, #8]	; (800b938 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3708      	adds	r7, #8
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	2001f2a0 	.word	0x2001f2a0
 800b93c:	0800c1c0 	.word	0x0800c1c0

0800b940 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	4603      	mov	r3, r0
 800b948:	6039      	str	r1, [r7, #0]
 800b94a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b94c:	79fb      	ldrb	r3, [r7, #7]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d105      	bne.n	800b95e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	4907      	ldr	r1, [pc, #28]	; (800b974 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b956:	4808      	ldr	r0, [pc, #32]	; (800b978 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b958:	f7ff fdbc 	bl	800b4d4 <USBD_GetString>
 800b95c:	e004      	b.n	800b968 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b95e:	683a      	ldr	r2, [r7, #0]
 800b960:	4904      	ldr	r1, [pc, #16]	; (800b974 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b962:	4805      	ldr	r0, [pc, #20]	; (800b978 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b964:	f7ff fdb6 	bl	800b4d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b968:	4b02      	ldr	r3, [pc, #8]	; (800b974 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3708      	adds	r7, #8
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	2001f2a0 	.word	0x2001f2a0
 800b978:	0800c1cc 	.word	0x0800c1cc

0800b97c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b982:	4b0f      	ldr	r3, [pc, #60]	; (800b9c0 <Get_SerialNum+0x44>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b988:	4b0e      	ldr	r3, [pc, #56]	; (800b9c4 <Get_SerialNum+0x48>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b98e:	4b0e      	ldr	r3, [pc, #56]	; (800b9c8 <Get_SerialNum+0x4c>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4413      	add	r3, r2
 800b99a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d009      	beq.n	800b9b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b9a2:	2208      	movs	r2, #8
 800b9a4:	4909      	ldr	r1, [pc, #36]	; (800b9cc <Get_SerialNum+0x50>)
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f000 f814 	bl	800b9d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b9ac:	2204      	movs	r2, #4
 800b9ae:	4908      	ldr	r1, [pc, #32]	; (800b9d0 <Get_SerialNum+0x54>)
 800b9b0:	68b8      	ldr	r0, [r7, #8]
 800b9b2:	f000 f80f 	bl	800b9d4 <IntToUnicode>
  }
}
 800b9b6:	bf00      	nop
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	1fff7590 	.word	0x1fff7590
 800b9c4:	1fff7594 	.word	0x1fff7594
 800b9c8:	1fff7598 	.word	0x1fff7598
 800b9cc:	2000018a 	.word	0x2000018a
 800b9d0:	2000019a 	.word	0x2000019a

0800b9d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b087      	sub	sp, #28
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	4613      	mov	r3, r2
 800b9e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	75fb      	strb	r3, [r7, #23]
 800b9ea:	e027      	b.n	800ba3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	0f1b      	lsrs	r3, r3, #28
 800b9f0:	2b09      	cmp	r3, #9
 800b9f2:	d80b      	bhi.n	800ba0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	0f1b      	lsrs	r3, r3, #28
 800b9f8:	b2da      	uxtb	r2, r3
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	4619      	mov	r1, r3
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	440b      	add	r3, r1
 800ba04:	3230      	adds	r2, #48	; 0x30
 800ba06:	b2d2      	uxtb	r2, r2
 800ba08:	701a      	strb	r2, [r3, #0]
 800ba0a:	e00a      	b.n	800ba22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	0f1b      	lsrs	r3, r3, #28
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	7dfb      	ldrb	r3, [r7, #23]
 800ba14:	005b      	lsls	r3, r3, #1
 800ba16:	4619      	mov	r1, r3
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	440b      	add	r3, r1
 800ba1c:	3237      	adds	r2, #55	; 0x37
 800ba1e:	b2d2      	uxtb	r2, r2
 800ba20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	011b      	lsls	r3, r3, #4
 800ba26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba28:	7dfb      	ldrb	r3, [r7, #23]
 800ba2a:	005b      	lsls	r3, r3, #1
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	4413      	add	r3, r2
 800ba32:	2200      	movs	r2, #0
 800ba34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba36:	7dfb      	ldrb	r3, [r7, #23]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	75fb      	strb	r3, [r7, #23]
 800ba3c:	7dfa      	ldrb	r2, [r7, #23]
 800ba3e:	79fb      	ldrb	r3, [r7, #7]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d3d3      	bcc.n	800b9ec <IntToUnicode+0x18>
  }
}
 800ba44:	bf00      	nop
 800ba46:	bf00      	nop
 800ba48:	371c      	adds	r7, #28
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
	...

0800ba54 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a0d      	ldr	r2, [pc, #52]	; (800ba98 <HAL_PCD_MspInit+0x44>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d113      	bne.n	800ba8e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ba66:	4b0d      	ldr	r3, [pc, #52]	; (800ba9c <HAL_PCD_MspInit+0x48>)
 800ba68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba6a:	4a0c      	ldr	r2, [pc, #48]	; (800ba9c <HAL_PCD_MspInit+0x48>)
 800ba6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ba70:	6593      	str	r3, [r2, #88]	; 0x58
 800ba72:	4b0a      	ldr	r3, [pc, #40]	; (800ba9c <HAL_PCD_MspInit+0x48>)
 800ba74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ba7e:	2200      	movs	r2, #0
 800ba80:	2100      	movs	r1, #0
 800ba82:	2014      	movs	r0, #20
 800ba84:	f7f8 f843 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ba88:	2014      	movs	r0, #20
 800ba8a:	f7f8 f85a 	bl	8003b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ba8e:	bf00      	nop
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	40005c00 	.word	0x40005c00
 800ba9c:	40021000 	.word	0x40021000

0800baa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bab4:	4619      	mov	r1, r3
 800bab6:	4610      	mov	r0, r2
 800bab8:	f7fe fd90 	bl	800a5dc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800babc:	bf00      	nop
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	460b      	mov	r3, r1
 800bace:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800bad6:	78fa      	ldrb	r2, [r7, #3]
 800bad8:	6879      	ldr	r1, [r7, #4]
 800bada:	4613      	mov	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	4413      	add	r3, r2
 800bae0:	00db      	lsls	r3, r3, #3
 800bae2:	440b      	add	r3, r1
 800bae4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	78fb      	ldrb	r3, [r7, #3]
 800baec:	4619      	mov	r1, r3
 800baee:	f7fe fdca 	bl	800a686 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800baf2:	bf00      	nop
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b082      	sub	sp, #8
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	460b      	mov	r3, r1
 800bb04:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800bb0c:	78fa      	ldrb	r2, [r7, #3]
 800bb0e:	6879      	ldr	r1, [r7, #4]
 800bb10:	4613      	mov	r3, r2
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	00db      	lsls	r3, r3, #3
 800bb18:	440b      	add	r3, r1
 800bb1a:	333c      	adds	r3, #60	; 0x3c
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	78fb      	ldrb	r3, [r7, #3]
 800bb20:	4619      	mov	r1, r3
 800bb22:	f7fe fe13 	bl	800a74c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bb26:	bf00      	nop
 800bb28:	3708      	adds	r7, #8
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b082      	sub	sp, #8
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7fe ff17 	bl	800a970 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bb42:	bf00      	nop
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b084      	sub	sp, #16
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb52:	2301      	movs	r3, #1
 800bb54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d001      	beq.n	800bb62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bb5e:	f7f5 fc49 	bl	80013f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bb68:	7bfa      	ldrb	r2, [r7, #15]
 800bb6a:	4611      	mov	r1, r2
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7fe fec4 	bl	800a8fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7fe fe7d 	bl	800a878 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bb7e:	bf00      	nop
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
	...

0800bb88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fe febf 	bl	800a91a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	699b      	ldr	r3, [r3, #24]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d005      	beq.n	800bbb0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bba4:	4b04      	ldr	r3, [pc, #16]	; (800bbb8 <HAL_PCD_SuspendCallback+0x30>)
 800bba6:	691b      	ldr	r3, [r3, #16]
 800bba8:	4a03      	ldr	r2, [pc, #12]	; (800bbb8 <HAL_PCD_SuspendCallback+0x30>)
 800bbaa:	f043 0306 	orr.w	r3, r3, #6
 800bbae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bbb0:	bf00      	nop
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	e000ed00 	.word	0xe000ed00

0800bbbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d007      	beq.n	800bbdc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbcc:	4b08      	ldr	r3, [pc, #32]	; (800bbf0 <HAL_PCD_ResumeCallback+0x34>)
 800bbce:	691b      	ldr	r3, [r3, #16]
 800bbd0:	4a07      	ldr	r2, [pc, #28]	; (800bbf0 <HAL_PCD_ResumeCallback+0x34>)
 800bbd2:	f023 0306 	bic.w	r3, r3, #6
 800bbd6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bbd8:	f000 f9fa 	bl	800bfd0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe feae 	bl	800a944 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bbe8:	bf00      	nop
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	e000ed00 	.word	0xe000ed00

0800bbf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bbfc:	4a2b      	ldr	r2, [pc, #172]	; (800bcac <USBD_LL_Init+0xb8>)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a29      	ldr	r2, [pc, #164]	; (800bcac <USBD_LL_Init+0xb8>)
 800bc08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bc0c:	4b27      	ldr	r3, [pc, #156]	; (800bcac <USBD_LL_Init+0xb8>)
 800bc0e:	4a28      	ldr	r2, [pc, #160]	; (800bcb0 <USBD_LL_Init+0xbc>)
 800bc10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bc12:	4b26      	ldr	r3, [pc, #152]	; (800bcac <USBD_LL_Init+0xb8>)
 800bc14:	2208      	movs	r2, #8
 800bc16:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bc18:	4b24      	ldr	r3, [pc, #144]	; (800bcac <USBD_LL_Init+0xb8>)
 800bc1a:	2202      	movs	r2, #2
 800bc1c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc1e:	4b23      	ldr	r3, [pc, #140]	; (800bcac <USBD_LL_Init+0xb8>)
 800bc20:	2202      	movs	r2, #2
 800bc22:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bc24:	4b21      	ldr	r3, [pc, #132]	; (800bcac <USBD_LL_Init+0xb8>)
 800bc26:	2200      	movs	r2, #0
 800bc28:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bc2a:	4b20      	ldr	r3, [pc, #128]	; (800bcac <USBD_LL_Init+0xb8>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bc30:	4b1e      	ldr	r3, [pc, #120]	; (800bcac <USBD_LL_Init+0xb8>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bc36:	4b1d      	ldr	r3, [pc, #116]	; (800bcac <USBD_LL_Init+0xb8>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bc3c:	481b      	ldr	r0, [pc, #108]	; (800bcac <USBD_LL_Init+0xb8>)
 800bc3e:	f7f8 fe56 	bl	80048ee <HAL_PCD_Init>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d001      	beq.n	800bc4c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bc48:	f7f5 fbd4 	bl	80013f4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc52:	2318      	movs	r3, #24
 800bc54:	2200      	movs	r2, #0
 800bc56:	2100      	movs	r1, #0
 800bc58:	f7fa f952 	bl	8005f00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc62:	2358      	movs	r3, #88	; 0x58
 800bc64:	2200      	movs	r2, #0
 800bc66:	2180      	movs	r1, #128	; 0x80
 800bc68:	f7fa f94a 	bl	8005f00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc72:	23c0      	movs	r3, #192	; 0xc0
 800bc74:	2200      	movs	r2, #0
 800bc76:	2181      	movs	r1, #129	; 0x81
 800bc78:	f7fa f942 	bl	8005f00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc82:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bc86:	2200      	movs	r2, #0
 800bc88:	2101      	movs	r1, #1
 800bc8a:	f7fa f939 	bl	8005f00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc98:	2200      	movs	r2, #0
 800bc9a:	2182      	movs	r1, #130	; 0x82
 800bc9c:	f7fa f930 	bl	8005f00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	2001f3a0 	.word	0x2001f3a0
 800bcb0:	40005c00 	.word	0x40005c00

0800bcb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7f8 fef4 	bl	8004ab8 <HAL_PCD_Start>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f000 f980 	bl	800bfdc <USBD_Get_USB_Status>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bce0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3710      	adds	r7, #16
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b084      	sub	sp, #16
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
 800bcf2:	4608      	mov	r0, r1
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	70fb      	strb	r3, [r7, #3]
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	70bb      	strb	r3, [r7, #2]
 800bd00:	4613      	mov	r3, r2
 800bd02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd12:	78bb      	ldrb	r3, [r7, #2]
 800bd14:	883a      	ldrh	r2, [r7, #0]
 800bd16:	78f9      	ldrb	r1, [r7, #3]
 800bd18:	f7f9 f863 	bl	8004de2 <HAL_PCD_EP_Open>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd20:	7bfb      	ldrb	r3, [r7, #15]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f000 f95a 	bl	800bfdc <USBD_Get_USB_Status>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b084      	sub	sp, #16
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
 800bd3e:	460b      	mov	r3, r1
 800bd40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd42:	2300      	movs	r3, #0
 800bd44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd50:	78fa      	ldrb	r2, [r7, #3]
 800bd52:	4611      	mov	r1, r2
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7f9 f8aa 	bl	8004eae <HAL_PCD_EP_Close>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd5e:	7bfb      	ldrb	r3, [r7, #15]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f000 f93b 	bl	800bfdc <USBD_Get_USB_Status>
 800bd66:	4603      	mov	r3, r0
 800bd68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd84:	2300      	movs	r3, #0
 800bd86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd8e:	78fa      	ldrb	r2, [r7, #3]
 800bd90:	4611      	mov	r1, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7f9 f96b 	bl	800506e <HAL_PCD_EP_SetStall>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 f91c 	bl	800bfdc <USBD_Get_USB_Status>
 800bda4:	4603      	mov	r3, r0
 800bda6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bda8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b084      	sub	sp, #16
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bdcc:	78fa      	ldrb	r2, [r7, #3]
 800bdce:	4611      	mov	r1, r2
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7f9 f9ac 	bl	800512e <HAL_PCD_EP_ClrStall>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 f8fd 	bl	800bfdc <USBD_Get_USB_Status>
 800bde2:	4603      	mov	r3, r0
 800bde4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bde6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	da0c      	bge.n	800be26 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be0c:	78fb      	ldrb	r3, [r7, #3]
 800be0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be12:	68f9      	ldr	r1, [r7, #12]
 800be14:	1c5a      	adds	r2, r3, #1
 800be16:	4613      	mov	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	4413      	add	r3, r2
 800be1c:	00db      	lsls	r3, r3, #3
 800be1e:	440b      	add	r3, r1
 800be20:	3302      	adds	r3, #2
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	e00b      	b.n	800be3e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be26:	78fb      	ldrb	r3, [r7, #3]
 800be28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be2c:	68f9      	ldr	r1, [r7, #12]
 800be2e:	4613      	mov	r3, r2
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	4413      	add	r3, r2
 800be34:	00db      	lsls	r3, r3, #3
 800be36:	440b      	add	r3, r1
 800be38:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800be3c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3714      	adds	r7, #20
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b084      	sub	sp, #16
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	460b      	mov	r3, r1
 800be54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be64:	78fa      	ldrb	r2, [r7, #3]
 800be66:	4611      	mov	r1, r2
 800be68:	4618      	mov	r0, r3
 800be6a:	f7f8 ff95 	bl	8004d98 <HAL_PCD_SetAddress>
 800be6e:	4603      	mov	r3, r0
 800be70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be72:	7bfb      	ldrb	r3, [r7, #15]
 800be74:	4618      	mov	r0, r3
 800be76:	f000 f8b1 	bl	800bfdc <USBD_Get_USB_Status>
 800be7a:	4603      	mov	r3, r0
 800be7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	607a      	str	r2, [r7, #4]
 800be92:	603b      	str	r3, [r7, #0]
 800be94:	460b      	mov	r3, r1
 800be96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be98:	2300      	movs	r3, #0
 800be9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be9c:	2300      	movs	r3, #0
 800be9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bea6:	7af9      	ldrb	r1, [r7, #11]
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	f7f9 f89c 	bl	8004fe8 <HAL_PCD_EP_Transmit>
 800beb0:	4603      	mov	r3, r0
 800beb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beb4:	7dfb      	ldrb	r3, [r7, #23]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f000 f890 	bl	800bfdc <USBD_Get_USB_Status>
 800bebc:	4603      	mov	r3, r0
 800bebe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bec0:	7dbb      	ldrb	r3, [r7, #22]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3718      	adds	r7, #24
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b086      	sub	sp, #24
 800bece:	af00      	add	r7, sp, #0
 800bed0:	60f8      	str	r0, [r7, #12]
 800bed2:	607a      	str	r2, [r7, #4]
 800bed4:	603b      	str	r3, [r7, #0]
 800bed6:	460b      	mov	r3, r1
 800bed8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beda:	2300      	movs	r3, #0
 800bedc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bede:	2300      	movs	r3, #0
 800bee0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bee8:	7af9      	ldrb	r1, [r7, #11]
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	f7f9 f826 	bl	8004f3e <HAL_PCD_EP_Receive>
 800bef2:	4603      	mov	r3, r0
 800bef4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 f86f 	bl	800bfdc <USBD_Get_USB_Status>
 800befe:	4603      	mov	r3, r0
 800bf00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf02:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3718      	adds	r7, #24
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	460b      	mov	r3, r1
 800bf16:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf1e:	78fa      	ldrb	r2, [r7, #3]
 800bf20:	4611      	mov	r1, r2
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7f9 f848 	bl	8004fb8 <HAL_PCD_EP_GetRxCount>
 800bf28:	4603      	mov	r3, r0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
	...

0800bf34 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bf40:	78fb      	ldrb	r3, [r7, #3]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d002      	beq.n	800bf4c <HAL_PCDEx_LPM_Callback+0x18>
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d013      	beq.n	800bf72 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bf4a:	e023      	b.n	800bf94 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d007      	beq.n	800bf64 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bf54:	f000 f83c 	bl	800bfd0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf58:	4b10      	ldr	r3, [pc, #64]	; (800bf9c <HAL_PCDEx_LPM_Callback+0x68>)
 800bf5a:	691b      	ldr	r3, [r3, #16]
 800bf5c:	4a0f      	ldr	r2, [pc, #60]	; (800bf9c <HAL_PCDEx_LPM_Callback+0x68>)
 800bf5e:	f023 0306 	bic.w	r3, r3, #6
 800bf62:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fe fcea 	bl	800a944 <USBD_LL_Resume>
    break;
 800bf70:	e010      	b.n	800bf94 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fe fcce 	bl	800a91a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	699b      	ldr	r3, [r3, #24]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d005      	beq.n	800bf92 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf86:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <HAL_PCDEx_LPM_Callback+0x68>)
 800bf88:	691b      	ldr	r3, [r3, #16]
 800bf8a:	4a04      	ldr	r2, [pc, #16]	; (800bf9c <HAL_PCDEx_LPM_Callback+0x68>)
 800bf8c:	f043 0306 	orr.w	r3, r3, #6
 800bf90:	6113      	str	r3, [r2, #16]
    break;
 800bf92:	bf00      	nop
}
 800bf94:	bf00      	nop
 800bf96:	3708      	adds	r7, #8
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	e000ed00 	.word	0xe000ed00

0800bfa0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bfa8:	4b03      	ldr	r3, [pc, #12]	; (800bfb8 <USBD_static_malloc+0x18>)
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	370c      	adds	r7, #12
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	2001d690 	.word	0x2001d690

0800bfbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]

}
 800bfc4:	bf00      	nop
 800bfc6:	370c      	adds	r7, #12
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr

0800bfd0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bfd4:	f7f4 fddc 	bl	8000b90 <SystemClock_Config>
}
 800bfd8:	bf00      	nop
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bfea:	79fb      	ldrb	r3, [r7, #7]
 800bfec:	2b03      	cmp	r3, #3
 800bfee:	d817      	bhi.n	800c020 <USBD_Get_USB_Status+0x44>
 800bff0:	a201      	add	r2, pc, #4	; (adr r2, 800bff8 <USBD_Get_USB_Status+0x1c>)
 800bff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff6:	bf00      	nop
 800bff8:	0800c009 	.word	0x0800c009
 800bffc:	0800c00f 	.word	0x0800c00f
 800c000:	0800c015 	.word	0x0800c015
 800c004:	0800c01b 	.word	0x0800c01b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c008:	2300      	movs	r3, #0
 800c00a:	73fb      	strb	r3, [r7, #15]
    break;
 800c00c:	e00b      	b.n	800c026 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c00e:	2303      	movs	r3, #3
 800c010:	73fb      	strb	r3, [r7, #15]
    break;
 800c012:	e008      	b.n	800c026 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c014:	2301      	movs	r3, #1
 800c016:	73fb      	strb	r3, [r7, #15]
    break;
 800c018:	e005      	b.n	800c026 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c01a:	2303      	movs	r3, #3
 800c01c:	73fb      	strb	r3, [r7, #15]
    break;
 800c01e:	e002      	b.n	800c026 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c020:	2303      	movs	r3, #3
 800c022:	73fb      	strb	r3, [r7, #15]
    break;
 800c024:	bf00      	nop
  }
  return usb_status;
 800c026:	7bfb      	ldrb	r3, [r7, #15]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3714      	adds	r7, #20
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <__libc_init_array>:
 800c034:	b570      	push	{r4, r5, r6, lr}
 800c036:	4d0d      	ldr	r5, [pc, #52]	; (800c06c <__libc_init_array+0x38>)
 800c038:	4c0d      	ldr	r4, [pc, #52]	; (800c070 <__libc_init_array+0x3c>)
 800c03a:	1b64      	subs	r4, r4, r5
 800c03c:	10a4      	asrs	r4, r4, #2
 800c03e:	2600      	movs	r6, #0
 800c040:	42a6      	cmp	r6, r4
 800c042:	d109      	bne.n	800c058 <__libc_init_array+0x24>
 800c044:	4d0b      	ldr	r5, [pc, #44]	; (800c074 <__libc_init_array+0x40>)
 800c046:	4c0c      	ldr	r4, [pc, #48]	; (800c078 <__libc_init_array+0x44>)
 800c048:	f000 f884 	bl	800c154 <_init>
 800c04c:	1b64      	subs	r4, r4, r5
 800c04e:	10a4      	asrs	r4, r4, #2
 800c050:	2600      	movs	r6, #0
 800c052:	42a6      	cmp	r6, r4
 800c054:	d105      	bne.n	800c062 <__libc_init_array+0x2e>
 800c056:	bd70      	pop	{r4, r5, r6, pc}
 800c058:	f855 3b04 	ldr.w	r3, [r5], #4
 800c05c:	4798      	blx	r3
 800c05e:	3601      	adds	r6, #1
 800c060:	e7ee      	b.n	800c040 <__libc_init_array+0xc>
 800c062:	f855 3b04 	ldr.w	r3, [r5], #4
 800c066:	4798      	blx	r3
 800c068:	3601      	adds	r6, #1
 800c06a:	e7f2      	b.n	800c052 <__libc_init_array+0x1e>
 800c06c:	0800c23c 	.word	0x0800c23c
 800c070:	0800c23c 	.word	0x0800c23c
 800c074:	0800c23c 	.word	0x0800c23c
 800c078:	0800c240 	.word	0x0800c240

0800c07c <__itoa>:
 800c07c:	1e93      	subs	r3, r2, #2
 800c07e:	2b22      	cmp	r3, #34	; 0x22
 800c080:	b510      	push	{r4, lr}
 800c082:	460c      	mov	r4, r1
 800c084:	d904      	bls.n	800c090 <__itoa+0x14>
 800c086:	2300      	movs	r3, #0
 800c088:	700b      	strb	r3, [r1, #0]
 800c08a:	461c      	mov	r4, r3
 800c08c:	4620      	mov	r0, r4
 800c08e:	bd10      	pop	{r4, pc}
 800c090:	2a0a      	cmp	r2, #10
 800c092:	d109      	bne.n	800c0a8 <__itoa+0x2c>
 800c094:	2800      	cmp	r0, #0
 800c096:	da07      	bge.n	800c0a8 <__itoa+0x2c>
 800c098:	232d      	movs	r3, #45	; 0x2d
 800c09a:	700b      	strb	r3, [r1, #0]
 800c09c:	4240      	negs	r0, r0
 800c09e:	2101      	movs	r1, #1
 800c0a0:	4421      	add	r1, r4
 800c0a2:	f000 f815 	bl	800c0d0 <__utoa>
 800c0a6:	e7f1      	b.n	800c08c <__itoa+0x10>
 800c0a8:	2100      	movs	r1, #0
 800c0aa:	e7f9      	b.n	800c0a0 <__itoa+0x24>

0800c0ac <itoa>:
 800c0ac:	f7ff bfe6 	b.w	800c07c <__itoa>

0800c0b0 <memset>:
 800c0b0:	4402      	add	r2, r0
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d100      	bne.n	800c0ba <memset+0xa>
 800c0b8:	4770      	bx	lr
 800c0ba:	f803 1b01 	strb.w	r1, [r3], #1
 800c0be:	e7f9      	b.n	800c0b4 <memset+0x4>

0800c0c0 <strcpy>:
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0c6:	f803 2b01 	strb.w	r2, [r3], #1
 800c0ca:	2a00      	cmp	r2, #0
 800c0cc:	d1f9      	bne.n	800c0c2 <strcpy+0x2>
 800c0ce:	4770      	bx	lr

0800c0d0 <__utoa>:
 800c0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0d2:	4c1f      	ldr	r4, [pc, #124]	; (800c150 <__utoa+0x80>)
 800c0d4:	b08b      	sub	sp, #44	; 0x2c
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	466e      	mov	r6, sp
 800c0dc:	f104 0c20 	add.w	ip, r4, #32
 800c0e0:	6820      	ldr	r0, [r4, #0]
 800c0e2:	6861      	ldr	r1, [r4, #4]
 800c0e4:	4637      	mov	r7, r6
 800c0e6:	c703      	stmia	r7!, {r0, r1}
 800c0e8:	3408      	adds	r4, #8
 800c0ea:	4564      	cmp	r4, ip
 800c0ec:	463e      	mov	r6, r7
 800c0ee:	d1f7      	bne.n	800c0e0 <__utoa+0x10>
 800c0f0:	7921      	ldrb	r1, [r4, #4]
 800c0f2:	7139      	strb	r1, [r7, #4]
 800c0f4:	1e91      	subs	r1, r2, #2
 800c0f6:	6820      	ldr	r0, [r4, #0]
 800c0f8:	6038      	str	r0, [r7, #0]
 800c0fa:	2922      	cmp	r1, #34	; 0x22
 800c0fc:	f04f 0100 	mov.w	r1, #0
 800c100:	d904      	bls.n	800c10c <__utoa+0x3c>
 800c102:	7019      	strb	r1, [r3, #0]
 800c104:	460b      	mov	r3, r1
 800c106:	4618      	mov	r0, r3
 800c108:	b00b      	add	sp, #44	; 0x2c
 800c10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c10c:	1e58      	subs	r0, r3, #1
 800c10e:	4684      	mov	ip, r0
 800c110:	fbb5 f7f2 	udiv	r7, r5, r2
 800c114:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800c118:	fb02 5617 	mls	r6, r2, r7, r5
 800c11c:	4476      	add	r6, lr
 800c11e:	460c      	mov	r4, r1
 800c120:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c124:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c128:	462e      	mov	r6, r5
 800c12a:	42b2      	cmp	r2, r6
 800c12c:	f101 0101 	add.w	r1, r1, #1
 800c130:	463d      	mov	r5, r7
 800c132:	d9ed      	bls.n	800c110 <__utoa+0x40>
 800c134:	2200      	movs	r2, #0
 800c136:	545a      	strb	r2, [r3, r1]
 800c138:	1919      	adds	r1, r3, r4
 800c13a:	1aa5      	subs	r5, r4, r2
 800c13c:	42aa      	cmp	r2, r5
 800c13e:	dae2      	bge.n	800c106 <__utoa+0x36>
 800c140:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c144:	780e      	ldrb	r6, [r1, #0]
 800c146:	7006      	strb	r6, [r0, #0]
 800c148:	3201      	adds	r2, #1
 800c14a:	f801 5901 	strb.w	r5, [r1], #-1
 800c14e:	e7f4      	b.n	800c13a <__utoa+0x6a>
 800c150:	0800c20c 	.word	0x0800c20c

0800c154 <_init>:
 800c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c156:	bf00      	nop
 800c158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c15a:	bc08      	pop	{r3}
 800c15c:	469e      	mov	lr, r3
 800c15e:	4770      	bx	lr

0800c160 <_fini>:
 800c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c162:	bf00      	nop
 800c164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c166:	bc08      	pop	{r3}
 800c168:	469e      	mov	lr, r3
 800c16a:	4770      	bx	lr
