
transwadc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb80  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800bd58  0800bd58  0001bd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be20  0800be20  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be20  0800be20  0001be20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be28  0800be28  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be28  0800be28  0001be28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be2c  0800be2c  0001be2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800be30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f4f0  200001a4  0800bfd4  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001f694  0800bfd4  0002f694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002336b  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004782  00000000  00000000  0004353f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00047cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001570  00000000  00000000  00049420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a848  00000000  00000000  0004a990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b957  00000000  00000000  000751d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001045a6  00000000  00000000  00090b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001950d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006168  00000000  00000000  00195128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a4 	.word	0x200001a4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bd40 	.word	0x0800bd40

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a8 	.word	0x200001a8
 8000214:	0800bd40 	.word	0x0800bd40

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b96e 	b.w	800051c <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	4604      	mov	r4, r0
 8000260:	468c      	mov	ip, r1
 8000262:	2b00      	cmp	r3, #0
 8000264:	f040 8083 	bne.w	800036e <__udivmoddi4+0x116>
 8000268:	428a      	cmp	r2, r1
 800026a:	4617      	mov	r7, r2
 800026c:	d947      	bls.n	80002fe <__udivmoddi4+0xa6>
 800026e:	fab2 f282 	clz	r2, r2
 8000272:	b142      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000274:	f1c2 0020 	rsb	r0, r2, #32
 8000278:	fa24 f000 	lsr.w	r0, r4, r0
 800027c:	4091      	lsls	r1, r2
 800027e:	4097      	lsls	r7, r2
 8000280:	ea40 0c01 	orr.w	ip, r0, r1
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028a:	0c23      	lsrs	r3, r4, #16
 800028c:	fbbc f6f8 	udiv	r6, ip, r8
 8000290:	fa1f fe87 	uxth.w	lr, r7
 8000294:	fb08 c116 	mls	r1, r8, r6, ip
 8000298:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029c:	fb06 f10e 	mul.w	r1, r6, lr
 80002a0:	4299      	cmp	r1, r3
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x60>
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002aa:	f080 8119 	bcs.w	80004e0 <__udivmoddi4+0x288>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 8116 	bls.w	80004e0 <__udivmoddi4+0x288>
 80002b4:	3e02      	subs	r6, #2
 80002b6:	443b      	add	r3, r7
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c0:	fb08 3310 	mls	r3, r8, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002cc:	45a6      	cmp	lr, r4
 80002ce:	d909      	bls.n	80002e4 <__udivmoddi4+0x8c>
 80002d0:	193c      	adds	r4, r7, r4
 80002d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d6:	f080 8105 	bcs.w	80004e4 <__udivmoddi4+0x28c>
 80002da:	45a6      	cmp	lr, r4
 80002dc:	f240 8102 	bls.w	80004e4 <__udivmoddi4+0x28c>
 80002e0:	3802      	subs	r0, #2
 80002e2:	443c      	add	r4, r7
 80002e4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e8:	eba4 040e 	sub.w	r4, r4, lr
 80002ec:	2600      	movs	r6, #0
 80002ee:	b11d      	cbz	r5, 80002f8 <__udivmoddi4+0xa0>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c5 4300 	strd	r4, r3, [r5]
 80002f8:	4631      	mov	r1, r6
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xaa>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	2a00      	cmp	r2, #0
 8000308:	d150      	bne.n	80003ac <__udivmoddi4+0x154>
 800030a:	1bcb      	subs	r3, r1, r7
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	2601      	movs	r6, #1
 8000316:	fbb3 fcfe 	udiv	ip, r3, lr
 800031a:	0c21      	lsrs	r1, r4, #16
 800031c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000320:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000324:	fb08 f30c 	mul.w	r3, r8, ip
 8000328:	428b      	cmp	r3, r1
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0xe4>
 800032c:	1879      	adds	r1, r7, r1
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0xe2>
 8000334:	428b      	cmp	r3, r1
 8000336:	f200 80e9 	bhi.w	800050c <__udivmoddi4+0x2b4>
 800033a:	4684      	mov	ip, r0
 800033c:	1ac9      	subs	r1, r1, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1110 	mls	r1, lr, r0, r1
 8000348:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x10c>
 8000354:	193c      	adds	r4, r7, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x10a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80d9 	bhi.w	8000514 <__udivmoddi4+0x2bc>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e7bf      	b.n	80002ee <__udivmoddi4+0x96>
 800036e:	428b      	cmp	r3, r1
 8000370:	d909      	bls.n	8000386 <__udivmoddi4+0x12e>
 8000372:	2d00      	cmp	r5, #0
 8000374:	f000 80b1 	beq.w	80004da <__udivmoddi4+0x282>
 8000378:	2600      	movs	r6, #0
 800037a:	e9c5 0100 	strd	r0, r1, [r5]
 800037e:	4630      	mov	r0, r6
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	fab3 f683 	clz	r6, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d14a      	bne.n	8000424 <__udivmoddi4+0x1cc>
 800038e:	428b      	cmp	r3, r1
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0x140>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 80b8 	bhi.w	8000508 <__udivmoddi4+0x2b0>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb61 0103 	sbc.w	r1, r1, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	468c      	mov	ip, r1
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0a8      	beq.n	80002f8 <__udivmoddi4+0xa0>
 80003a6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0xa0>
 80003ac:	f1c2 0320 	rsb	r3, r2, #32
 80003b0:	fa20 f603 	lsr.w	r6, r0, r3
 80003b4:	4097      	lsls	r7, r2
 80003b6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003be:	40d9      	lsrs	r1, r3
 80003c0:	4330      	orrs	r0, r6
 80003c2:	0c03      	lsrs	r3, r0, #16
 80003c4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d4:	fb06 f108 	mul.w	r1, r6, r8
 80003d8:	4299      	cmp	r1, r3
 80003da:	fa04 f402 	lsl.w	r4, r4, r2
 80003de:	d909      	bls.n	80003f4 <__udivmoddi4+0x19c>
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003e6:	f080 808d 	bcs.w	8000504 <__udivmoddi4+0x2ac>
 80003ea:	4299      	cmp	r1, r3
 80003ec:	f240 808a 	bls.w	8000504 <__udivmoddi4+0x2ac>
 80003f0:	3e02      	subs	r6, #2
 80003f2:	443b      	add	r3, r7
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	b281      	uxth	r1, r0
 80003f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000400:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000404:	fb00 f308 	mul.w	r3, r0, r8
 8000408:	428b      	cmp	r3, r1
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x1c4>
 800040c:	1879      	adds	r1, r7, r1
 800040e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000412:	d273      	bcs.n	80004fc <__udivmoddi4+0x2a4>
 8000414:	428b      	cmp	r3, r1
 8000416:	d971      	bls.n	80004fc <__udivmoddi4+0x2a4>
 8000418:	3802      	subs	r0, #2
 800041a:	4439      	add	r1, r7
 800041c:	1acb      	subs	r3, r1, r3
 800041e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000422:	e778      	b.n	8000316 <__udivmoddi4+0xbe>
 8000424:	f1c6 0c20 	rsb	ip, r6, #32
 8000428:	fa03 f406 	lsl.w	r4, r3, r6
 800042c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000430:	431c      	orrs	r4, r3
 8000432:	fa20 f70c 	lsr.w	r7, r0, ip
 8000436:	fa01 f306 	lsl.w	r3, r1, r6
 800043a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800043e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000442:	431f      	orrs	r7, r3
 8000444:	0c3b      	lsrs	r3, r7, #16
 8000446:	fbb1 f9fe 	udiv	r9, r1, lr
 800044a:	fa1f f884 	uxth.w	r8, r4
 800044e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000452:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000456:	fb09 fa08 	mul.w	sl, r9, r8
 800045a:	458a      	cmp	sl, r1
 800045c:	fa02 f206 	lsl.w	r2, r2, r6
 8000460:	fa00 f306 	lsl.w	r3, r0, r6
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x220>
 8000466:	1861      	adds	r1, r4, r1
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d248      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 800046e:	458a      	cmp	sl, r1
 8000470:	d946      	bls.n	8000500 <__udivmoddi4+0x2a8>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	4421      	add	r1, r4
 8000478:	eba1 010a 	sub.w	r1, r1, sl
 800047c:	b2bf      	uxth	r7, r7
 800047e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000482:	fb0e 1110 	mls	r1, lr, r0, r1
 8000486:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45b8      	cmp	r8, r7
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x24a>
 8000492:	19e7      	adds	r7, r4, r7
 8000494:	f100 31ff 	add.w	r1, r0, #4294967295
 8000498:	d22e      	bcs.n	80004f8 <__udivmoddi4+0x2a0>
 800049a:	45b8      	cmp	r8, r7
 800049c:	d92c      	bls.n	80004f8 <__udivmoddi4+0x2a0>
 800049e:	3802      	subs	r0, #2
 80004a0:	4427      	add	r7, r4
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba7 0708 	sub.w	r7, r7, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454f      	cmp	r7, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	4649      	mov	r1, r9
 80004b4:	d31a      	bcc.n	80004ec <__udivmoddi4+0x294>
 80004b6:	d017      	beq.n	80004e8 <__udivmoddi4+0x290>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x27a>
 80004ba:	ebb3 020e 	subs.w	r2, r3, lr
 80004be:	eb67 0701 	sbc.w	r7, r7, r1
 80004c2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004c6:	40f2      	lsrs	r2, r6
 80004c8:	ea4c 0202 	orr.w	r2, ip, r2
 80004cc:	40f7      	lsrs	r7, r6
 80004ce:	e9c5 2700 	strd	r2, r7, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e70b      	b.n	80002f8 <__udivmoddi4+0xa0>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0x60>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6fd      	b.n	80002e4 <__udivmoddi4+0x8c>
 80004e8:	4543      	cmp	r3, r8
 80004ea:	d2e5      	bcs.n	80004b8 <__udivmoddi4+0x260>
 80004ec:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f0:	eb69 0104 	sbc.w	r1, r9, r4
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7df      	b.n	80004b8 <__udivmoddi4+0x260>
 80004f8:	4608      	mov	r0, r1
 80004fa:	e7d2      	b.n	80004a2 <__udivmoddi4+0x24a>
 80004fc:	4660      	mov	r0, ip
 80004fe:	e78d      	b.n	800041c <__udivmoddi4+0x1c4>
 8000500:	4681      	mov	r9, r0
 8000502:	e7b9      	b.n	8000478 <__udivmoddi4+0x220>
 8000504:	4666      	mov	r6, ip
 8000506:	e775      	b.n	80003f4 <__udivmoddi4+0x19c>
 8000508:	4630      	mov	r0, r6
 800050a:	e74a      	b.n	80003a2 <__udivmoddi4+0x14a>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	4439      	add	r1, r7
 8000512:	e713      	b.n	800033c <__udivmoddi4+0xe4>
 8000514:	3802      	subs	r0, #2
 8000516:	443c      	add	r4, r7
 8000518:	e724      	b.n	8000364 <__udivmoddi4+0x10c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000526:	f001 f8b2 	bl	800168e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800052a:	f000 f917 	bl	800075c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800052e:	f000 fc77 	bl	8000e20 <MX_GPIO_Init>
	MX_DMA_Init();
 8000532:	f000 fc27 	bl	8000d84 <MX_DMA_Init>
	MX_LPUART1_UART_Init();
 8000536:	f000 fabb 	bl	8000ab0 <MX_LPUART1_UART_Init>
	MX_USART3_UART_Init();
 800053a:	f000 fb4f 	bl	8000bdc <MX_USART3_UART_Init>
	MX_OPAMP3_Init();
 800053e:	f000 fb99 	bl	8000c74 <MX_OPAMP3_Init>
	MX_ADC2_Init();
 8000542:	f000 f983 	bl	800084c <MX_ADC2_Init>
	MX_OPAMP6_Init();
 8000546:	f000 fbf1 	bl	8000d2c <MX_OPAMP6_Init>
	MX_USB_Device_Init();
 800054a:	f00a fe89 	bl	800b260 <MX_USB_Device_Init>
	MX_ADC4_Init();
 800054e:	f000 f9e3 	bl	8000918 <MX_ADC4_Init>
	MX_USART1_UART_Init();
 8000552:	f000 faf7 	bl	8000b44 <MX_USART1_UART_Init>
	MX_ADC5_Init();
 8000556:	f000 fa45 	bl	80009e4 <MX_ADC5_Init>
	MX_OPAMP5_Init();
 800055a:	f000 fbb9 	bl	8000cd0 <MX_OPAMP5_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800055e:	217f      	movs	r1, #127	; 0x7f
 8000560:	486d      	ldr	r0, [pc, #436]	; (8000718 <main+0x1f8>)
 8000562:	f002 ff4b 	bl	80033fc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000566:	217f      	movs	r1, #127	; 0x7f
 8000568:	486c      	ldr	r0, [pc, #432]	; (800071c <main+0x1fc>)
 800056a:	f002 ff47 	bl	80033fc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 800056e:	217f      	movs	r1, #127	; 0x7f
 8000570:	486b      	ldr	r0, [pc, #428]	; (8000720 <main+0x200>)
 8000572:	f002 ff43 	bl	80033fc <HAL_ADCEx_Calibration_Start>
	HAL_OPAMP_Start(&hopamp6);
 8000576:	486b      	ldr	r0, [pc, #428]	; (8000724 <main+0x204>)
 8000578:	f003 ff6e 	bl	8004458 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 800057c:	486a      	ldr	r0, [pc, #424]	; (8000728 <main+0x208>)
 800057e:	f003 ff6b 	bl	8004458 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp5);
 8000582:	486a      	ldr	r0, [pc, #424]	; (800072c <main+0x20c>)
 8000584:	f003 ff68 	bl	8004458 <HAL_OPAMP_Start>
	HAL_UART_Transmit(&hlpuart1, (uint8_t*) "salam\r\n", strlen("salam\r\n"),1);
 8000588:	2301      	movs	r3, #1
 800058a:	2207      	movs	r2, #7
 800058c:	4968      	ldr	r1, [pc, #416]	; (8000730 <main+0x210>)
 800058e:	4869      	ldr	r0, [pc, #420]	; (8000734 <main+0x214>)
 8000590:	f006 fbee 	bl	8006d70 <HAL_UART_Transmit>
	while (1)
	{

		flag1 =0;
 8000594:	4b68      	ldr	r3, [pc, #416]	; (8000738 <main+0x218>)
 8000596:	2200      	movs	r2, #0
 8000598:	801a      	strh	r2, [r3, #0]
		flag2 =0;
 800059a:	4b68      	ldr	r3, [pc, #416]	; (800073c <main+0x21c>)
 800059c:	2200      	movs	r2, #0
 800059e:	801a      	strh	r2, [r3, #0]
		flag3 =0;
 80005a0:	4b67      	ldr	r3, [pc, #412]	; (8000740 <main+0x220>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	801a      	strh	r2, [r3, #0]
		memset(adcm3,0,60000);
 80005a6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80005aa:	2100      	movs	r1, #0
 80005ac:	4865      	ldr	r0, [pc, #404]	; (8000744 <main+0x224>)
 80005ae:	f00b fb65 	bl	800bc7c <memset>
		print5("0000000gen");
 80005b2:	4865      	ldr	r0, [pc, #404]	; (8000748 <main+0x228>)
 80005b4:	f000 fca4 	bl	8000f00 <print5>
		HAL_Delay(32);
 80005b8:	2020      	movs	r0, #32
 80005ba:	f001 f8d9 	bl	8001770 <HAL_Delay>
		HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adcm3, 60000);
 80005be:	f64e 2260 	movw	r2, #60000	; 0xea60
 80005c2:	4960      	ldr	r1, [pc, #384]	; (8000744 <main+0x224>)
 80005c4:	4856      	ldr	r0, [pc, #344]	; (8000720 <main+0x200>)
 80005c6:	f001 fd77 	bl	80020b8 <HAL_ADC_Start_DMA>
		while(flag1==1 && flag2==1 && flag3==1);
 80005ca:	bf00      	nop
 80005cc:	4b5a      	ldr	r3, [pc, #360]	; (8000738 <main+0x218>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d109      	bne.n	80005ea <main+0xca>
 80005d6:	4b59      	ldr	r3, [pc, #356]	; (800073c <main+0x21c>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d104      	bne.n	80005ea <main+0xca>
 80005e0:	4b57      	ldr	r3, [pc, #348]	; (8000740 <main+0x220>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d0f0      	beq.n	80005cc <main+0xac>


		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005ea:	2120      	movs	r1, #32
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f003 fe24 	bl	800423c <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80005f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f8:	f001 f8ba 	bl	8001770 <HAL_Delay>

		for (var = 1000; var < 60000; ++var) {
 80005fc:	4b53      	ldr	r3, [pc, #332]	; (800074c <main+0x22c>)
 80005fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	e05d      	b.n	80006c2 <main+0x1a2>

			if(adcm3[var]>10){
 8000606:	4b51      	ldr	r3, [pc, #324]	; (800074c <main+0x22c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a4e      	ldr	r2, [pc, #312]	; (8000744 <main+0x224>)
 800060c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000610:	b29b      	uxth	r3, r3
 8000612:	2b0a      	cmp	r3, #10
 8000614:	d950      	bls.n	80006b8 <main+0x198>

				int maxi, maxi_i, ii;

				maxi = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
				for(int ikk = 0; ikk < 60000; ++ikk)
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	e013      	b.n	8000648 <main+0x128>
				{
					if(adcm3[ikk] > maxi)
 8000620:	4a48      	ldr	r2, [pc, #288]	; (8000744 <main+0x224>)
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000628:	b29b      	uxth	r3, r3
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4293      	cmp	r3, r2
 8000630:	da07      	bge.n	8000642 <main+0x122>
					{
						maxi = adcm3[ikk];
 8000632:	4a44      	ldr	r2, [pc, #272]	; (8000744 <main+0x224>)
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800063a:	b29b      	uxth	r3, r3
 800063c:	60fb      	str	r3, [r7, #12]
						maxi_i = ikk;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	60bb      	str	r3, [r7, #8]
				for(int ikk = 0; ikk < 60000; ++ikk)
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800064e:	4293      	cmp	r3, r2
 8000650:	dde6      	ble.n	8000620 <main+0x100>
					}
				}

				for (ii = maxi_i-2000; ii < maxi_i+2000; ++ii) {
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	e022      	b.n	80006a2 <main+0x182>

					itoa(adcm3[ii], snum1, 10);
 800065c:	4a39      	ldr	r2, [pc, #228]	; (8000744 <main+0x224>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000664:	b29b      	uxth	r3, r3
 8000666:	220a      	movs	r2, #10
 8000668:	4939      	ldr	r1, [pc, #228]	; (8000750 <main+0x230>)
 800066a:	4618      	mov	r0, r3
 800066c:	f00b fb04 	bl	800bc78 <itoa>
					strcat(snum1,"\r\n");
 8000670:	4837      	ldr	r0, [pc, #220]	; (8000750 <main+0x230>)
 8000672:	f7ff fdd1 	bl	8000218 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b35      	ldr	r3, [pc, #212]	; (8000750 <main+0x230>)
 800067c:	4413      	add	r3, r2
 800067e:	4a35      	ldr	r2, [pc, #212]	; (8000754 <main+0x234>)
 8000680:	8811      	ldrh	r1, [r2, #0]
 8000682:	7892      	ldrb	r2, [r2, #2]
 8000684:	8019      	strh	r1, [r3, #0]
 8000686:	709a      	strb	r2, [r3, #2]
					HAL_UART_Transmit(&hlpuart1, (uint8_t*) snum1, strlen(snum1),1);
 8000688:	4831      	ldr	r0, [pc, #196]	; (8000750 <main+0x230>)
 800068a:	f7ff fdc5 	bl	8000218 <strlen>
 800068e:	4603      	mov	r3, r0
 8000690:	b29a      	uxth	r2, r3
 8000692:	2301      	movs	r3, #1
 8000694:	492e      	ldr	r1, [pc, #184]	; (8000750 <main+0x230>)
 8000696:	4827      	ldr	r0, [pc, #156]	; (8000734 <main+0x214>)
 8000698:	f006 fb6a 	bl	8006d70 <HAL_UART_Transmit>
				for (ii = maxi_i-2000; ii < maxi_i+2000; ++ii) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	ddd6      	ble.n	800065c <main+0x13c>
				}

				var = 60000;
 80006ae:	4b27      	ldr	r3, [pc, #156]	; (800074c <main+0x22c>)
 80006b0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80006b4:	601a      	str	r2, [r3, #0]
				break;
 80006b6:	e00a      	b.n	80006ce <main+0x1ae>
		for (var = 1000; var < 60000; ++var) {
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <main+0x22c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	4a23      	ldr	r2, [pc, #140]	; (800074c <main+0x22c>)
 80006c0:	6013      	str	r3, [r2, #0]
 80006c2:	4b22      	ldr	r3, [pc, #136]	; (800074c <main+0x22c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80006ca:	4293      	cmp	r3, r2
 80006cc:	dd9b      	ble.n	8000606 <main+0xe6>
			}

		}

		itoa(5000, snum1, 10);
 80006ce:	220a      	movs	r2, #10
 80006d0:	491f      	ldr	r1, [pc, #124]	; (8000750 <main+0x230>)
 80006d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80006d6:	f00b facf 	bl	800bc78 <itoa>
		strcat(snum1,"\r\n");
 80006da:	481d      	ldr	r0, [pc, #116]	; (8000750 <main+0x230>)
 80006dc:	f7ff fd9c 	bl	8000218 <strlen>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <main+0x230>)
 80006e6:	4413      	add	r3, r2
 80006e8:	4a1a      	ldr	r2, [pc, #104]	; (8000754 <main+0x234>)
 80006ea:	8811      	ldrh	r1, [r2, #0]
 80006ec:	7892      	ldrb	r2, [r2, #2]
 80006ee:	8019      	strh	r1, [r3, #0]
 80006f0:	709a      	strb	r2, [r3, #2]
		strcat(snum, snum1);
 80006f2:	4917      	ldr	r1, [pc, #92]	; (8000750 <main+0x230>)
 80006f4:	4818      	ldr	r0, [pc, #96]	; (8000758 <main+0x238>)
 80006f6:	f00b fac9 	bl	800bc8c <strcat>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) snum1, strlen(snum1),10);
 80006fa:	4815      	ldr	r0, [pc, #84]	; (8000750 <main+0x230>)
 80006fc:	f7ff fd8c 	bl	8000218 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	230a      	movs	r3, #10
 8000706:	4912      	ldr	r1, [pc, #72]	; (8000750 <main+0x230>)
 8000708:	480a      	ldr	r0, [pc, #40]	; (8000734 <main+0x214>)
 800070a:	f006 fb31 	bl	8006d70 <HAL_UART_Transmit>
		HAL_Delay(400);
 800070e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000712:	f001 f82d 	bl	8001770 <HAL_Delay>
		flag1 =0;
 8000716:	e73d      	b.n	8000594 <main+0x74>
 8000718:	2001df00 	.word	0x2001df00
 800071c:	2001d99c 	.word	0x2001d99c
 8000720:	2001da08 	.word	0x2001da08
 8000724:	2001dd88 	.word	0x2001dd88
 8000728:	2001db08 	.word	0x2001db08
 800072c:	2001de88 	.word	0x2001de88
 8000730:	0800bd58 	.word	0x0800bd58
 8000734:	2001dc0c 	.word	0x2001dc0c
 8000738:	2001d680 	.word	0x2001d680
 800073c:	2001d682 	.word	0x2001d682
 8000740:	2001d684 	.word	0x2001d684
 8000744:	200001c0 	.word	0x200001c0
 8000748:	0800bd60 	.word	0x0800bd60
 800074c:	2001dec4 	.word	0x2001dec4
 8000750:	2001dad4 	.word	0x2001dad4
 8000754:	0800bd6c 	.word	0x0800bd6c
 8000758:	2001decc 	.word	0x2001decc

0800075c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b0a8      	sub	sp, #160	; 0xa0
 8000760:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000766:	2238      	movs	r2, #56	; 0x38
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f00b fa86 	bl	800bc7c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2254      	movs	r2, #84	; 0x54
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f00b fa78 	bl	800bc7c <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000790:	f005 fa10 	bl	8005bb4 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000794:	2321      	movs	r3, #33	; 0x21
 8000796:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	2303      	movs	r3, #3
 80007ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLN = 25;
 80007b6:	2319      	movs	r3, #25
 80007b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007bc:	2302      	movs	r3, #2
 80007be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007d2:	4618      	mov	r0, r3
 80007d4:	f005 fafc 	bl	8005dd0 <HAL_RCC_OscConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x86>
	{
		Error_Handler();
 80007de:	f000 fbef 	bl	8000fc0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	230f      	movs	r3, #15
 80007e4:	657b      	str	r3, [r7, #84]	; 0x54
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2303      	movs	r3, #3
 80007e8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007fa:	2104      	movs	r1, #4
 80007fc:	4618      	mov	r0, r3
 80007fe:	f005 fdff 	bl	8006400 <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8000808:	f000 fbda 	bl	8000fc0 <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <SystemClock_Config+0xec>)
 800080e:	603b      	str	r3, [r7, #0]
			|RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB
			|RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC345;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800081c:	2300      	movs	r3, #0
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000820:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000824:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000826:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4618      	mov	r0, r3
 8000830:	f006 f802 	bl	8006838 <HAL_RCCEx_PeriphCLKConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xe2>
	{
		Error_Handler();
 800083a:	f000 fbc1 	bl	8000fc0 <Error_Handler>
	}
}
 800083e:	bf00      	nop
 8000840:	37a0      	adds	r7, #160	; 0xa0
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	0001a025 	.word	0x0001a025

0800084c <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2220      	movs	r2, #32
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f00b fa0f 	bl	800bc7c <memset>
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Common config
	 */
	hadc2.Instance = ADC2;
 800085e:	4b2b      	ldr	r3, [pc, #172]	; (800090c <MX_ADC2_Init+0xc0>)
 8000860:	4a2b      	ldr	r2, [pc, #172]	; (8000910 <MX_ADC2_Init+0xc4>)
 8000862:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <MX_ADC2_Init+0xc0>)
 8000866:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800086a:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <MX_ADC2_Init+0xc0>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000872:	4b26      	ldr	r3, [pc, #152]	; (800090c <MX_ADC2_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <MX_ADC2_Init+0xc0>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800087e:	4b23      	ldr	r3, [pc, #140]	; (800090c <MX_ADC2_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_ADC2_Init+0xc0>)
 8000886:	2204      	movs	r2, #4
 8000888:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <MX_ADC2_Init+0xc0>)
 800088c:	2200      	movs	r2, #0
 800088e:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_ADC2_Init+0xc0>)
 8000892:	2201      	movs	r2, #1
 8000894:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_ADC2_Init+0xc0>)
 8000898:	2201      	movs	r2, #1
 800089a:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_ADC2_Init+0xc0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <MX_ADC2_Init+0xc0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_ADC2_Init+0xc0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	631a      	str	r2, [r3, #48]	; 0x30
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_ADC2_Init+0xc0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_ADC2_Init+0xc0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_ADC2_Init+0xc0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008c6:	4811      	ldr	r0, [pc, #68]	; (800090c <MX_ADC2_Init+0xc0>)
 80008c8:	f001 fa02 	bl	8001cd0 <HAL_ADC_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_ADC2_Init+0x8a>
	{
		Error_Handler();
 80008d2:	f000 fb75 	bl	8000fc0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_ADC2_Init+0xc8>)
 80008d8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80008da:	2306      	movs	r3, #6
 80008dc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80008de:	2304      	movs	r3, #4
 80008e0:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008e2:	237f      	movs	r3, #127	; 0x7f
 80008e4:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008e6:	2304      	movs	r3, #4
 80008e8:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	; (800090c <MX_ADC2_Init+0xc0>)
 80008f4:	f001 ff1c 	bl	8002730 <HAL_ADC_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_ADC2_Init+0xb6>
	{
		Error_Handler();
 80008fe:	f000 fb5f 	bl	8000fc0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2001d99c 	.word	0x2001d99c
 8000910:	50000100 	.word	0x50000100
 8000914:	cb8c0000 	.word	0xcb8c0000

08000918 <MX_ADC4_Init>:
 * @brief ADC4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC4_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC4_Init 0 */

	/* USER CODE END ADC4_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	2220      	movs	r2, #32
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f00b f9a9 	bl	800bc7c <memset>
	/* USER CODE BEGIN ADC4_Init 1 */

	/* USER CODE END ADC4_Init 1 */
	/** Common config
	 */
	hadc4.Instance = ADC4;
 800092a:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <MX_ADC4_Init+0xc0>)
 800092c:	4a2b      	ldr	r2, [pc, #172]	; (80009dc <MX_ADC4_Init+0xc4>)
 800092e:	601a      	str	r2, [r3, #0]
	hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000930:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <MX_ADC4_Init+0xc0>)
 8000932:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000936:	605a      	str	r2, [r3, #4]
	hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000938:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <MX_ADC4_Init+0xc0>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
	hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_ADC4_Init+0xc0>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
	hadc4.Init.GainCompensation = 0;
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <MX_ADC4_Init+0xc0>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
	hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800094a:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <MX_ADC4_Init+0xc0>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
	hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000950:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_ADC4_Init+0xc0>)
 8000952:	2204      	movs	r2, #4
 8000954:	619a      	str	r2, [r3, #24]
	hadc4.Init.LowPowerAutoWait = DISABLE;
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <MX_ADC4_Init+0xc0>)
 8000958:	2200      	movs	r2, #0
 800095a:	771a      	strb	r2, [r3, #28]
	hadc4.Init.ContinuousConvMode = ENABLE;
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_ADC4_Init+0xc0>)
 800095e:	2201      	movs	r2, #1
 8000960:	775a      	strb	r2, [r3, #29]
	hadc4.Init.NbrOfConversion = 1;
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_ADC4_Init+0xc0>)
 8000964:	2201      	movs	r2, #1
 8000966:	621a      	str	r2, [r3, #32]
	hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_ADC4_Init+0xc0>)
 800096a:	2200      	movs	r2, #0
 800096c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_ADC4_Init+0xc0>)
 8000972:	2200      	movs	r2, #0
 8000974:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_ADC4_Init+0xc0>)
 8000978:	2200      	movs	r2, #0
 800097a:	631a      	str	r2, [r3, #48]	; 0x30
	hadc4.Init.DMAContinuousRequests = DISABLE;
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_ADC4_Init+0xc0>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_ADC4_Init+0xc0>)
 8000986:	2200      	movs	r2, #0
 8000988:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc4.Init.OversamplingMode = DISABLE;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_ADC4_Init+0xc0>)
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000992:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_ADC4_Init+0xc0>)
 8000994:	f001 f99c 	bl	8001cd0 <HAL_ADC_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ADC4_Init+0x8a>
	{
		Error_Handler();
 800099e:	f000 fb0f 	bl	8000fc0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_VOPAMP6;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_ADC4_Init+0xc8>)
 80009a4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80009a6:	2306      	movs	r3, #6
 80009a8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80009aa:	2304      	movs	r3, #4
 80009ac:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ae:	237f      	movs	r3, #127	; 0x7f
 80009b0:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009b2:	2304      	movs	r3, #4
 80009b4:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_ADC4_Init+0xc0>)
 80009c0:	f001 feb6 	bl	8002730 <HAL_ADC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC4_Init+0xb6>
	{
		Error_Handler();
 80009ca:	f000 faf9 	bl	8000fc0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC4_Init 2 */

	/* USER CODE END ADC4_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2001df00 	.word	0x2001df00
 80009dc:	50000500 	.word	0x50000500
 80009e0:	c75a0000 	.word	0xc75a0000

080009e4 <MX_ADC5_Init>:
 * @brief ADC5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC5_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC5_Init 0 */

	/* USER CODE END ADC5_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80009ea:	463b      	mov	r3, r7
 80009ec:	2220      	movs	r2, #32
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f00b f943 	bl	800bc7c <memset>
	/* USER CODE BEGIN ADC5_Init 1 */

	/* USER CODE END ADC5_Init 1 */
	/** Common config
	 */
	hadc5.Instance = ADC5;
 80009f6:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 80009f8:	4a2b      	ldr	r2, [pc, #172]	; (8000aa8 <MX_ADC5_Init+0xc4>)
 80009fa:	601a      	str	r2, [r3, #0]
	hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 80009fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a02:	605a      	str	r2, [r3, #4]
	hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000a04:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
	hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a0a:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
	hadc5.Init.GainCompensation = 0;
 8000a10:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
	hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a16:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
	hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a1c:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	619a      	str	r2, [r3, #24]
	hadc5.Init.LowPowerAutoWait = DISABLE;
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	771a      	strb	r2, [r3, #28]
	hadc5.Init.ContinuousConvMode = ENABLE;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	775a      	strb	r2, [r3, #29]
	hadc5.Init.NbrOfConversion = 1;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	621a      	str	r2, [r3, #32]
	hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	631a      	str	r2, [r3, #48]	; 0x30
	hadc5.Init.DMAContinuousRequests = DISABLE;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc5.Init.OversamplingMode = DISABLE;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000a5e:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a60:	f001 f936 	bl	8001cd0 <HAL_ADC_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC5_Init+0x8a>
	{
		Error_Handler();
 8000a6a:	f000 faa9 	bl	8000fc0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_ADC5_Init+0xc8>)
 8000a70:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a72:	2306      	movs	r3, #6
 8000a74:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a7a:	237f      	movs	r3, #127	; 0x7f
 8000a7c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <MX_ADC5_Init+0xc0>)
 8000a8c:	f001 fe50 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_ADC5_Init+0xb6>
	{
		Error_Handler();
 8000a96:	f000 fa93 	bl	8000fc0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC5_Init 2 */

	/* USER CODE END ADC5_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2001da08 	.word	0x2001da08
 8000aa8:	50000600 	.word	0x50000600
 8000aac:	8c900008 	.word	0x8c900008

08000ab0 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000ab4:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_LPUART1_UART_Init+0x8c>)
 8000ab6:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000ab8:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_LPUART1_UART_Init+0x8c>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_LPUART1_UART_Init+0x8c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_LPUART1_UART_Init+0x8c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_LPUART1_UART_Init+0x8c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_LPUART1_UART_Init+0x8c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_LPUART1_UART_Init+0x8c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_LPUART1_UART_Init+0x8c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_LPUART1_UART_Init+0x8c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_LPUART1_UART_Init+0x8c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <MX_LPUART1_UART_Init+0x8c>)
 8000af4:	f006 f8ec 	bl	8006cd0 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_LPUART1_UART_Init+0x52>
	{
		Error_Handler();
 8000afe:	f000 fa5f 	bl	8000fc0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_LPUART1_UART_Init+0x8c>)
 8000b06:	f006 fe3c 	bl	8007782 <HAL_UARTEx_SetTxFifoThreshold>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_LPUART1_UART_Init+0x64>
	{
		Error_Handler();
 8000b10:	f000 fa56 	bl	8000fc0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4809      	ldr	r0, [pc, #36]	; (8000b3c <MX_LPUART1_UART_Init+0x8c>)
 8000b18:	f006 fe71 	bl	80077fe <HAL_UARTEx_SetRxFifoThreshold>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_LPUART1_UART_Init+0x76>
	{
		Error_Handler();
 8000b22:	f000 fa4d 	bl	8000fc0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_LPUART1_UART_Init+0x8c>)
 8000b28:	f006 fdf2 	bl	8007710 <HAL_UARTEx_DisableFifoMode>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_LPUART1_UART_Init+0x86>
	{
		Error_Handler();
 8000b32:	f000 fa45 	bl	8000fc0 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2001dc0c 	.word	0x2001dc0c
 8000b40:	40008000 	.word	0x40008000

08000b44 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000b48:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b4a:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b4c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b54:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b8e:	f006 f89f 	bl	8006cd0 <HAL_UART_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8000b98:	f000 fa12 	bl	8000fc0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000ba0:	f006 fdef 	bl	8007782 <HAL_UARTEx_SetTxFifoThreshold>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 8000baa:	f000 fa09 	bl	8000fc0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000bb2:	f006 fe24 	bl	80077fe <HAL_UARTEx_SetRxFifoThreshold>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8000bbc:	f000 fa00 	bl	8000fc0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000bc2:	f006 fda5 	bl	8007710 <HAL_UARTEx_DisableFifoMode>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8000bcc:	f000 f9f8 	bl	8000fc0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2001dcfc 	.word	0x2001dcfc
 8000bd8:	40013800 	.word	0x40013800

08000bdc <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000be0:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000be2:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <MX_USART3_UART_Init+0x94>)
 8000be4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000be8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bec:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c26:	f006 f853 	bl	8006cd0 <HAL_UART_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8000c30:	f000 f9c6 	bl	8000fc0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c34:	2100      	movs	r1, #0
 8000c36:	480d      	ldr	r0, [pc, #52]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c38:	f006 fda3 	bl	8007782 <HAL_UARTEx_SetTxFifoThreshold>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART3_UART_Init+0x6a>
	{
		Error_Handler();
 8000c42:	f000 f9bd 	bl	8000fc0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c46:	2100      	movs	r1, #0
 8000c48:	4808      	ldr	r0, [pc, #32]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c4a:	f006 fdd8 	bl	80077fe <HAL_UARTEx_SetRxFifoThreshold>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART3_UART_Init+0x7c>
	{
		Error_Handler();
 8000c54:	f000 f9b4 	bl	8000fc0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c5a:	f006 fd59 	bl	8007710 <HAL_UARTEx_DisableFifoMode>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8000c64:	f000 f9ac 	bl	8000fc0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2001d910 	.word	0x2001d910
 8000c70:	40004800 	.word	0x40004800

08000c74 <MX_OPAMP3_Init>:
 * @brief OPAMP3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_OPAMP3_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	/* USER CODE END OPAMP3_Init 0 */

	/* USER CODE BEGIN OPAMP3_Init 1 */

	/* USER CODE END OPAMP3_Init 1 */
	hopamp3.Instance = OPAMP3;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_OPAMP3_Init+0x54>)
 8000c7a:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <MX_OPAMP3_Init+0x58>)
 8000c7c:	601a      	str	r2, [r3, #0]
	hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_OPAMP3_Init+0x54>)
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	605a      	str	r2, [r3, #4]
	hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_OPAMP3_Init+0x54>)
 8000c86:	2240      	movs	r2, #64	; 0x40
 8000c88:	609a      	str	r2, [r3, #8]
	hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_OPAMP3_Init+0x54>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
	hopamp3.Init.InternalOutput = ENABLE;
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <MX_OPAMP3_Init+0x54>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	751a      	strb	r2, [r3, #20]
	hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_OPAMP3_Init+0x54>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
	hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_OPAMP3_Init+0x54>)
 8000c9e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24
	hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_64_OR_MINUS_63;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_OPAMP3_Init+0x54>)
 8000ca6:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
	hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_OPAMP3_Init+0x54>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_OPAMP3_Init+0x54>)
 8000cb4:	f003 fb00 	bl	80042b8 <HAL_OPAMP_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_OPAMP3_Init+0x4e>
	{
		Error_Handler();
 8000cbe:	f000 f97f 	bl	8000fc0 <Error_Handler>
	}
	/* USER CODE BEGIN OPAMP3_Init 2 */

	/* USER CODE END OPAMP3_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2001db08 	.word	0x2001db08
 8000ccc:	40010308 	.word	0x40010308

08000cd0 <MX_OPAMP5_Init>:
 * @brief OPAMP5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_OPAMP5_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	/* USER CODE END OPAMP5_Init 0 */

	/* USER CODE BEGIN OPAMP5_Init 1 */

	/* USER CODE END OPAMP5_Init 1 */
	hopamp5.Instance = OPAMP5;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_OPAMP5_Init+0x54>)
 8000cd6:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <MX_OPAMP5_Init+0x58>)
 8000cd8:	601a      	str	r2, [r3, #0]
	hopamp5.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_OPAMP5_Init+0x54>)
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	605a      	str	r2, [r3, #4]
	hopamp5.Init.Mode = OPAMP_PGA_MODE;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_OPAMP5_Init+0x54>)
 8000ce2:	2240      	movs	r2, #64	; 0x40
 8000ce4:	609a      	str	r2, [r3, #8]
	hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_OPAMP5_Init+0x54>)
 8000ce8:	2208      	movs	r2, #8
 8000cea:	611a      	str	r2, [r3, #16]
	hopamp5.Init.InternalOutput = ENABLE;
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <MX_OPAMP5_Init+0x54>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	751a      	strb	r2, [r3, #20]
	hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_OPAMP5_Init+0x54>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
	hopamp5.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <MX_OPAMP5_Init+0x54>)
 8000cfa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cfe:	625a      	str	r2, [r3, #36]	; 0x24
	hopamp5.Init.PgaGain = OPAMP_PGA_GAIN_64_OR_MINUS_63;
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_OPAMP5_Init+0x54>)
 8000d02:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
	hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_OPAMP5_Init+0x54>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_OPAMP5_Init+0x54>)
 8000d10:	f003 fad2 	bl	80042b8 <HAL_OPAMP_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_OPAMP5_Init+0x4e>
	{
		Error_Handler();
 8000d1a:	f000 f951 	bl	8000fc0 <Error_Handler>
	}
	/* USER CODE BEGIN OPAMP5_Init 2 */

	/* USER CODE END OPAMP5_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2001de88 	.word	0x2001de88
 8000d28:	40010310 	.word	0x40010310

08000d2c <MX_OPAMP6_Init>:
 * @brief OPAMP6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_OPAMP6_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	/* USER CODE END OPAMP6_Init 0 */

	/* USER CODE BEGIN OPAMP6_Init 1 */

	/* USER CODE END OPAMP6_Init 1 */
	hopamp6.Instance = OPAMP6;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_OPAMP6_Init+0x50>)
 8000d32:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <MX_OPAMP6_Init+0x54>)
 8000d34:	601a      	str	r2, [r3, #0]
	hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_OPAMP6_Init+0x50>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	605a      	str	r2, [r3, #4]
	hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_OPAMP6_Init+0x50>)
 8000d3e:	2240      	movs	r2, #64	; 0x40
 8000d40:	609a      	str	r2, [r3, #8]
	hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_OPAMP6_Init+0x50>)
 8000d44:	2208      	movs	r2, #8
 8000d46:	611a      	str	r2, [r3, #16]
	hopamp6.Init.InternalOutput = ENABLE;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_OPAMP6_Init+0x50>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	751a      	strb	r2, [r3, #20]
	hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_OPAMP6_Init+0x50>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
	hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_OPAMP6_Init+0x50>)
 8000d56:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
	hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <MX_OPAMP6_Init+0x50>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
	hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_OPAMP6_Init+0x50>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_OPAMP6_Init+0x50>)
 8000d6a:	f003 faa5 	bl	80042b8 <HAL_OPAMP_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_OPAMP6_Init+0x4c>
	{
		Error_Handler();
 8000d74:	f000 f924 	bl	8000fc0 <Error_Handler>
	}
	/* USER CODE BEGIN OPAMP6_Init 2 */

	/* USER CODE END OPAMP6_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2001dd88 	.word	0x2001dd88
 8000d80:	40010314 	.word	0x40010314

08000d84 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <MX_DMA_Init+0x98>)
 8000d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d8e:	4a23      	ldr	r2, [pc, #140]	; (8000e1c <MX_DMA_Init+0x98>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	6493      	str	r3, [r2, #72]	; 0x48
 8000d96:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <MX_DMA_Init+0x98>)
 8000d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <MX_DMA_Init+0x98>)
 8000da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000da6:	4a1d      	ldr	r2, [pc, #116]	; (8000e1c <MX_DMA_Init+0x98>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6493      	str	r3, [r2, #72]	; 0x48
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_DMA_Init+0x98>)
 8000db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_DMA_Init+0x98>)
 8000dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dbe:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <MX_DMA_Init+0x98>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6493      	str	r3, [r2, #72]	; 0x48
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <MX_DMA_Init+0x98>)
 8000dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	200b      	movs	r0, #11
 8000dd8:	f002 fc7f 	bl	80036da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ddc:	200b      	movs	r0, #11
 8000dde:	f002 fc96 	bl	800370e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	200c      	movs	r0, #12
 8000de8:	f002 fc77 	bl	80036da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000dec:	200c      	movs	r0, #12
 8000dee:	f002 fc8e 	bl	800370e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	200d      	movs	r0, #13
 8000df8:	f002 fc6f 	bl	80036da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000dfc:	200d      	movs	r0, #13
 8000dfe:	f002 fc86 	bl	800370e <HAL_NVIC_EnableIRQ>
	/* DMA2_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2038      	movs	r0, #56	; 0x38
 8000e08:	f002 fc67 	bl	80036da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000e0c:	2038      	movs	r0, #56	; 0x38
 8000e0e:	f002 fc7e 	bl	800370e <HAL_NVIC_EnableIRQ>

}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000

08000e20 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <MX_GPIO_Init+0xd4>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a2e      	ldr	r2, [pc, #184]	; (8000ef4 <MX_GPIO_Init+0xd4>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <MX_GPIO_Init+0xd4>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4e:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <MX_GPIO_Init+0xd4>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	4a28      	ldr	r2, [pc, #160]	; (8000ef4 <MX_GPIO_Init+0xd4>)
 8000e54:	f043 0320 	orr.w	r3, r3, #32
 8000e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <MX_GPIO_Init+0xd4>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	f003 0320 	and.w	r3, r3, #32
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <MX_GPIO_Init+0xd4>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <MX_GPIO_Init+0xd4>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <MX_GPIO_Init+0xd4>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_GPIO_Init+0xd4>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <MX_GPIO_Init+0xd4>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_GPIO_Init+0xd4>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2120      	movs	r1, #32
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9e:	f003 f9b5 	bl	800420c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_GPIO_Init+0xd8>)
 8000eaa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4811      	ldr	r0, [pc, #68]	; (8000efc <MX_GPIO_Init+0xdc>)
 8000eb8:	f003 f826 	bl	8003f08 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000ebc:	2320      	movs	r3, #32
 8000ebe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed6:	f003 f817 	bl	8003f08 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2028      	movs	r0, #40	; 0x28
 8000ee0:	f002 fbfb 	bl	80036da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ee4:	2028      	movs	r0, #40	; 0x28
 8000ee6:	f002 fc12 	bl	800370e <HAL_NVIC_EnableIRQ>

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	10110000 	.word	0x10110000
 8000efc:	48000800 	.word	0x48000800

08000f00 <print5>:

/* USER CODE BEGIN 4 */
void print5(uint8_t string[])
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	strcpy(stroka,string);
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4808      	ldr	r0, [pc, #32]	; (8000f2c <print5+0x2c>)
 8000f0c:	f00a fecd 	bl	800bcaa <strcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*) string, strlen(string),10);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff f981 	bl	8000218 <strlen>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	4804      	ldr	r0, [pc, #16]	; (8000f30 <print5+0x30>)
 8000f20:	f005 ff26 	bl	8006d70 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&hlpuart1, (uint8_t*) string, strlen(string), 10);
	//HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\n", 1, 10);
	//HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r", 1, 10);
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2001dc98 	.word	0x2001dc98
 8000f30:	2001dcfc 	.word	0x2001dcfc

08000f34 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC5)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <HAL_ADC_ConvCpltCallback+0x54>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d105      	bne.n	8000f52 <HAL_ADC_ConvCpltCallback+0x1e>
	{

		HAL_ADC_Stop(&hadc5); // это необязательно
 8000f46:	4811      	ldr	r0, [pc, #68]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x58>)
 8000f48:	f001 f882 	bl	8002050 <HAL_ADC_Stop>
		flag3 =1;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	801a      	strh	r2, [r3, #0]

	}
	if(hadc->Instance == ADC2)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <HAL_ADC_ConvCpltCallback+0x60>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d105      	bne.n	8000f68 <HAL_ADC_ConvCpltCallback+0x34>
	{

		HAL_ADC_Stop(&hadc2); // это необязательно
 8000f5c:	480e      	ldr	r0, [pc, #56]	; (8000f98 <HAL_ADC_ConvCpltCallback+0x64>)
 8000f5e:	f001 f877 	bl	8002050 <HAL_ADC_Stop>
		flag2 =1;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_ADC_ConvCpltCallback+0x68>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	801a      	strh	r2, [r3, #0]

	}
	if(hadc->Instance == ADC4)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d105      	bne.n	8000f7e <HAL_ADC_ConvCpltCallback+0x4a>
	{

		HAL_ADC_Stop(&hadc4); // это необязательно
 8000f72:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000f74:	f001 f86c 	bl	8002050 <HAL_ADC_Stop>
		flag1 =1;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x74>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	801a      	strh	r2, [r3, #0]

	}
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	50000600 	.word	0x50000600
 8000f8c:	2001da08 	.word	0x2001da08
 8000f90:	2001d684 	.word	0x2001d684
 8000f94:	50000100 	.word	0x50000100
 8000f98:	2001d99c 	.word	0x2001d99c
 8000f9c:	2001d682 	.word	0x2001d682
 8000fa0:	50000500 	.word	0x50000500
 8000fa4:	2001df00 	.word	0x2001df00
 8000fa8:	2001d680 	.word	0x2001d680

08000fac <HAL_ADC_LevelOutOfWindowCallback>:
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
		//    		  HAL_UART_Transmit(&hlpuart1, (uint8_t*) snum, strlen(snum),10);
		// HAL_ADC_Stop_IT(&hadc3);
		//	HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t*) "1\n", 2);
		// HAL_ADC_Stop(&hadc3);
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_MspInit+0x64>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fda:	4a16      	ldr	r2, [pc, #88]	; (8001034 <HAL_MspInit+0x64>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_MspInit+0x64>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_MspInit+0x64>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	4a10      	ldr	r2, [pc, #64]	; (8001034 <HAL_MspInit+0x64>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_MspInit+0x64>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	2001      	movs	r0, #1
 800100c:	f002 fb65 	bl	80036da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8001010:	2001      	movs	r0, #1
 8001012:	f002 fb7c 	bl	800370e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2004      	movs	r0, #4
 800101c:	f002 fb5d 	bl	80036da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001020:	2004      	movs	r0, #4
 8001022:	f002 fb74 	bl	800370e <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001026:	f004 fec3 	bl	8005db0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a6a      	ldr	r2, [pc, #424]	; (80011f0 <HAL_ADC_MspInit+0x1b8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d140      	bne.n	80010cc <HAL_ADC_MspInit+0x94>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800104a:	4b6a      	ldr	r3, [pc, #424]	; (80011f4 <HAL_ADC_MspInit+0x1bc>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a69      	ldr	r2, [pc, #420]	; (80011f4 <HAL_ADC_MspInit+0x1bc>)
 8001050:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b67      	ldr	r3, [pc, #412]	; (80011f4 <HAL_ADC_MspInit+0x1bc>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697b      	ldr	r3, [r7, #20]

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8001062:	4b65      	ldr	r3, [pc, #404]	; (80011f8 <HAL_ADC_MspInit+0x1c0>)
 8001064:	4a65      	ldr	r2, [pc, #404]	; (80011fc <HAL_ADC_MspInit+0x1c4>)
 8001066:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001068:	4b63      	ldr	r3, [pc, #396]	; (80011f8 <HAL_ADC_MspInit+0x1c0>)
 800106a:	2224      	movs	r2, #36	; 0x24
 800106c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800106e:	4b62      	ldr	r3, [pc, #392]	; (80011f8 <HAL_ADC_MspInit+0x1c0>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001074:	4b60      	ldr	r3, [pc, #384]	; (80011f8 <HAL_ADC_MspInit+0x1c0>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800107a:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <HAL_ADC_MspInit+0x1c0>)
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001080:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <HAL_ADC_MspInit+0x1c0>)
 8001082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001086:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001088:	4b5b      	ldr	r3, [pc, #364]	; (80011f8 <HAL_ADC_MspInit+0x1c0>)
 800108a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800108e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001090:	4b59      	ldr	r3, [pc, #356]	; (80011f8 <HAL_ADC_MspInit+0x1c0>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001096:	4b58      	ldr	r3, [pc, #352]	; (80011f8 <HAL_ADC_MspInit+0x1c0>)
 8001098:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800109c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800109e:	4856      	ldr	r0, [pc, #344]	; (80011f8 <HAL_ADC_MspInit+0x1c0>)
 80010a0:	f002 fb50 	bl	8003744 <HAL_DMA_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80010aa:	f7ff ff89 	bl	8000fc0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a51      	ldr	r2, [pc, #324]	; (80011f8 <HAL_ADC_MspInit+0x1c0>)
 80010b2:	655a      	str	r2, [r3, #84]	; 0x54
 80010b4:	4a50      	ldr	r2, [pc, #320]	; (80011f8 <HAL_ADC_MspInit+0x1c0>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2012      	movs	r0, #18
 80010c0:	f002 fb0b 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010c4:	2012      	movs	r0, #18
 80010c6:	f002 fb22 	bl	800370e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80010ca:	e08c      	b.n	80011e6 <HAL_ADC_MspInit+0x1ae>
  else if(hadc->Instance==ADC4)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a4b      	ldr	r2, [pc, #300]	; (8001200 <HAL_ADC_MspInit+0x1c8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d141      	bne.n	800115a <HAL_ADC_MspInit+0x122>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80010d6:	4b4b      	ldr	r3, [pc, #300]	; (8001204 <HAL_ADC_MspInit+0x1cc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	4a49      	ldr	r2, [pc, #292]	; (8001204 <HAL_ADC_MspInit+0x1cc>)
 80010de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80010e0:	4b48      	ldr	r3, [pc, #288]	; (8001204 <HAL_ADC_MspInit+0x1cc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d10b      	bne.n	8001100 <HAL_ADC_MspInit+0xc8>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80010e8:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <HAL_ADC_MspInit+0x1bc>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ec:	4a41      	ldr	r2, [pc, #260]	; (80011f4 <HAL_ADC_MspInit+0x1bc>)
 80010ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f4:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <HAL_ADC_MspInit+0x1bc>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	693b      	ldr	r3, [r7, #16]
    hdma_adc4.Instance = DMA1_Channel2;
 8001100:	4b41      	ldr	r3, [pc, #260]	; (8001208 <HAL_ADC_MspInit+0x1d0>)
 8001102:	4a42      	ldr	r2, [pc, #264]	; (800120c <HAL_ADC_MspInit+0x1d4>)
 8001104:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8001106:	4b40      	ldr	r3, [pc, #256]	; (8001208 <HAL_ADC_MspInit+0x1d0>)
 8001108:	2226      	movs	r2, #38	; 0x26
 800110a:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <HAL_ADC_MspInit+0x1d0>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001112:	4b3d      	ldr	r3, [pc, #244]	; (8001208 <HAL_ADC_MspInit+0x1d0>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001118:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_ADC_MspInit+0x1d0>)
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800111e:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <HAL_ADC_MspInit+0x1d0>)
 8001120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001124:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_ADC_MspInit+0x1d0>)
 8001128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112c:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 800112e:	4b36      	ldr	r3, [pc, #216]	; (8001208 <HAL_ADC_MspInit+0x1d0>)
 8001130:	2200      	movs	r2, #0
 8001132:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001134:	4b34      	ldr	r3, [pc, #208]	; (8001208 <HAL_ADC_MspInit+0x1d0>)
 8001136:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800113a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800113c:	4832      	ldr	r0, [pc, #200]	; (8001208 <HAL_ADC_MspInit+0x1d0>)
 800113e:	f002 fb01 	bl	8003744 <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_ADC_MspInit+0x114>
      Error_Handler();
 8001148:	f7ff ff3a 	bl	8000fc0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a2e      	ldr	r2, [pc, #184]	; (8001208 <HAL_ADC_MspInit+0x1d0>)
 8001150:	655a      	str	r2, [r3, #84]	; 0x54
 8001152:	4a2d      	ldr	r2, [pc, #180]	; (8001208 <HAL_ADC_MspInit+0x1d0>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001158:	e045      	b.n	80011e6 <HAL_ADC_MspInit+0x1ae>
  else if(hadc->Instance==ADC5)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a2c      	ldr	r2, [pc, #176]	; (8001210 <HAL_ADC_MspInit+0x1d8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d140      	bne.n	80011e6 <HAL_ADC_MspInit+0x1ae>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <HAL_ADC_MspInit+0x1cc>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a26      	ldr	r2, [pc, #152]	; (8001204 <HAL_ADC_MspInit+0x1cc>)
 800116c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <HAL_ADC_MspInit+0x1cc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d10b      	bne.n	800118e <HAL_ADC_MspInit+0x156>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <HAL_ADC_MspInit+0x1bc>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	4a1e      	ldr	r2, [pc, #120]	; (80011f4 <HAL_ADC_MspInit+0x1bc>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_ADC_MspInit+0x1bc>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel1;
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <HAL_ADC_MspInit+0x1dc>)
 8001190:	4a21      	ldr	r2, [pc, #132]	; (8001218 <HAL_ADC_MspInit+0x1e0>)
 8001192:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <HAL_ADC_MspInit+0x1dc>)
 8001196:	2227      	movs	r2, #39	; 0x27
 8001198:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_ADC_MspInit+0x1dc>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HAL_ADC_MspInit+0x1dc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_ADC_MspInit+0x1dc>)
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <HAL_ADC_MspInit+0x1dc>)
 80011ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b2:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_ADC_MspInit+0x1dc>)
 80011b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ba:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_ADC_MspInit+0x1dc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_ADC_MspInit+0x1dc>)
 80011c4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80011c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80011ca:	4812      	ldr	r0, [pc, #72]	; (8001214 <HAL_ADC_MspInit+0x1dc>)
 80011cc:	f002 faba 	bl	8003744 <HAL_DMA_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_ADC_MspInit+0x1a2>
      Error_Handler();
 80011d6:	f7ff fef3 	bl	8000fc0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <HAL_ADC_MspInit+0x1dc>)
 80011de:	655a      	str	r2, [r3, #84]	; 0x54
 80011e0:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <HAL_ADC_MspInit+0x1dc>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	50000100 	.word	0x50000100
 80011f4:	40021000 	.word	0x40021000
 80011f8:	2001df6c 	.word	0x2001df6c
 80011fc:	40020408 	.word	0x40020408
 8001200:	50000500 	.word	0x50000500
 8001204:	2001d688 	.word	0x2001d688
 8001208:	2001d8b0 	.word	0x2001d8b0
 800120c:	4002001c 	.word	0x4002001c
 8001210:	50000600 	.word	0x50000600
 8001214:	2001da74 	.word	0x2001da74
 8001218:	40020008 	.word	0x40020008

0800121c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08e      	sub	sp, #56	; 0x38
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a5b      	ldr	r2, [pc, #364]	; (80013a8 <HAL_UART_MspInit+0x18c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d152      	bne.n	80012e4 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800123e:	4b5b      	ldr	r3, [pc, #364]	; (80013ac <HAL_UART_MspInit+0x190>)
 8001240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001242:	4a5a      	ldr	r2, [pc, #360]	; (80013ac <HAL_UART_MspInit+0x190>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	65d3      	str	r3, [r2, #92]	; 0x5c
 800124a:	4b58      	ldr	r3, [pc, #352]	; (80013ac <HAL_UART_MspInit+0x190>)
 800124c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	623b      	str	r3, [r7, #32]
 8001254:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b55      	ldr	r3, [pc, #340]	; (80013ac <HAL_UART_MspInit+0x190>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a54      	ldr	r2, [pc, #336]	; (80013ac <HAL_UART_MspInit+0x190>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b52      	ldr	r3, [pc, #328]	; (80013ac <HAL_UART_MspInit+0x190>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800126e:	230c      	movs	r3, #12
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800127e:	230c      	movs	r3, #12
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f002 fe3c 	bl	8003f08 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 8001290:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_UART_MspInit+0x194>)
 8001292:	4a48      	ldr	r2, [pc, #288]	; (80013b4 <HAL_UART_MspInit+0x198>)
 8001294:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001296:	4b46      	ldr	r3, [pc, #280]	; (80013b0 <HAL_UART_MspInit+0x194>)
 8001298:	2223      	movs	r2, #35	; 0x23
 800129a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800129c:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <HAL_UART_MspInit+0x194>)
 800129e:	2210      	movs	r2, #16
 80012a0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a2:	4b43      	ldr	r3, [pc, #268]	; (80013b0 <HAL_UART_MspInit+0x194>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012a8:	4b41      	ldr	r3, [pc, #260]	; (80013b0 <HAL_UART_MspInit+0x194>)
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ae:	4b40      	ldr	r3, [pc, #256]	; (80013b0 <HAL_UART_MspInit+0x194>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012b4:	4b3e      	ldr	r3, [pc, #248]	; (80013b0 <HAL_UART_MspInit+0x194>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80012ba:	4b3d      	ldr	r3, [pc, #244]	; (80013b0 <HAL_UART_MspInit+0x194>)
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012c0:	4b3b      	ldr	r3, [pc, #236]	; (80013b0 <HAL_UART_MspInit+0x194>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80012c6:	483a      	ldr	r0, [pc, #232]	; (80013b0 <HAL_UART_MspInit+0x194>)
 80012c8:	f002 fa3c 	bl	8003744 <HAL_DMA_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 80012d2:	f7ff fe75 	bl	8000fc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a35      	ldr	r2, [pc, #212]	; (80013b0 <HAL_UART_MspInit+0x194>)
 80012da:	675a      	str	r2, [r3, #116]	; 0x74
 80012dc:	4a34      	ldr	r2, [pc, #208]	; (80013b0 <HAL_UART_MspInit+0x194>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012e2:	e05d      	b.n	80013a0 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <HAL_UART_MspInit+0x19c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d12a      	bne.n	8001344 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ee:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <HAL_UART_MspInit+0x190>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f2:	4a2e      	ldr	r2, [pc, #184]	; (80013ac <HAL_UART_MspInit+0x190>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f8:	6613      	str	r3, [r2, #96]	; 0x60
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <HAL_UART_MspInit+0x190>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <HAL_UART_MspInit+0x190>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a28      	ldr	r2, [pc, #160]	; (80013ac <HAL_UART_MspInit+0x190>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <HAL_UART_MspInit+0x190>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800131e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001330:	2307      	movs	r3, #7
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f002 fde3 	bl	8003f08 <HAL_GPIO_Init>
}
 8001342:	e02d      	b.n	80013a0 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <HAL_UART_MspInit+0x1a0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d128      	bne.n	80013a0 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_UART_MspInit+0x190>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	4a16      	ldr	r2, [pc, #88]	; (80013ac <HAL_UART_MspInit+0x190>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001358:	6593      	str	r3, [r2, #88]	; 0x58
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <HAL_UART_MspInit+0x190>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_UART_MspInit+0x190>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	4a10      	ldr	r2, [pc, #64]	; (80013ac <HAL_UART_MspInit+0x190>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_UART_MspInit+0x190>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800137e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001390:	2307      	movs	r3, #7
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	4619      	mov	r1, r3
 800139a:	4809      	ldr	r0, [pc, #36]	; (80013c0 <HAL_UART_MspInit+0x1a4>)
 800139c:	f002 fdb4 	bl	8003f08 <HAL_GPIO_Init>
}
 80013a0:	bf00      	nop
 80013a2:	3738      	adds	r7, #56	; 0x38
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40008000 	.word	0x40008000
 80013ac:	40021000 	.word	0x40021000
 80013b0:	2001de28 	.word	0x2001de28
 80013b4:	40020030 	.word	0x40020030
 80013b8:	40013800 	.word	0x40013800
 80013bc:	40004800 	.word	0x40004800
 80013c0:	48000800 	.word	0x48000800

080013c4 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	; 0x30
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP3)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a46      	ldr	r2, [pc, #280]	; (80014fc <HAL_OPAMP_MspInit+0x138>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d118      	bne.n	8001418 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP3_MspInit 0 */

  /* USER CODE END OPAMP3_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b46      	ldr	r3, [pc, #280]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a45      	ldr	r2, [pc, #276]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b43      	ldr	r3, [pc, #268]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP3 GPIO Configuration
    PB0     ------> OPAMP3_VINP
    PB2     ------> OPAMP3_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80013fe:	2305      	movs	r3, #5
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001402:	2303      	movs	r3, #3
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4619      	mov	r1, r3
 8001410:	483c      	ldr	r0, [pc, #240]	; (8001504 <HAL_OPAMP_MspInit+0x140>)
 8001412:	f002 fd79 	bl	8003f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8001416:	e06d      	b.n	80014f4 <HAL_OPAMP_MspInit+0x130>
  else if(hopamp->Instance==OPAMP5)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a3a      	ldr	r2, [pc, #232]	; (8001508 <HAL_OPAMP_MspInit+0x144>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d131      	bne.n	8001486 <HAL_OPAMP_MspInit+0xc2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	4b37      	ldr	r3, [pc, #220]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a36      	ldr	r2, [pc, #216]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b34      	ldr	r3, [pc, #208]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	4b31      	ldr	r3, [pc, #196]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	4a30      	ldr	r2, [pc, #192]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001452:	2308      	movs	r3, #8
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001456:	2303      	movs	r3, #3
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	4829      	ldr	r0, [pc, #164]	; (800150c <HAL_OPAMP_MspInit+0x148>)
 8001466:	f002 fd4f 	bl	8003f08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800146a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	4821      	ldr	r0, [pc, #132]	; (8001504 <HAL_OPAMP_MspInit+0x140>)
 8001480:	f002 fd42 	bl	8003f08 <HAL_GPIO_Init>
}
 8001484:	e036      	b.n	80014f4 <HAL_OPAMP_MspInit+0x130>
  else if(hopamp->Instance==OPAMP6)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a21      	ldr	r2, [pc, #132]	; (8001510 <HAL_OPAMP_MspInit+0x14c>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d131      	bne.n	80014f4 <HAL_OPAMP_MspInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	4a1a      	ldr	r2, [pc, #104]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_OPAMP_MspInit+0x13c>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c4:	2303      	movs	r3, #3
 80014c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	4619      	mov	r1, r3
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d6:	f002 fd17 	bl	8003f08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e0:	2303      	movs	r3, #3
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <HAL_OPAMP_MspInit+0x140>)
 80014f0:	f002 fd0a 	bl	8003f08 <HAL_GPIO_Init>
}
 80014f4:	bf00      	nop
 80014f6:	3730      	adds	r7, #48	; 0x30
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40010308 	.word	0x40010308
 8001500:	40021000 	.word	0x40021000
 8001504:	48000400 	.word	0x48000400
 8001508:	40010310 	.word	0x40010310
 800150c:	48000800 	.word	0x48000800
 8001510:	40010314 	.word	0x40010314

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <HardFault_Handler+0x4>

08001528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <MemManage_Handler+0x4>

0800152e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <BusFault_Handler+0x4>

08001534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <UsageFault_Handler+0x4>

0800153a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001568:	f000 f8e4 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/38/39/40/41.
  */
void PVD_PVM_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8001574:	f004 fbc2 	bl	8005cfc <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001580:	f002 fb52 	bl	8003c28 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <DMA1_Channel1_IRQHandler+0x10>)
 800158e:	f002 f9fc 	bl	800398a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2001da74 	.word	0x2001da74

0800159c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <DMA1_Channel2_IRQHandler+0x10>)
 80015a2:	f002 f9f2 	bl	800398a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2001d8b0 	.word	0x2001d8b0

080015b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <DMA1_Channel3_IRQHandler+0x10>)
 80015b6:	f002 f9e8 	bl	800398a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2001de28 	.word	0x2001de28

080015c4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <ADC1_2_IRQHandler+0x10>)
 80015ca:	f000 fe43 	bl	8002254 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2001d99c 	.word	0x2001d99c

080015d8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <USB_LP_IRQHandler+0x10>)
 80015de:	f003 f873 	bl	80046c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2001f3a0 	.word	0x2001f3a0

080015ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015f4:	f002 fe3c 	bl	8004270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}

080015fc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <DMA2_Channel1_IRQHandler+0x10>)
 8001602:	f002 f9c2 	bl	800398a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2001df6c 	.word	0x2001df6c

08001610 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <SystemInit+0x28>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <SystemInit+0x28>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SystemInit+0x28>)
 8001626:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800162a:	609a      	str	r2, [r3, #8]
#endif
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800163c:	480d      	ldr	r0, [pc, #52]	; (8001674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800163e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <LoopForever+0x6>)
  ldr r1, =_edata
 8001642:	490e      	ldr	r1, [pc, #56]	; (800167c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <LoopForever+0xe>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001658:	4c0b      	ldr	r4, [pc, #44]	; (8001688 <LoopForever+0x16>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001666:	f7ff ffd3 	bl	8001610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166a:	f00a fac9 	bl	800bc00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800166e:	f7fe ff57 	bl	8000520 <main>

08001672 <LoopForever>:

LoopForever:
    b LoopForever
 8001672:	e7fe      	b.n	8001672 <LoopForever>
  ldr   r0, =_estack
 8001674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8001680:	0800be30 	.word	0x0800be30
  ldr r2, =_sbss
 8001684:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8001688:	2001f694 	.word	0x2001f694

0800168c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC3_IRQHandler>

0800168e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001698:	2003      	movs	r0, #3
 800169a:	f002 f813 	bl	80036c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800169e:	2000      	movs	r0, #0
 80016a0:	f000 f80e 	bl	80016c0 <HAL_InitTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	e001      	b.n	80016b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016b0:	f7ff fc8e 	bl	8000fd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016b4:	79fb      	ldrb	r3, [r7, #7]

}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_InitTick+0x68>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d022      	beq.n	800171a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_InitTick+0x6c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_InitTick+0x68>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 f81e 	bl	800372a <HAL_SYSTICK_Config>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10f      	bne.n	8001714 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	d809      	bhi.n	800170e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fa:	2200      	movs	r2, #0
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001702:	f001 ffea 	bl	80036da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_InitTick+0x70>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	e007      	b.n	800171e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e004      	b.n	800171e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	e001      	b.n	800171e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000008 	.word	0x20000008
 800172c:	20000000 	.word	0x20000000
 8001730:	20000004 	.word	0x20000004

08001734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_IncTick+0x1c>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_IncTick+0x20>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4413      	add	r3, r2
 8001742:	4a03      	ldr	r2, [pc, #12]	; (8001750 <HAL_IncTick+0x1c>)
 8001744:	6013      	str	r3, [r2, #0]
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	2001dfcc 	.word	0x2001dfcc
 8001754:	20000008 	.word	0x20000008

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2001dfcc 	.word	0x2001dfcc

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d004      	beq.n	8001794 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_Delay+0x40>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001794:	bf00      	nop
 8001796:	f7ff ffdf 	bl	8001758 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d8f7      	bhi.n	8001796 <HAL_Delay+0x26>
  {
  }
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000008 	.word	0x20000008

080017b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	609a      	str	r2, [r3, #8]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	609a      	str	r2, [r3, #8]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3360      	adds	r3, #96	; 0x60
 800182e:	461a      	mov	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <LL_ADC_SetOffset+0x44>)
 800183e:	4013      	ands	r3, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	4313      	orrs	r3, r2
 800184c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001854:	bf00      	nop
 8001856:	371c      	adds	r7, #28
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	03fff000 	.word	0x03fff000

08001864 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3360      	adds	r3, #96	; 0x60
 8001872:	461a      	mov	r2, r3
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3360      	adds	r3, #96	; 0x60
 80018a0:	461a      	mov	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018ba:	bf00      	nop
 80018bc:	371c      	adds	r7, #28
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b087      	sub	sp, #28
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3360      	adds	r3, #96	; 0x60
 80018d6:	461a      	mov	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80018f0:	bf00      	nop
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3360      	adds	r3, #96	; 0x60
 800190c:	461a      	mov	r2, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001926:	bf00      	nop
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	615a      	str	r2, [r3, #20]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800197e:	b480      	push	{r7}
 8001980:	b087      	sub	sp, #28
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3330      	adds	r3, #48	; 0x30
 800198e:	461a      	mov	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	4413      	add	r3, r2
 800199c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f003 031f 	and.w	r3, r3, #31
 80019a8:	211f      	movs	r1, #31
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	401a      	ands	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	0e9b      	lsrs	r3, r3, #26
 80019b6:	f003 011f 	and.w	r1, r3, #31
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	431a      	orrs	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019ca:	bf00      	nop
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3314      	adds	r3, #20
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	0e5b      	lsrs	r3, r3, #25
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	0d1b      	lsrs	r3, r3, #20
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2107      	movs	r1, #7
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	401a      	ands	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	0d1b      	lsrs	r3, r3, #20
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	431a      	orrs	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a46:	bf00      	nop
 8001a48:	371c      	adds	r7, #28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0318 	and.w	r3, r3, #24
 8001a76:	4908      	ldr	r1, [pc, #32]	; (8001a98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a78:	40d9      	lsrs	r1, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a82:	431a      	orrs	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	0007ffff 	.word	0x0007ffff

08001a9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ae4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6093      	str	r3, [r2, #8]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b5c:	d101      	bne.n	8001b62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ba8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bac:	f043 0202 	orr.w	r2, r3, #2
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <LL_ADC_IsEnabled+0x18>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <LL_ADC_IsEnabled+0x1a>
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d101      	bne.n	8001bfe <LL_ADC_IsDisableOngoing+0x18>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <LL_ADC_IsDisableOngoing+0x1a>
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c20:	f043 0204 	orr.w	r2, r3, #4
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c48:	f043 0210 	orr.w	r2, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d101      	bne.n	8001c74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c96:	f043 0220 	orr.w	r2, r3, #32
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d101      	bne.n	8001cc2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e1ad      	b.n	8002046 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fef1 	bl	8001af8 <LL_ADC_IsDeepPowerDownEnabled>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d004      	beq.n	8001d26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fed7 	bl	8001ad4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff0c 	bl	8001b48 <LL_ADC_IsInternalRegulatorEnabled>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d113      	bne.n	8001d5e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fef0 	bl	8001b20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d40:	4b9e      	ldr	r3, [pc, #632]	; (8001fbc <HAL_ADC_Init+0x2ec>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	099b      	lsrs	r3, r3, #6
 8001d46:	4a9e      	ldr	r2, [pc, #632]	; (8001fc0 <HAL_ADC_Init+0x2f0>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d50:	e002      	b.n	8001d58 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f9      	bne.n	8001d52 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fef0 	bl	8001b48 <LL_ADC_IsInternalRegulatorEnabled>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10d      	bne.n	8001d8a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	f043 0210 	orr.w	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff64 	bl	8001c5c <LL_ADC_REG_IsConversionOngoing>
 8001d94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 8148 	bne.w	8002034 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 8144 	bne.w	8002034 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001db4:	f043 0202 	orr.w	r2, r3, #2
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fefd 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d141      	bne.n	8001e50 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dd4:	d004      	beq.n	8001de0 <HAL_ADC_Init+0x110>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a7a      	ldr	r2, [pc, #488]	; (8001fc4 <HAL_ADC_Init+0x2f4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d10f      	bne.n	8001e00 <HAL_ADC_Init+0x130>
 8001de0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001de4:	f7ff feec 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001de8:	4604      	mov	r4, r0
 8001dea:	4876      	ldr	r0, [pc, #472]	; (8001fc4 <HAL_ADC_Init+0x2f4>)
 8001dec:	f7ff fee8 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4323      	orrs	r3, r4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf0c      	ite	eq
 8001df8:	2301      	moveq	r3, #1
 8001dfa:	2300      	movne	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	e012      	b.n	8001e26 <HAL_ADC_Init+0x156>
 8001e00:	4871      	ldr	r0, [pc, #452]	; (8001fc8 <HAL_ADC_Init+0x2f8>)
 8001e02:	f7ff fedd 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001e06:	4604      	mov	r4, r0
 8001e08:	4870      	ldr	r0, [pc, #448]	; (8001fcc <HAL_ADC_Init+0x2fc>)
 8001e0a:	f7ff fed9 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	431c      	orrs	r4, r3
 8001e12:	486f      	ldr	r0, [pc, #444]	; (8001fd0 <HAL_ADC_Init+0x300>)
 8001e14:	f7ff fed4 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4323      	orrs	r3, r4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d012      	beq.n	8001e50 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e32:	d004      	beq.n	8001e3e <HAL_ADC_Init+0x16e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a62      	ldr	r2, [pc, #392]	; (8001fc4 <HAL_ADC_Init+0x2f4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Init+0x172>
 8001e3e:	4a65      	ldr	r2, [pc, #404]	; (8001fd4 <HAL_ADC_Init+0x304>)
 8001e40:	e000      	b.n	8001e44 <HAL_ADC_Init+0x174>
 8001e42:	4a65      	ldr	r2, [pc, #404]	; (8001fd8 <HAL_ADC_Init+0x308>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	f7ff fcb2 	bl	80017b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7f5b      	ldrb	r3, [r3, #29]
 8001e54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e6e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d106      	bne.n	8001e8c <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	3b01      	subs	r3, #1
 8001e84:	045b      	lsls	r3, r3, #17
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d009      	beq.n	8001ea8 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	4b4b      	ldr	r3, [pc, #300]	; (8001fdc <HAL_ADC_Init+0x30c>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	69b9      	ldr	r1, [r7, #24]
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fec0 	bl	8001c5c <LL_ADC_REG_IsConversionOngoing>
 8001edc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fee1 	bl	8001caa <LL_ADC_INJ_IsConversionOngoing>
 8001ee8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d17f      	bne.n	8001ff0 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d17c      	bne.n	8001ff0 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001efa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f02:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f12:	f023 0302 	bic.w	r3, r3, #2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	69b9      	ldr	r1, [r7, #24]
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d017      	beq.n	8001f58 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f40:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6911      	ldr	r1, [r2, #16]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001f56:	e013      	b.n	8001f80 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f7c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d12a      	bne.n	8001fe0 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fa0:	4311      	orrs	r1, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fa6:	4311      	orrs	r1, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fac:	430a      	orrs	r2, r1
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	611a      	str	r2, [r3, #16]
 8001fba:	e019      	b.n	8001ff0 <HAL_ADC_Init+0x320>
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	053e2d63 	.word	0x053e2d63
 8001fc4:	50000100 	.word	0x50000100
 8001fc8:	50000400 	.word	0x50000400
 8001fcc:	50000500 	.word	0x50000500
 8001fd0:	50000600 	.word	0x50000600
 8001fd4:	50000300 	.word	0x50000300
 8001fd8:	50000700 	.word	0x50000700
 8001fdc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10c      	bne.n	8002012 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f023 010f 	bic.w	r1, r3, #15
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	1e5a      	subs	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
 8002010:	e007      	b.n	8002022 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 020f 	bic.w	r2, r2, #15
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	65da      	str	r2, [r3, #92]	; 0x5c
 8002032:	e007      	b.n	8002044 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	f043 0210 	orr.w	r2, r3, #16
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002044:	7ffb      	ldrb	r3, [r7, #31]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd90      	pop	{r4, r7, pc}
 800204e:	bf00      	nop

08002050 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_ADC_Stop+0x16>
 8002062:	2302      	movs	r3, #2
 8002064:	e023      	b.n	80020ae <HAL_ADC_Stop+0x5e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800206e:	2103      	movs	r1, #3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 ff9b 	bl	8002fac <ADC_ConversionStop>
 8002076:	4603      	mov	r3, r0
 8002078:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d111      	bne.n	80020a4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f001 f8a1 	bl	80031c8 <ADC_Disable>
 8002086:	4603      	mov	r3, r0
 8002088:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	f043 0201 	orr.w	r2, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020cc:	d004      	beq.n	80020d8 <HAL_ADC_Start_DMA+0x20>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a58      	ldr	r2, [pc, #352]	; (8002234 <HAL_ADC_Start_DMA+0x17c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_Start_DMA+0x24>
 80020d8:	4b57      	ldr	r3, [pc, #348]	; (8002238 <HAL_ADC_Start_DMA+0x180>)
 80020da:	e000      	b.n	80020de <HAL_ADC_Start_DMA+0x26>
 80020dc:	4b57      	ldr	r3, [pc, #348]	; (800223c <HAL_ADC_Start_DMA+0x184>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fcdc 	bl	8001a9c <LL_ADC_GetMultimode>
 80020e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fdb6 	bl	8001c5c <LL_ADC_REG_IsConversionOngoing>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 8096 	bne.w	8002224 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_ADC_Start_DMA+0x4e>
 8002102:	2302      	movs	r3, #2
 8002104:	e091      	b.n	800222a <HAL_ADC_Start_DMA+0x172>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	2b05      	cmp	r3, #5
 8002118:	d002      	beq.n	8002120 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b09      	cmp	r3, #9
 800211e:	d17a      	bne.n	8002216 <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 fff7 	bl	8003114 <ADC_Enable>
 8002126:	4603      	mov	r3, r0
 8002128:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800212a:	7dfb      	ldrb	r3, [r7, #23]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d16d      	bne.n	800220c <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a3a      	ldr	r2, [pc, #232]	; (8002234 <HAL_ADC_Start_DMA+0x17c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_ADC_Start_DMA+0xaa>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a3b      	ldr	r2, [pc, #236]	; (8002240 <HAL_ADC_Start_DMA+0x188>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d002      	beq.n	800215e <HAL_ADC_Start_DMA+0xa6>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	e003      	b.n	8002166 <HAL_ADC_Start_DMA+0xae>
 800215e:	4b39      	ldr	r3, [pc, #228]	; (8002244 <HAL_ADC_Start_DMA+0x18c>)
 8002160:	e001      	b.n	8002166 <HAL_ADC_Start_DMA+0xae>
 8002162:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	4293      	cmp	r3, r2
 800216c:	d002      	beq.n	8002174 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d105      	bne.n	8002180 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002190:	f023 0206 	bic.w	r2, r3, #6
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	661a      	str	r2, [r3, #96]	; 0x60
 8002198:	e002      	b.n	80021a0 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <HAL_ADC_Start_DMA+0x190>)
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	4a27      	ldr	r2, [pc, #156]	; (800224c <HAL_ADC_Start_DMA+0x194>)
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b4:	4a26      	ldr	r2, [pc, #152]	; (8002250 <HAL_ADC_Start_DMA+0x198>)
 80021b6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	221c      	movs	r2, #28
 80021be:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0210 	orr.w	r2, r2, #16
 80021d6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0201 	orr.w	r2, r2, #1
 80021e6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3340      	adds	r3, #64	; 0x40
 80021f2:	4619      	mov	r1, r3
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f001 fb4c 	bl	8003894 <HAL_DMA_Start_IT>
 80021fc:	4603      	mov	r3, r0
 80021fe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fd01 	bl	8001c0c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800220a:	e00d      	b.n	8002228 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002214:	e008      	b.n	8002228 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002222:	e001      	b.n	8002228 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002224:	2302      	movs	r3, #2
 8002226:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002228:	7dfb      	ldrb	r3, [r7, #23]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	50000100 	.word	0x50000100
 8002238:	50000300 	.word	0x50000300
 800223c:	50000700 	.word	0x50000700
 8002240:	50000500 	.word	0x50000500
 8002244:	50000400 	.word	0x50000400
 8002248:	08003279 	.word	0x08003279
 800224c:	08003351 	.word	0x08003351
 8002250:	0800336d 	.word	0x0800336d

08002254 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002278:	d004      	beq.n	8002284 <HAL_ADC_IRQHandler+0x30>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a95      	ldr	r2, [pc, #596]	; (80024d4 <HAL_ADC_IRQHandler+0x280>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d101      	bne.n	8002288 <HAL_ADC_IRQHandler+0x34>
 8002284:	4b94      	ldr	r3, [pc, #592]	; (80024d8 <HAL_ADC_IRQHandler+0x284>)
 8002286:	e000      	b.n	800228a <HAL_ADC_IRQHandler+0x36>
 8002288:	4b94      	ldr	r3, [pc, #592]	; (80024dc <HAL_ADC_IRQHandler+0x288>)
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fc06 	bl	8001a9c <LL_ADC_GetMultimode>
 8002290:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d017      	beq.n	80022cc <HAL_ADC_IRQHandler+0x78>
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d012      	beq.n	80022cc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f001 f926 	bl	8003510 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2202      	movs	r2, #2
 80022ca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d004      	beq.n	80022e0 <HAL_ADC_IRQHandler+0x8c>
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10b      	bne.n	80022f8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8094 	beq.w	8002414 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 808e 	beq.w	8002414 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fb1f 	bl	8001958 <LL_ADC_REG_IsTriggerSourceSWStart>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d072      	beq.n	8002406 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a6b      	ldr	r2, [pc, #428]	; (80024d4 <HAL_ADC_IRQHandler+0x280>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d009      	beq.n	800233e <HAL_ADC_IRQHandler+0xea>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a6c      	ldr	r2, [pc, #432]	; (80024e0 <HAL_ADC_IRQHandler+0x28c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d002      	beq.n	800233a <HAL_ADC_IRQHandler+0xe6>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	e003      	b.n	8002342 <HAL_ADC_IRQHandler+0xee>
 800233a:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <HAL_ADC_IRQHandler+0x290>)
 800233c:	e001      	b.n	8002342 <HAL_ADC_IRQHandler+0xee>
 800233e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	4293      	cmp	r3, r2
 8002348:	d008      	beq.n	800235c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2b05      	cmp	r3, #5
 8002354:	d002      	beq.n	800235c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b09      	cmp	r3, #9
 800235a:	d104      	bne.n	8002366 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	623b      	str	r3, [r7, #32]
 8002364:	e014      	b.n	8002390 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a5a      	ldr	r2, [pc, #360]	; (80024d4 <HAL_ADC_IRQHandler+0x280>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d009      	beq.n	8002384 <HAL_ADC_IRQHandler+0x130>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a5a      	ldr	r2, [pc, #360]	; (80024e0 <HAL_ADC_IRQHandler+0x28c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d002      	beq.n	8002380 <HAL_ADC_IRQHandler+0x12c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	e003      	b.n	8002388 <HAL_ADC_IRQHandler+0x134>
 8002380:	4b58      	ldr	r3, [pc, #352]	; (80024e4 <HAL_ADC_IRQHandler+0x290>)
 8002382:	e001      	b.n	8002388 <HAL_ADC_IRQHandler+0x134>
 8002384:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002388:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d135      	bne.n	8002406 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d12e      	bne.n	8002406 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fc55 	bl	8001c5c <LL_ADC_REG_IsConversionOngoing>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d11a      	bne.n	80023ee <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 020c 	bic.w	r2, r2, #12
 80023c6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d112      	bne.n	8002406 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	f043 0201 	orr.w	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80023ec:	e00b      	b.n	8002406 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	f043 0210 	orr.w	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe fd94 	bl	8000f34 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	220c      	movs	r2, #12
 8002412:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d004      	beq.n	8002428 <HAL_ADC_IRQHandler+0x1d4>
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10b      	bne.n	8002440 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80b2 	beq.w	8002598 <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80ac 	beq.w	8002598 <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	d105      	bne.n	8002458 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff faba 	bl	80019d6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002462:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fa75 	bl	8001958 <LL_ADC_REG_IsTriggerSourceSWStart>
 800246e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <HAL_ADC_IRQHandler+0x280>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d009      	beq.n	800248e <HAL_ADC_IRQHandler+0x23a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a18      	ldr	r2, [pc, #96]	; (80024e0 <HAL_ADC_IRQHandler+0x28c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d002      	beq.n	800248a <HAL_ADC_IRQHandler+0x236>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	e003      	b.n	8002492 <HAL_ADC_IRQHandler+0x23e>
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <HAL_ADC_IRQHandler+0x290>)
 800248c:	e001      	b.n	8002492 <HAL_ADC_IRQHandler+0x23e>
 800248e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	4293      	cmp	r3, r2
 8002498:	d008      	beq.n	80024ac <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d002      	beq.n	80024ac <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b07      	cmp	r3, #7
 80024aa:	d104      	bne.n	80024b6 <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	623b      	str	r3, [r7, #32]
 80024b4:	e01e      	b.n	80024f4 <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a06      	ldr	r2, [pc, #24]	; (80024d4 <HAL_ADC_IRQHandler+0x280>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d013      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x294>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a06      	ldr	r2, [pc, #24]	; (80024e0 <HAL_ADC_IRQHandler+0x28c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d002      	beq.n	80024d0 <HAL_ADC_IRQHandler+0x27c>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	e00d      	b.n	80024ec <HAL_ADC_IRQHandler+0x298>
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <HAL_ADC_IRQHandler+0x290>)
 80024d2:	e00b      	b.n	80024ec <HAL_ADC_IRQHandler+0x298>
 80024d4:	50000100 	.word	0x50000100
 80024d8:	50000300 	.word	0x50000300
 80024dc:	50000700 	.word	0x50000700
 80024e0:	50000500 	.word	0x50000500
 80024e4:	50000400 	.word	0x50000400
 80024e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024ec:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <HAL_ADC_IRQHandler+0x2c0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002500:	2b00      	cmp	r3, #0
 8002502:	d142      	bne.n	800258a <HAL_ADC_IRQHandler+0x336>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d03f      	beq.n	800258a <HAL_ADC_IRQHandler+0x336>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d13a      	bne.n	800258a <HAL_ADC_IRQHandler+0x336>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251e:	2b40      	cmp	r3, #64	; 0x40
 8002520:	d133      	bne.n	800258a <HAL_ADC_IRQHandler+0x336>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d12e      	bne.n	800258a <HAL_ADC_IRQHandler+0x336>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fbba 	bl	8001caa <LL_ADC_INJ_IsConversionOngoing>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d11a      	bne.n	8002572 <HAL_ADC_IRQHandler+0x31e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800254a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d112      	bne.n	800258a <HAL_ADC_IRQHandler+0x336>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	f043 0201 	orr.w	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002570:	e00b      	b.n	800258a <HAL_ADC_IRQHandler+0x336>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002576:	f043 0210 	orr.w	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 ff98 	bl	80034c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2260      	movs	r2, #96	; 0x60
 8002596:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d011      	beq.n	80025c6 <HAL_ADC_IRQHandler+0x372>
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00c      	beq.n	80025c6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7fe fcf7 	bl	8000fac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d012      	beq.n	80025f6 <HAL_ADC_IRQHandler+0x3a2>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 ff7e 	bl	80034e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d012      	beq.n	8002626 <HAL_ADC_IRQHandler+0x3d2>
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00d      	beq.n	8002626 <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 ff70 	bl	80034fc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002624:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b00      	cmp	r3, #0
 800262e:	d043      	beq.n	80026b8 <HAL_ADC_IRQHandler+0x464>
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	d03e      	beq.n	80026b8 <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 8002642:	2301      	movs	r3, #1
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
 8002646:	e021      	b.n	800268c <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d015      	beq.n	800267a <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002656:	d004      	beq.n	8002662 <HAL_ADC_IRQHandler+0x40e>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a27      	ldr	r2, [pc, #156]	; (80026fc <HAL_ADC_IRQHandler+0x4a8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_ADC_IRQHandler+0x412>
 8002662:	4b27      	ldr	r3, [pc, #156]	; (8002700 <HAL_ADC_IRQHandler+0x4ac>)
 8002664:	e000      	b.n	8002668 <HAL_ADC_IRQHandler+0x414>
 8002666:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_ADC_IRQHandler+0x4b0>)
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fa25 	bl	8001ab8 <LL_ADC_GetMultiDMATransfer>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00b      	beq.n	800268c <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8002674:	2301      	movs	r3, #1
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
 8002678:	e008      	b.n	800268c <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8002688:	2301      	movs	r3, #1
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	2b01      	cmp	r3, #1
 8002690:	d10e      	bne.n	80026b0 <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a2:	f043 0202 	orr.w	r2, r3, #2
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f836 	bl	800271c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2210      	movs	r2, #16
 80026b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d018      	beq.n	80026f4 <HAL_ADC_IRQHandler+0x4a0>
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026dc:	f043 0208 	orr.w	r2, r3, #8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ec:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fef0 	bl	80034d4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80026f4:	bf00      	nop
 80026f6:	3728      	adds	r7, #40	; 0x28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	50000100 	.word	0x50000100
 8002700:	50000300 	.word	0x50000300
 8002704:	50000700 	.word	0x50000700

08002708 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b0b6      	sub	sp, #216	; 0xd8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800274a:	2b01      	cmp	r3, #1
 800274c:	d102      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x24>
 800274e:	2302      	movs	r3, #2
 8002750:	f000 bc12 	b.w	8002f78 <HAL_ADC_ConfigChannel+0x848>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fa7b 	bl	8001c5c <LL_ADC_REG_IsConversionOngoing>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 83f2 	bne.w	8002f52 <HAL_ADC_ConfigChannel+0x822>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6859      	ldr	r1, [r3, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	f7ff f8ff 	bl	800197e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fa69 	bl	8001c5c <LL_ADC_REG_IsConversionOngoing>
 800278a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fa89 	bl	8001caa <LL_ADC_INJ_IsConversionOngoing>
 8002798:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800279c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f040 81d9 	bne.w	8002b58 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f040 81d4 	bne.w	8002b58 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027b8:	d10f      	bne.n	80027da <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2200      	movs	r2, #0
 80027c4:	4619      	mov	r1, r3
 80027c6:	f7ff f919 	bl	80019fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff f8ad 	bl	8001932 <LL_ADC_SetSamplingTimeCommonConfig>
 80027d8:	e00e      	b.n	80027f8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6819      	ldr	r1, [r3, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f7ff f908 	bl	80019fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f89d 	bl	8001932 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	08db      	lsrs	r3, r3, #3
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b04      	cmp	r3, #4
 8002818:	d022      	beq.n	8002860 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6919      	ldr	r1, [r3, #16]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800282a:	f7fe fff7 	bl	800181c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6919      	ldr	r1, [r3, #16]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	461a      	mov	r2, r3
 800283c:	f7ff f843 	bl	80018c6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6919      	ldr	r1, [r3, #16]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	7f1b      	ldrb	r3, [r3, #28]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d102      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x126>
 8002850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002854:	e000      	b.n	8002858 <HAL_ADC_ConfigChannel+0x128>
 8002856:	2300      	movs	r3, #0
 8002858:	461a      	mov	r2, r3
 800285a:	f7ff f84f 	bl	80018fc <LL_ADC_SetOffsetSaturation>
 800285e:	e17b      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fffc 	bl	8001864 <LL_ADC_GetOffsetChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10a      	bne.n	800288c <HAL_ADC_ConfigChannel+0x15c>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fff1 	bl	8001864 <LL_ADC_GetOffsetChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	0e9b      	lsrs	r3, r3, #26
 8002886:	f003 021f 	and.w	r2, r3, #31
 800288a:	e01e      	b.n	80028ca <HAL_ADC_ConfigChannel+0x19a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe ffe6 	bl	8001864 <LL_ADC_GetOffsetChannel>
 8002898:	4603      	mov	r3, r0
 800289a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80028ba:	2320      	movs	r3, #32
 80028bc:	e004      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80028be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d105      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x1b2>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	0e9b      	lsrs	r3, r3, #26
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	e018      	b.n	8002914 <HAL_ADC_ConfigChannel+0x1e4>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002906:	2320      	movs	r3, #32
 8002908:	e004      	b.n	8002914 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800290a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	429a      	cmp	r2, r3
 8002916:	d106      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2200      	movs	r2, #0
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe ffb5 	bl	8001890 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2101      	movs	r1, #1
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe ff99 	bl	8001864 <LL_ADC_GetOffsetChannel>
 8002932:	4603      	mov	r3, r0
 8002934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x222>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe ff8e 	bl	8001864 <LL_ADC_GetOffsetChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	0e9b      	lsrs	r3, r3, #26
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	e01e      	b.n	8002990 <HAL_ADC_ConfigChannel+0x260>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2101      	movs	r1, #1
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe ff83 	bl	8001864 <LL_ADC_GetOffsetChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002970:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002974:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002980:	2320      	movs	r3, #32
 8002982:	e004      	b.n	800298e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002998:	2b00      	cmp	r3, #0
 800299a:	d105      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x278>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0e9b      	lsrs	r3, r3, #26
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	e018      	b.n	80029da <HAL_ADC_ConfigChannel+0x2aa>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80029bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80029c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80029cc:	2320      	movs	r3, #32
 80029ce:	e004      	b.n	80029da <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80029d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	429a      	cmp	r2, r3
 80029dc:	d106      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2101      	movs	r1, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe ff52 	bl	8001890 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2102      	movs	r1, #2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe ff36 	bl	8001864 <LL_ADC_GetOffsetChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x2e8>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2102      	movs	r1, #2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe ff2b 	bl	8001864 <LL_ADC_GetOffsetChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	f003 021f 	and.w	r2, r3, #31
 8002a16:	e01e      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x326>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe ff20 	bl	8001864 <LL_ADC_GetOffsetChannel>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002a46:	2320      	movs	r3, #32
 8002a48:	e004      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x33e>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0e9b      	lsrs	r3, r3, #26
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	e016      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x36c>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e004      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d106      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2102      	movs	r1, #2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe fef1 	bl	8001890 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe fed5 	bl	8001864 <LL_ADC_GetOffsetChannel>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x3aa>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2103      	movs	r1, #3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe feca 	bl	8001864 <LL_ADC_GetOffsetChannel>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	0e9b      	lsrs	r3, r3, #26
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	e017      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x3da>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2103      	movs	r1, #3
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe febf 	bl	8001864 <LL_ADC_GetOffsetChannel>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aec:	fa93 f3a3 	rbit	r3, r3
 8002af0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002af4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002afc:	2320      	movs	r3, #32
 8002afe:	e003      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d105      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x3f2>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	0e9b      	lsrs	r3, r3, #26
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	e011      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x416>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	e003      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d106      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2103      	movs	r1, #3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fe9c 	bl	8001890 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff f82f 	bl	8001bc0 <LL_ADC_IsEnabled>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 813d 	bne.w	8002de4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f7fe ff6c 	bl	8001a54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4aa2      	ldr	r2, [pc, #648]	; (8002e0c <HAL_ADC_ConfigChannel+0x6dc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	f040 812e 	bne.w	8002de4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10b      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x480>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	0e9b      	lsrs	r3, r3, #26
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	2b09      	cmp	r3, #9
 8002ba6:	bf94      	ite	ls
 8002ba8:	2301      	movls	r3, #1
 8002baa:	2300      	movhi	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e019      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x4b4>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bc0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	e003      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2b09      	cmp	r3, #9
 8002bdc:	bf94      	ite	ls
 8002bde:	2301      	movls	r3, #1
 8002be0:	2300      	movhi	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d079      	beq.n	8002cdc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d107      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x4d4>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	0e9b      	lsrs	r3, r3, #26
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	069b      	lsls	r3, r3, #26
 8002bfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c02:	e015      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x500>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c14:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	e003      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	069b      	lsls	r3, r3, #26
 8002c2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x520>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	0e9b      	lsrs	r3, r3, #26
 8002c42:	3301      	adds	r3, #1
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2101      	movs	r1, #1
 8002c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4e:	e017      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x550>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c60:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002c68:	2320      	movs	r3, #32
 8002c6a:	e003      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	3301      	adds	r3, #1
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	ea42 0103 	orr.w	r1, r2, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x576>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	0e9b      	lsrs	r3, r3, #26
 8002c96:	3301      	adds	r3, #1
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	051b      	lsls	r3, r3, #20
 8002ca4:	e018      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x5a8>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e003      	b.n	8002cca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f003 021f 	and.w	r2, r3, #31
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	e07e      	b.n	8002dda <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d107      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x5c8>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	3301      	adds	r3, #1
 8002cf0:	069b      	lsls	r3, r3, #26
 8002cf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cf6:	e015      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x5f4>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002d10:	2320      	movs	r3, #32
 8002d12:	e003      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	069b      	lsls	r3, r3, #26
 8002d20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d109      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x614>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0e9b      	lsrs	r3, r3, #26
 8002d36:	3301      	adds	r3, #1
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	e017      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x644>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	61fb      	str	r3, [r7, #28]
  return result;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	e003      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	2101      	movs	r1, #1
 8002d70:	fa01 f303 	lsl.w	r3, r1, r3
 8002d74:	ea42 0103 	orr.w	r1, r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10d      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x670>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0e9b      	lsrs	r3, r3, #26
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	4613      	mov	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	3b1e      	subs	r3, #30
 8002d98:	051b      	lsls	r3, r3, #20
 8002d9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	e01b      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x6a8>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	613b      	str	r3, [r7, #16]
  return result;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002db8:	2320      	movs	r3, #32
 8002dba:	e003      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	f003 021f 	and.w	r2, r3, #31
 8002dca:	4613      	mov	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4413      	add	r3, r2
 8002dd0:	3b1e      	subs	r3, #30
 8002dd2:	051b      	lsls	r3, r3, #20
 8002dd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	6892      	ldr	r2, [r2, #8]
 8002dde:	4619      	mov	r1, r3
 8002de0:	f7fe fe0c 	bl	80019fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_ADC_ConfigChannel+0x6e0>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80bd 	beq.w	8002f6c <HAL_ADC_ConfigChannel+0x83c>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dfa:	d004      	beq.n	8002e06 <HAL_ADC_ConfigChannel+0x6d6>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <HAL_ADC_ConfigChannel+0x6e4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10a      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x6ec>
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <HAL_ADC_ConfigChannel+0x6e8>)
 8002e08:	e009      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x6ee>
 8002e0a:	bf00      	nop
 8002e0c:	407f0000 	.word	0x407f0000
 8002e10:	80080000 	.word	0x80080000
 8002e14:	50000100 	.word	0x50000100
 8002e18:	50000300 	.word	0x50000300
 8002e1c:	4b58      	ldr	r3, [pc, #352]	; (8002f80 <HAL_ADC_ConfigChannel+0x850>)
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe fcee 	bl	8001800 <LL_ADC_GetCommonPathInternalCh>
 8002e24:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a55      	ldr	r2, [pc, #340]	; (8002f84 <HAL_ADC_ConfigChannel+0x854>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d004      	beq.n	8002e3c <HAL_ADC_ConfigChannel+0x70c>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a54      	ldr	r2, [pc, #336]	; (8002f88 <HAL_ADC_ConfigChannel+0x858>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d139      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x780>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d133      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e50:	d005      	beq.n	8002e5e <HAL_ADC_ConfigChannel+0x72e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a4d      	ldr	r2, [pc, #308]	; (8002f8c <HAL_ADC_ConfigChannel+0x85c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	f040 8084 	bne.w	8002f66 <HAL_ADC_ConfigChannel+0x836>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e66:	d004      	beq.n	8002e72 <HAL_ADC_ConfigChannel+0x742>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a48      	ldr	r2, [pc, #288]	; (8002f90 <HAL_ADC_ConfigChannel+0x860>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x746>
 8002e72:	4a48      	ldr	r2, [pc, #288]	; (8002f94 <HAL_ADC_ConfigChannel+0x864>)
 8002e74:	e000      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x748>
 8002e76:	4a42      	ldr	r2, [pc, #264]	; (8002f80 <HAL_ADC_ConfigChannel+0x850>)
 8002e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e80:	4619      	mov	r1, r3
 8002e82:	4610      	mov	r0, r2
 8002e84:	f7fe fca9 	bl	80017da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002e88:	4b43      	ldr	r3, [pc, #268]	; (8002f98 <HAL_ADC_ConfigChannel+0x868>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	099b      	lsrs	r3, r3, #6
 8002e8e:	4a43      	ldr	r2, [pc, #268]	; (8002f9c <HAL_ADC_ConfigChannel+0x86c>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	099a      	lsrs	r2, r3, #6
 8002e96:	4613      	mov	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ea0:	e002      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x778>
          {
            wait_loop_index--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f9      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x772>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eae:	e05a      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x836>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a3a      	ldr	r2, [pc, #232]	; (8002fa0 <HAL_ADC_ConfigChannel+0x870>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d125      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x7d6>
 8002eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11f      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x7d6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a31      	ldr	r2, [pc, #196]	; (8002f90 <HAL_ADC_ConfigChannel+0x860>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d104      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x7aa>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a33      	ldr	r2, [pc, #204]	; (8002fa4 <HAL_ADC_ConfigChannel+0x874>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d047      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x83a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee2:	d004      	beq.n	8002eee <HAL_ADC_ConfigChannel+0x7be>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a29      	ldr	r2, [pc, #164]	; (8002f90 <HAL_ADC_ConfigChannel+0x860>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x7c2>
 8002eee:	4a29      	ldr	r2, [pc, #164]	; (8002f94 <HAL_ADC_ConfigChannel+0x864>)
 8002ef0:	e000      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x7c4>
 8002ef2:	4a23      	ldr	r2, [pc, #140]	; (8002f80 <HAL_ADC_ConfigChannel+0x850>)
 8002ef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f7fe fc6b 	bl	80017da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f04:	e031      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x83a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a27      	ldr	r2, [pc, #156]	; (8002fa8 <HAL_ADC_ConfigChannel+0x878>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d12d      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x83c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d127      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x83c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <HAL_ADC_ConfigChannel+0x860>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d022      	beq.n	8002f6c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f2e:	d004      	beq.n	8002f3a <HAL_ADC_ConfigChannel+0x80a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a16      	ldr	r2, [pc, #88]	; (8002f90 <HAL_ADC_ConfigChannel+0x860>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x80e>
 8002f3a:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <HAL_ADC_ConfigChannel+0x864>)
 8002f3c:	e000      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x810>
 8002f3e:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <HAL_ADC_ConfigChannel+0x850>)
 8002f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	f7fe fc45 	bl	80017da <LL_ADC_SetCommonPathInternalCh>
 8002f50:	e00c      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x83c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	f043 0220 	orr.w	r2, r3, #32
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002f64:	e002      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f6a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f74:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	37d8      	adds	r7, #216	; 0xd8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	50000700 	.word	0x50000700
 8002f84:	c3210000 	.word	0xc3210000
 8002f88:	90c00010 	.word	0x90c00010
 8002f8c:	50000600 	.word	0x50000600
 8002f90:	50000100 	.word	0x50000100
 8002f94:	50000300 	.word	0x50000300
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	053e2d63 	.word	0x053e2d63
 8002fa0:	c7520000 	.word	0xc7520000
 8002fa4:	50000500 	.word	0x50000500
 8002fa8:	cb840000 	.word	0xcb840000

08002fac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fe4a 	bl	8001c5c <LL_ADC_REG_IsConversionOngoing>
 8002fc8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fe6b 	bl	8001caa <LL_ADC_INJ_IsConversionOngoing>
 8002fd4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d103      	bne.n	8002fe4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8091 	beq.w	8003106 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d02a      	beq.n	8003048 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	7f5b      	ldrb	r3, [r3, #29]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d126      	bne.n	8003048 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	7f1b      	ldrb	r3, [r3, #28]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d122      	bne.n	8003048 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003002:	2301      	movs	r3, #1
 8003004:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003006:	e014      	b.n	8003032 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	4a41      	ldr	r2, [pc, #260]	; (8003110 <ADC_ConversionStop+0x164>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d90d      	bls.n	800302c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003014:	f043 0210 	orr.w	r2, r3, #16
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003020:	f043 0201 	orr.w	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e06d      	b.n	8003108 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	3301      	adds	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	2b40      	cmp	r3, #64	; 0x40
 800303e:	d1e3      	bne.n	8003008 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2240      	movs	r2, #64	; 0x40
 8003046:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d014      	beq.n	8003078 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fe02 	bl	8001c5c <LL_ADC_REG_IsConversionOngoing>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00c      	beq.n	8003078 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fdbf 	bl	8001be6 <LL_ADC_IsDisableOngoing>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d104      	bne.n	8003078 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fdde 	bl	8001c34 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d014      	beq.n	80030a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fe11 	bl	8001caa <LL_ADC_INJ_IsConversionOngoing>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00c      	beq.n	80030a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe fda7 	bl	8001be6 <LL_ADC_IsDisableOngoing>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fded 	bl	8001c82 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d005      	beq.n	80030ba <ADC_ConversionStop+0x10e>
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d105      	bne.n	80030c0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80030b4:	230c      	movs	r3, #12
 80030b6:	617b      	str	r3, [r7, #20]
        break;
 80030b8:	e005      	b.n	80030c6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80030ba:	2308      	movs	r3, #8
 80030bc:	617b      	str	r3, [r7, #20]
        break;
 80030be:	e002      	b.n	80030c6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80030c0:	2304      	movs	r3, #4
 80030c2:	617b      	str	r3, [r7, #20]
        break;
 80030c4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80030c6:	f7fe fb47 	bl	8001758 <HAL_GetTick>
 80030ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80030cc:	e014      	b.n	80030f8 <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030ce:	f7fe fb43 	bl	8001758 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d90d      	bls.n	80030f8 <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	f043 0210 	orr.w	r2, r3, #16
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ec:	f043 0201 	orr.w	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e007      	b.n	8003108 <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1e3      	bne.n	80030ce <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3720      	adds	r7, #32
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	a33fffff 	.word	0xa33fffff

08003114 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe fd4d 	bl	8001bc0 <LL_ADC_IsEnabled>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d146      	bne.n	80031ba <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <ADC_Enable+0xb0>)
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	f043 0210 	orr.w	r2, r3, #16
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e032      	b.n	80031bc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fd08 	bl	8001b70 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003160:	f7fe fafa 	bl	8001758 <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003166:	e021      	b.n	80031ac <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fe fd27 	bl	8001bc0 <LL_ADC_IsEnabled>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d104      	bne.n	8003182 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe fcf7 	bl	8001b70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003182:	f7fe fae9 	bl	8001758 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d90d      	bls.n	80031ac <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003194:	f043 0210 	orr.w	r2, r3, #16
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a0:	f043 0201 	orr.w	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e007      	b.n	80031bc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d1d6      	bne.n	8003168 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	8000003f 	.word	0x8000003f

080031c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe fd06 	bl	8001be6 <LL_ADC_IsDisableOngoing>
 80031da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe fced 	bl	8001bc0 <LL_ADC_IsEnabled>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d040      	beq.n	800326e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d13d      	bne.n	800326e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030d 	and.w	r3, r3, #13
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d10c      	bne.n	800321a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe fcc7 	bl	8001b98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2203      	movs	r2, #3
 8003210:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003212:	f7fe faa1 	bl	8001758 <HAL_GetTick>
 8003216:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003218:	e022      	b.n	8003260 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	f043 0210 	orr.w	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322a:	f043 0201 	orr.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e01c      	b.n	8003270 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003236:	f7fe fa8f 	bl	8001758 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d90d      	bls.n	8003260 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	f043 0210 	orr.w	r2, r3, #16
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003254:	f043 0201 	orr.w	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e007      	b.n	8003270 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e3      	bne.n	8003236 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800328e:	2b00      	cmp	r3, #0
 8003290:	d14b      	bne.n	800332a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003296:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d021      	beq.n	80032f0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe fb51 	bl	8001958 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d032      	beq.n	8003322 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d12b      	bne.n	8003322 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d11f      	bne.n	8003322 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	f043 0201 	orr.w	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80032ee:	e018      	b.n	8003322 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d111      	bne.n	8003322 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331a:	f043 0201 	orr.w	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7fd fe06 	bl	8000f34 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003328:	e00e      	b.n	8003348 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f7ff f9f0 	bl	800271c <HAL_ADC_ErrorCallback>
}
 800333c:	e004      	b.n	8003348 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4798      	blx	r3
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7ff f9d2 	bl	8002708 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338a:	f043 0204 	orr.w	r2, r3, #4
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff f9c2 	bl	800271c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003398:	bf00      	nop
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <LL_ADC_StartCalibration>:
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80033b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033bc:	4313      	orrs	r3, r2
 80033be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	609a      	str	r2, [r3, #8]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <LL_ADC_IsCalibrationOnGoing>:
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033e6:	d101      	bne.n	80033ec <LL_ADC_IsCalibrationOnGoing+0x1a>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <LL_ADC_IsCalibrationOnGoing+0x1c>
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
	...

080033fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_ADCEx_Calibration_Start+0x1c>
 8003414:	2302      	movs	r3, #2
 8003416:	e04d      	b.n	80034b4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff fed1 	bl	80031c8 <ADC_Disable>
 8003426:	4603      	mov	r3, r0
 8003428:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d136      	bne.n	800349e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003438:	f023 0302 	bic.w	r3, r3, #2
 800343c:	f043 0202 	orr.w	r2, r3, #2
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6839      	ldr	r1, [r7, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ffa8 	bl	80033a0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003450:	e014      	b.n	800347c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3301      	adds	r3, #1
 8003456:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4a18      	ldr	r2, [pc, #96]	; (80034bc <HAL_ADCEx_Calibration_Start+0xc0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d90d      	bls.n	800347c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	f023 0312 	bic.w	r3, r3, #18
 8003468:	f043 0210 	orr.w	r2, r3, #16
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e01b      	b.n	80034b4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff ffa6 	bl	80033d2 <LL_ADC_IsCalibrationOnGoing>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e2      	bne.n	8003452 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	f023 0303 	bic.w	r3, r3, #3
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	65da      	str	r2, [r3, #92]	; 0x5c
 800349c:	e005      	b.n	80034aa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	f043 0210 	orr.w	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	0004de01 	.word	0x0004de01

080034c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <__NVIC_SetPriorityGrouping+0x44>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003540:	4013      	ands	r3, r2
 8003542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800354c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003556:	4a04      	ldr	r2, [pc, #16]	; (8003568 <__NVIC_SetPriorityGrouping+0x44>)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	60d3      	str	r3, [r2, #12]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <__NVIC_GetPriorityGrouping+0x18>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	f003 0307 	and.w	r3, r3, #7
}
 800357a:	4618      	mov	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	2b00      	cmp	r3, #0
 8003598:	db0b      	blt.n	80035b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	f003 021f 	and.w	r2, r3, #31
 80035a0:	4907      	ldr	r1, [pc, #28]	; (80035c0 <__NVIC_EnableIRQ+0x38>)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	2001      	movs	r0, #1
 80035aa:	fa00 f202 	lsl.w	r2, r0, r2
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000e100 	.word	0xe000e100

080035c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	6039      	str	r1, [r7, #0]
 80035ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	db0a      	blt.n	80035ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	490c      	ldr	r1, [pc, #48]	; (8003610 <__NVIC_SetPriority+0x4c>)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	0112      	lsls	r2, r2, #4
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	440b      	add	r3, r1
 80035e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035ec:	e00a      	b.n	8003604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	4908      	ldr	r1, [pc, #32]	; (8003614 <__NVIC_SetPriority+0x50>)
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	3b04      	subs	r3, #4
 80035fc:	0112      	lsls	r2, r2, #4
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	440b      	add	r3, r1
 8003602:	761a      	strb	r2, [r3, #24]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	e000e100 	.word	0xe000e100
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f1c3 0307 	rsb	r3, r3, #7
 8003632:	2b04      	cmp	r3, #4
 8003634:	bf28      	it	cs
 8003636:	2304      	movcs	r3, #4
 8003638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3304      	adds	r3, #4
 800363e:	2b06      	cmp	r3, #6
 8003640:	d902      	bls.n	8003648 <NVIC_EncodePriority+0x30>
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3b03      	subs	r3, #3
 8003646:	e000      	b.n	800364a <NVIC_EncodePriority+0x32>
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800364c:	f04f 32ff 	mov.w	r2, #4294967295
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43da      	mvns	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	401a      	ands	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003660:	f04f 31ff 	mov.w	r1, #4294967295
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	fa01 f303 	lsl.w	r3, r1, r3
 800366a:	43d9      	mvns	r1, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003670:	4313      	orrs	r3, r2
         );
}
 8003672:	4618      	mov	r0, r3
 8003674:	3724      	adds	r7, #36	; 0x24
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3b01      	subs	r3, #1
 800368c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003690:	d301      	bcc.n	8003696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003692:	2301      	movs	r3, #1
 8003694:	e00f      	b.n	80036b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003696:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <SysTick_Config+0x40>)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800369e:	210f      	movs	r1, #15
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295
 80036a4:	f7ff ff8e 	bl	80035c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <SysTick_Config+0x40>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ae:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <SysTick_Config+0x40>)
 80036b0:	2207      	movs	r2, #7
 80036b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	e000e010 	.word	0xe000e010

080036c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff29 	bl	8003524 <__NVIC_SetPriorityGrouping>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b086      	sub	sp, #24
 80036de:	af00      	add	r7, sp, #0
 80036e0:	4603      	mov	r3, r0
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036e8:	f7ff ff40 	bl	800356c <__NVIC_GetPriorityGrouping>
 80036ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	6978      	ldr	r0, [r7, #20]
 80036f4:	f7ff ff90 	bl	8003618 <NVIC_EncodePriority>
 80036f8:	4602      	mov	r2, r0
 80036fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff5f 	bl	80035c4 <__NVIC_SetPriority>
}
 8003706:	bf00      	nop
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	4603      	mov	r3, r0
 8003716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ff33 	bl	8003588 <__NVIC_EnableIRQ>
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff ffa4 	bl	8003680 <SysTick_Config>
 8003738:	4603      	mov	r3, r0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e08d      	b.n	8003872 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	4b47      	ldr	r3, [pc, #284]	; (800387c <HAL_DMA_Init+0x138>)
 800375e:	429a      	cmp	r2, r3
 8003760:	d80f      	bhi.n	8003782 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	4b45      	ldr	r3, [pc, #276]	; (8003880 <HAL_DMA_Init+0x13c>)
 800376a:	4413      	add	r3, r2
 800376c:	4a45      	ldr	r2, [pc, #276]	; (8003884 <HAL_DMA_Init+0x140>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	009a      	lsls	r2, r3, #2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a42      	ldr	r2, [pc, #264]	; (8003888 <HAL_DMA_Init+0x144>)
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
 8003780:	e00e      	b.n	80037a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	4b40      	ldr	r3, [pc, #256]	; (800388c <HAL_DMA_Init+0x148>)
 800378a:	4413      	add	r3, r2
 800378c:	4a3d      	ldr	r2, [pc, #244]	; (8003884 <HAL_DMA_Init+0x140>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	009a      	lsls	r2, r3, #2
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a3c      	ldr	r2, [pc, #240]	; (8003890 <HAL_DMA_Init+0x14c>)
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f9b6 	bl	8003b64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003800:	d102      	bne.n	8003808 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800381c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d010      	beq.n	8003848 <HAL_DMA_Init+0x104>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b04      	cmp	r3, #4
 800382c:	d80c      	bhi.n	8003848 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f9d6 	bl	8003be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	e008      	b.n	800385a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40020407 	.word	0x40020407
 8003880:	bffdfff8 	.word	0xbffdfff8
 8003884:	cccccccd 	.word	0xcccccccd
 8003888:	40020000 	.word	0x40020000
 800388c:	bffdfbf8 	.word	0xbffdfbf8
 8003890:	40020400 	.word	0x40020400

08003894 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_DMA_Start_IT+0x20>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e066      	b.n	8003982 <HAL_DMA_Start_IT+0xee>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d155      	bne.n	8003974 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f8fb 	bl	8003ae8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 020e 	orr.w	r2, r2, #14
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	e00f      	b.n	800392c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0204 	bic.w	r2, r2, #4
 800391a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 020a 	orr.w	r2, r2, #10
 800392a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003948:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	2b00      	cmp	r3, #0
 8003950:	d007      	beq.n	8003962 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003960:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	e005      	b.n	8003980 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800397c:	2302      	movs	r3, #2
 800397e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003980:	7dfb      	ldrb	r3, [r7, #23]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	2204      	movs	r2, #4
 80039ac:	409a      	lsls	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d026      	beq.n	8003a04 <HAL_DMA_IRQHandler+0x7a>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d021      	beq.n	8003a04 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d107      	bne.n	80039de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0204 	bic.w	r2, r2, #4
 80039dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f003 021f 	and.w	r2, r3, #31
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2104      	movs	r1, #4
 80039ec:	fa01 f202 	lsl.w	r2, r1, r2
 80039f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d071      	beq.n	8003ade <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a02:	e06c      	b.n	8003ade <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d02e      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d029      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 020a 	bic.w	r2, r2, #10
 8003a3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4c:	f003 021f 	and.w	r2, r3, #31
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	2102      	movs	r1, #2
 8003a56:	fa01 f202 	lsl.w	r2, r1, r2
 8003a5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d038      	beq.n	8003ade <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a74:	e033      	b.n	8003ade <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2208      	movs	r2, #8
 8003a80:	409a      	lsls	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d02a      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d025      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 020e 	bic.w	r2, r2, #14
 8003aa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	f003 021f 	and.w	r2, r3, #31
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d004      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ade:	bf00      	nop
 8003ae0:	bf00      	nop
}
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003afe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b10:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	f003 021f 	and.w	r2, r3, #31
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	2101      	movs	r1, #1
 8003b20:	fa01 f202 	lsl.w	r2, r1, r2
 8003b24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d108      	bne.n	8003b48 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b46:	e007      	b.n	8003b58 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	60da      	str	r2, [r3, #12]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d802      	bhi.n	8003b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	e001      	b.n	8003b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003b7e:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b80:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	3b08      	subs	r3, #8
 8003b8e:	4a12      	ldr	r2, [pc, #72]	; (8003bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9c:	089b      	lsrs	r3, r3, #2
 8003b9e:	009a      	lsls	r2, r3, #2
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a0b      	ldr	r2, [pc, #44]	; (8003bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bae:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bbe:	bf00      	nop
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40020407 	.word	0x40020407
 8003bd0:	40020800 	.word	0x40020800
 8003bd4:	40020820 	.word	0x40020820
 8003bd8:	cccccccd 	.word	0xcccccccd
 8003bdc:	40020880 	.word	0x40020880

08003be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c02:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	1000823f 	.word	0x1000823f
 8003c24:	40020940 	.word	0x40020940

08003c28 <HAL_FLASH_IRQHandler>:
/**
  * @brief  Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8003c2e:	4b66      	ldr	r3, [pc, #408]	; (8003dc8 <HAL_FLASH_IRQHandler+0x1a0>)
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	4a65      	ldr	r2, [pc, #404]	; (8003dc8 <HAL_FLASH_IRQHandler+0x1a0>)
 8003c34:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c38:	f023 0303 	bic.w	r3, r3, #3
 8003c3c:	6153      	str	r3, [r2, #20]
#if defined (FLASH_OPTR_DBANK)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8003c3e:	4b62      	ldr	r3, [pc, #392]	; (8003dc8 <HAL_FLASH_IRQHandler+0x1a0>)
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	4a61      	ldr	r2, [pc, #388]	; (8003dc8 <HAL_FLASH_IRQHandler+0x1a0>)
 8003c44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c48:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8003c4a:	4b60      	ldr	r3, [pc, #384]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003c4c:	7a1b      	ldrb	r3, [r3, #8]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d105      	bne.n	8003c60 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003c54:	4b5c      	ldr	r3, [pc, #368]	; (8003dc8 <HAL_FLASH_IRQHandler+0x1a0>)
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	4a5b      	ldr	r2, [pc, #364]	; (8003dc8 <HAL_FLASH_IRQHandler+0x1a0>)
 8003c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5e:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003c60:	4b59      	ldr	r3, [pc, #356]	; (8003dc8 <HAL_FLASH_IRQHandler+0x1a0>)
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003c68:	4013      	ands	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d041      	beq.n	8003cf6 <HAL_FLASH_IRQHandler+0xce>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8003c72:	4b56      	ldr	r3, [pc, #344]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	4a54      	ldr	r2, [pc, #336]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003c7c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d007      	beq.n	8003c98 <HAL_FLASH_IRQHandler+0x70>
 8003c88:	4b4f      	ldr	r3, [pc, #316]	; (8003dc8 <HAL_FLASH_IRQHandler+0x1a0>)
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c92:	494d      	ldr	r1, [pc, #308]	; (8003dc8 <HAL_FLASH_IRQHandler+0x1a0>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	618b      	str	r3, [r1, #24]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d004      	beq.n	8003cac <HAL_FLASH_IRQHandler+0x84>
 8003ca2:	4a49      	ldr	r2, [pc, #292]	; (8003dc8 <HAL_FLASH_IRQHandler+0x1a0>)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003caa:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8003cac:	f000 f8e8 	bl	8003e80 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8003cb0:	4b46      	ldr	r3, [pc, #280]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003cb2:	7a1b      	ldrb	r3, [r3, #8]
 8003cb4:	72fb      	strb	r3, [r7, #11]
    if (procedure == FLASH_PROC_PAGE_ERASE)
 8003cb6:	7afb      	ldrb	r3, [r7, #11]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d105      	bne.n	8003cc8 <HAL_FLASH_IRQHandler+0xa0>
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8003cbc:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 f88f 	bl	8003de4 <HAL_FLASH_OperationErrorCallback>
 8003cc6:	e013      	b.n	8003cf0 <HAL_FLASH_IRQHandler+0xc8>
    }
    else if (procedure == FLASH_PROC_MASS_ERASE)
 8003cc8:	7afb      	ldrb	r3, [r7, #11]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d105      	bne.n	8003cda <HAL_FLASH_IRQHandler+0xb2>
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8003cce:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f886 	bl	8003de4 <HAL_FLASH_OperationErrorCallback>
 8003cd8:	e00a      	b.n	8003cf0 <HAL_FLASH_IRQHandler+0xc8>
    }
    else if ((procedure == FLASH_PROC_PROGRAM) ||
 8003cda:	7afb      	ldrb	r3, [r7, #11]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d002      	beq.n	8003ce6 <HAL_FLASH_IRQHandler+0xbe>
 8003ce0:	7afb      	ldrb	r3, [r7, #11]
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d104      	bne.n	8003cf0 <HAL_FLASH_IRQHandler+0xc8>
             (procedure == FLASH_PROC_PROGRAM_LAST))
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8003ce6:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 f87a 	bl	8003de4 <HAL_FLASH_OperationErrorCallback>
    {
      /* Nothing to do */
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003cf0:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003cf6:	4b34      	ldr	r3, [pc, #208]	; (8003dc8 <HAL_FLASH_IRQHandler+0x1a0>)
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d14f      	bne.n	8003da2 <HAL_FLASH_IRQHandler+0x17a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d02:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <HAL_FLASH_IRQHandler+0x1a0>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8003d08:	4b30      	ldr	r3, [pc, #192]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d0a:	7a1b      	ldrb	r3, [r3, #8]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d12b      	bne.n	8003d6a <HAL_FLASH_IRQHandler+0x142>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8003d12:	4b2e      	ldr	r3, [pc, #184]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	4a2c      	ldr	r2, [pc, #176]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d1a:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 8003d1c:	4b2b      	ldr	r3, [pc, #172]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d013      	beq.n	8003d4c <HAL_FLASH_IRQHandler+0x124>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8003d24:	4b29      	ldr	r3, [pc, #164]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 f851 	bl	8003dd0 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 8003d2e:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	3301      	adds	r3, #1
 8003d34:	4a25      	ldr	r2, [pc, #148]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d36:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8003d38:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8003d3e:	4b23      	ldr	r3, [pc, #140]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	4619      	mov	r1, r3
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f857 	bl	8003df8 <FLASH_PageErase>
 8003d4a:	e02a      	b.n	8003da2 <HAL_FLASH_IRQHandler+0x17a>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 8003d4c:	4b1f      	ldr	r3, [pc, #124]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d52:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003d54:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8003d5a:	f000 f891 	bl	8003e80 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f834 	bl	8003dd0 <HAL_FLASH_EndOfOperationCallback>
 8003d68:	e01b      	b.n	8003da2 <HAL_FLASH_IRQHandler+0x17a>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 8003d6a:	f000 f889 	bl	8003e80 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 8003d6e:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d70:	7a1b      	ldrb	r3, [r3, #8]
 8003d72:	72fb      	strb	r3, [r7, #11]
      if (procedure == FLASH_PROC_MASS_ERASE)
 8003d74:	7afb      	ldrb	r3, [r7, #11]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d105      	bne.n	8003d86 <HAL_FLASH_IRQHandler+0x15e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8003d7a:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f826 	bl	8003dd0 <HAL_FLASH_EndOfOperationCallback>
 8003d84:	e00a      	b.n	8003d9c <HAL_FLASH_IRQHandler+0x174>
      }
      else if ((procedure == FLASH_PROC_PROGRAM) ||
 8003d86:	7afb      	ldrb	r3, [r7, #11]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d002      	beq.n	8003d92 <HAL_FLASH_IRQHandler+0x16a>
 8003d8c:	7afb      	ldrb	r3, [r7, #11]
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d104      	bne.n	8003d9c <HAL_FLASH_IRQHandler+0x174>
               (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003d92:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f81a 	bl	8003dd0 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	721a      	strb	r2, [r3, #8]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003da4:	7a1b      	ldrb	r3, [r3, #8]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d108      	bne.n	8003dbe <HAL_FLASH_IRQHandler+0x196>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_FLASH_IRQHandler+0x1a0>)
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	4a05      	ldr	r2, [pc, #20]	; (8003dc8 <HAL_FLASH_IRQHandler+0x1a0>)
 8003db2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003db6:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <HAL_FLASH_IRQHandler+0x1a4>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40022000 	.word	0x40022000
 8003dcc:	2000000c 	.word	0x2000000c

08003dd0 <HAL_FLASH_EndOfOperationCallback>:
  *                            (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *           @arg Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_FLASH_OperationErrorCallback>:
  *           @arg Page Erase: Page number which returned an error
  *           @arg Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <FLASH_PageErase+0x84>)
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003e0e:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <FLASH_PageErase+0x84>)
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	4a1a      	ldr	r2, [pc, #104]	; (8003e7c <FLASH_PageErase+0x84>)
 8003e14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e18:	6153      	str	r3, [r2, #20]
 8003e1a:	e011      	b.n	8003e40 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d006      	beq.n	8003e34 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003e26:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <FLASH_PageErase+0x84>)
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <FLASH_PageErase+0x84>)
 8003e2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e30:	6153      	str	r3, [r2, #20]
 8003e32:	e005      	b.n	8003e40 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <FLASH_PageErase+0x84>)
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	4a10      	ldr	r2, [pc, #64]	; (8003e7c <FLASH_PageErase+0x84>)
 8003e3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e3e:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <FLASH_PageErase+0x84>)
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003e50:	490a      	ldr	r1, [pc, #40]	; (8003e7c <FLASH_PageErase+0x84>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <FLASH_PageErase+0x84>)
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <FLASH_PageErase+0x84>)
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003e62:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <FLASH_PageErase+0x84>)
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	4a05      	ldr	r2, [pc, #20]	; (8003e7c <FLASH_PageErase+0x84>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6c:	6153      	str	r3, [r2, #20]
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40022000 	.word	0x40022000

08003e80 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003e86:	4b1e      	ldr	r3, [pc, #120]	; (8003f00 <FLASH_FlushCaches+0x80>)
 8003e88:	7f1b      	ldrb	r3, [r3, #28]
 8003e8a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d002      	beq.n	8003e98 <FLASH_FlushCaches+0x18>
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d111      	bne.n	8003ebc <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003e98:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <FLASH_FlushCaches+0x84>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <FLASH_FlushCaches+0x84>)
 8003e9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b17      	ldr	r3, [pc, #92]	; (8003f04 <FLASH_FlushCaches+0x84>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a16      	ldr	r2, [pc, #88]	; (8003f04 <FLASH_FlushCaches+0x84>)
 8003eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eae:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003eb0:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <FLASH_FlushCaches+0x84>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <FLASH_FlushCaches+0x84>)
 8003eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eba:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d002      	beq.n	8003ec8 <FLASH_FlushCaches+0x48>
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d111      	bne.n	8003eec <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003ec8:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <FLASH_FlushCaches+0x84>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a0d      	ldr	r2, [pc, #52]	; (8003f04 <FLASH_FlushCaches+0x84>)
 8003ece:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <FLASH_FlushCaches+0x84>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a0a      	ldr	r2, [pc, #40]	; (8003f04 <FLASH_FlushCaches+0x84>)
 8003eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ede:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ee0:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <FLASH_FlushCaches+0x84>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a07      	ldr	r2, [pc, #28]	; (8003f04 <FLASH_FlushCaches+0x84>)
 8003ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eea:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <FLASH_FlushCaches+0x80>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	771a      	strb	r2, [r3, #28]
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	2000000c 	.word	0x2000000c
 8003f04:	40022000 	.word	0x40022000

08003f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f16:	e15a      	b.n	80041ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	fa01 f303 	lsl.w	r3, r1, r3
 8003f24:	4013      	ands	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 814c 	beq.w	80041c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d00b      	beq.n	8003f50 <HAL_GPIO_Init+0x48>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d007      	beq.n	8003f50 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f44:	2b11      	cmp	r3, #17
 8003f46:	d003      	beq.n	8003f50 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b12      	cmp	r3, #18
 8003f4e:	d130      	bne.n	8003fb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	43db      	mvns	r3, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4013      	ands	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f86:	2201      	movs	r2, #1
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	091b      	lsrs	r3, r3, #4
 8003f9c:	f003 0201 	and.w	r2, r3, #1
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_Init+0xea>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b12      	cmp	r3, #18
 8003ff0:	d123      	bne.n	800403a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	08da      	lsrs	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3208      	adds	r2, #8
 8003ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	220f      	movs	r2, #15
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4013      	ands	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	08da      	lsrs	r2, r3, #3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3208      	adds	r2, #8
 8004034:	6939      	ldr	r1, [r7, #16]
 8004036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	2203      	movs	r2, #3
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 0203 	and.w	r2, r3, #3
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80a6 	beq.w	80041c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800407c:	4b5b      	ldr	r3, [pc, #364]	; (80041ec <HAL_GPIO_Init+0x2e4>)
 800407e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004080:	4a5a      	ldr	r2, [pc, #360]	; (80041ec <HAL_GPIO_Init+0x2e4>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	6613      	str	r3, [r2, #96]	; 0x60
 8004088:	4b58      	ldr	r3, [pc, #352]	; (80041ec <HAL_GPIO_Init+0x2e4>)
 800408a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004094:	4a56      	ldr	r2, [pc, #344]	; (80041f0 <HAL_GPIO_Init+0x2e8>)
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	089b      	lsrs	r3, r3, #2
 800409a:	3302      	adds	r3, #2
 800409c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	220f      	movs	r2, #15
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4013      	ands	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040be:	d01f      	beq.n	8004100 <HAL_GPIO_Init+0x1f8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a4c      	ldr	r2, [pc, #304]	; (80041f4 <HAL_GPIO_Init+0x2ec>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d019      	beq.n	80040fc <HAL_GPIO_Init+0x1f4>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a4b      	ldr	r2, [pc, #300]	; (80041f8 <HAL_GPIO_Init+0x2f0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d013      	beq.n	80040f8 <HAL_GPIO_Init+0x1f0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a4a      	ldr	r2, [pc, #296]	; (80041fc <HAL_GPIO_Init+0x2f4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00d      	beq.n	80040f4 <HAL_GPIO_Init+0x1ec>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a49      	ldr	r2, [pc, #292]	; (8004200 <HAL_GPIO_Init+0x2f8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d007      	beq.n	80040f0 <HAL_GPIO_Init+0x1e8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a48      	ldr	r2, [pc, #288]	; (8004204 <HAL_GPIO_Init+0x2fc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d101      	bne.n	80040ec <HAL_GPIO_Init+0x1e4>
 80040e8:	2305      	movs	r3, #5
 80040ea:	e00a      	b.n	8004102 <HAL_GPIO_Init+0x1fa>
 80040ec:	2306      	movs	r3, #6
 80040ee:	e008      	b.n	8004102 <HAL_GPIO_Init+0x1fa>
 80040f0:	2304      	movs	r3, #4
 80040f2:	e006      	b.n	8004102 <HAL_GPIO_Init+0x1fa>
 80040f4:	2303      	movs	r3, #3
 80040f6:	e004      	b.n	8004102 <HAL_GPIO_Init+0x1fa>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e002      	b.n	8004102 <HAL_GPIO_Init+0x1fa>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <HAL_GPIO_Init+0x1fa>
 8004100:	2300      	movs	r3, #0
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	f002 0203 	and.w	r2, r2, #3
 8004108:	0092      	lsls	r2, r2, #2
 800410a:	4093      	lsls	r3, r2
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004112:	4937      	ldr	r1, [pc, #220]	; (80041f0 <HAL_GPIO_Init+0x2e8>)
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	089b      	lsrs	r3, r3, #2
 8004118:	3302      	adds	r3, #2
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004120:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_GPIO_Init+0x300>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	43db      	mvns	r3, r3
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4013      	ands	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004144:	4a30      	ldr	r2, [pc, #192]	; (8004208 <HAL_GPIO_Init+0x300>)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800414a:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <HAL_GPIO_Init+0x300>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	43db      	mvns	r3, r3
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4013      	ands	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800416e:	4a26      	ldr	r2, [pc, #152]	; (8004208 <HAL_GPIO_Init+0x300>)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004174:	4b24      	ldr	r3, [pc, #144]	; (8004208 <HAL_GPIO_Init+0x300>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	43db      	mvns	r3, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004198:	4a1b      	ldr	r2, [pc, #108]	; (8004208 <HAL_GPIO_Init+0x300>)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800419e:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <HAL_GPIO_Init+0x300>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	43db      	mvns	r3, r3
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4013      	ands	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041c2:	4a11      	ldr	r2, [pc, #68]	; (8004208 <HAL_GPIO_Init+0x300>)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	3301      	adds	r3, #1
 80041cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f47f ae9d 	bne.w	8003f18 <HAL_GPIO_Init+0x10>
  }
}
 80041de:	bf00      	nop
 80041e0:	bf00      	nop
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40010000 	.word	0x40010000
 80041f4:	48000400 	.word	0x48000400
 80041f8:	48000800 	.word	0x48000800
 80041fc:	48000c00 	.word	0x48000c00
 8004200:	48001000 	.word	0x48001000
 8004204:	48001400 	.word	0x48001400
 8004208:	40010400 	.word	0x40010400

0800420c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	807b      	strh	r3, [r7, #2]
 8004218:	4613      	mov	r3, r2
 800421a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800421c:	787b      	ldrb	r3, [r7, #1]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004222:	887a      	ldrh	r2, [r7, #2]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004228:	e002      	b.n	8004230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800422a:	887a      	ldrh	r2, [r7, #2]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800424e:	887a      	ldrh	r2, [r7, #2]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4013      	ands	r3, r2
 8004254:	041a      	lsls	r2, r3, #16
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	43d9      	mvns	r1, r3
 800425a:	887b      	ldrh	r3, [r7, #2]
 800425c:	400b      	ands	r3, r1
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	619a      	str	r2, [r3, #24]
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800427c:	695a      	ldr	r2, [r3, #20]
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d006      	beq.n	8004294 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004286:	4a05      	ldr	r2, [pc, #20]	; (800429c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f806 	bl	80042a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40010400 	.word	0x40010400

080042a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e0bb      	b.n	8004446 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b05      	cmp	r3, #5
 80042d8:	d101      	bne.n	80042de <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e0b3      	b.n	8004446 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d101      	bne.n	80042ee <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e0ab      	b.n	8004446 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ee:	4b58      	ldr	r3, [pc, #352]	; (8004450 <HAL_OPAMP_Init+0x198>)
 80042f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f2:	4a57      	ldr	r2, [pc, #348]	; (8004450 <HAL_OPAMP_Init+0x198>)
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	6613      	str	r3, [r2, #96]	; 0x60
 80042fa:	4b55      	ldr	r3, [pc, #340]	; (8004450 <HAL_OPAMP_Init+0x198>)
 80042fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fd f852 	bl	80013c4 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	d003      	beq.n	8004330 <HAL_OPAMP_Init+0x78>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b60      	cmp	r3, #96	; 0x60
 800432e:	d133      	bne.n	8004398 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 0110 	bic.w	r1, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_OPAMP_Init+0x19c>)
 800434e:	4013      	ands	r3, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6851      	ldr	r1, [r2, #4]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6892      	ldr	r2, [r2, #8]
 8004358:	4311      	orrs	r1, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6912      	ldr	r2, [r2, #16]
 800435e:	430a      	orrs	r2, r1
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	7d09      	ldrb	r1, [r1, #20]
 8004364:	2901      	cmp	r1, #1
 8004366:	d102      	bne.n	800436e <HAL_OPAMP_Init+0xb6>
 8004368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800436c:	e000      	b.n	8004370 <HAL_OPAMP_Init+0xb8>
 800436e:	2100      	movs	r1, #0
 8004370:	4311      	orrs	r1, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004376:	4311      	orrs	r1, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800437c:	4311      	orrs	r1, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004382:	04d2      	lsls	r2, r2, #19
 8004384:	4311      	orrs	r1, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800438a:	0612      	lsls	r2, r2, #24
 800438c:	4311      	orrs	r1, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	430b      	orrs	r3, r1
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e035      	b.n	8004404 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 0110 	bic.w	r1, r3, #16
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b27      	ldr	r3, [pc, #156]	; (8004454 <HAL_OPAMP_Init+0x19c>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6851      	ldr	r1, [r2, #4]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6892      	ldr	r2, [r2, #8]
 80043c0:	4311      	orrs	r1, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	68d2      	ldr	r2, [r2, #12]
 80043c6:	4311      	orrs	r1, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6912      	ldr	r2, [r2, #16]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	7d09      	ldrb	r1, [r1, #20]
 80043d2:	2901      	cmp	r1, #1
 80043d4:	d102      	bne.n	80043dc <HAL_OPAMP_Init+0x124>
 80043d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043da:	e000      	b.n	80043de <HAL_OPAMP_Init+0x126>
 80043dc:	2100      	movs	r1, #0
 80043de:	4311      	orrs	r1, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043e4:	4311      	orrs	r1, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80043ea:	4311      	orrs	r1, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043f0:	04d2      	lsls	r2, r2, #19
 80043f2:	4311      	orrs	r1, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043f8:	0612      	lsls	r2, r2, #24
 80043fa:	4311      	orrs	r1, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	430b      	orrs	r3, r1
 8004402:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b00      	cmp	r3, #0
 800440c:	db10      	blt.n	8004430 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d103      	bne.n	8004444 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	e0003e11 	.word	0xe0003e11

08004458 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
 800446e:	e01d      	b.n	80044ac <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b05      	cmp	r3, #5
 800447a:	d102      	bne.n	8004482 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	73fb      	strb	r3, [r7, #15]
 8004480:	e014      	b.n	80044ac <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10c      	bne.n	80044a8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2204      	movs	r2, #4
 80044a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80044a6:	e001      	b.n	80044ac <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044bc:	b08b      	sub	sp, #44	; 0x2c
 80044be:	af06      	add	r7, sp, #24
 80044c0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0d7      	b.n	800467c <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f007 f89d 	bl	800b620 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2203      	movs	r2, #3
 80044ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f003 fa41 	bl	800797a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044f8:	2300      	movs	r3, #0
 80044fa:	73fb      	strb	r3, [r7, #15]
 80044fc:	e04c      	b.n	8004598 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	440b      	add	r3, r1
 800450e:	3301      	adds	r3, #1
 8004510:	2201      	movs	r2, #1
 8004512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	440b      	add	r3, r1
 8004524:	7bfa      	ldrb	r2, [r7, #15]
 8004526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004528:	7bfa      	ldrb	r2, [r7, #15]
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	b298      	uxth	r0, r3
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	440b      	add	r3, r1
 800453a:	3336      	adds	r3, #54	; 0x36
 800453c:	4602      	mov	r2, r0
 800453e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	440b      	add	r3, r1
 8004550:	3303      	adds	r3, #3
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004556:	7bfa      	ldrb	r2, [r7, #15]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	440b      	add	r3, r1
 8004564:	3338      	adds	r3, #56	; 0x38
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800456a:	7bfa      	ldrb	r2, [r7, #15]
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	440b      	add	r3, r1
 8004578:	333c      	adds	r3, #60	; 0x3c
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800457e:	7bfa      	ldrb	r2, [r7, #15]
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	440b      	add	r3, r1
 800458c:	3340      	adds	r3, #64	; 0x40
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	3301      	adds	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d3ad      	bcc.n	80044fe <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]
 80045a6:	e044      	b.n	8004632 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045a8:	7bfa      	ldrb	r2, [r7, #15]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	440b      	add	r3, r1
 80045b6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80045ba:	2200      	movs	r2, #0
 80045bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045be:	7bfa      	ldrb	r2, [r7, #15]
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	440b      	add	r3, r1
 80045cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045d0:	7bfa      	ldrb	r2, [r7, #15]
 80045d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045d4:	7bfa      	ldrb	r2, [r7, #15]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	440b      	add	r3, r1
 80045e2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80045e6:	2200      	movs	r2, #0
 80045e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045ea:	7bfa      	ldrb	r2, [r7, #15]
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	440b      	add	r3, r1
 80045f8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004600:	7bfa      	ldrb	r2, [r7, #15]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	440b      	add	r3, r1
 800460e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004616:	7bfa      	ldrb	r2, [r7, #15]
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	440b      	add	r3, r1
 8004624:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	3301      	adds	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
 8004632:	7bfa      	ldrb	r2, [r7, #15]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	429a      	cmp	r2, r3
 800463a:	d3b5      	bcc.n	80045a8 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	603b      	str	r3, [r7, #0]
 8004642:	687e      	ldr	r6, [r7, #4]
 8004644:	466d      	mov	r5, sp
 8004646:	f106 0410 	add.w	r4, r6, #16
 800464a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800464c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	602b      	str	r3, [r5, #0]
 8004652:	1d33      	adds	r3, r6, #4
 8004654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004656:	6838      	ldr	r0, [r7, #0]
 8004658:	f003 f9aa 	bl	80079b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d102      	bne.n	800467a <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f001 fa6c 	bl	8005b52 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004684 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_PCD_Start+0x16>
 8004696:	2302      	movs	r3, #2
 8004698:	e012      	b.n	80046c0 <HAL_PCD_Start+0x3c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f003 f950 	bl	800794c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f005 f93c 	bl	800992e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f005 f941 	bl	800995c <USB_ReadInterrupts>
 80046da:	4603      	mov	r3, r0
 80046dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e4:	d102      	bne.n	80046ec <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fb5b 	bl	8004da2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f005 f933 	bl	800995c <USB_ReadInterrupts>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004700:	d112      	bne.n	8004728 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800470a:	b29a      	uxth	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004714:	b292      	uxth	r2, r2
 8004716:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f006 fffb 	bl	800b716 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004720:	2100      	movs	r1, #0
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f91e 	bl	8004964 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f005 f915 	bl	800995c <USB_ReadInterrupts>
 8004732:	4603      	mov	r3, r0
 8004734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800473c:	d10b      	bne.n	8004756 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004746:	b29a      	uxth	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004750:	b292      	uxth	r2, r2
 8004752:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f005 f8fe 	bl	800995c <USB_ReadInterrupts>
 8004760:	4603      	mov	r3, r0
 8004762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476a:	d10b      	bne.n	8004784 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004774:	b29a      	uxth	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800477e:	b292      	uxth	r2, r2
 8004780:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f005 f8e7 	bl	800995c <USB_ReadInterrupts>
 800478e:	4603      	mov	r3, r0
 8004790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004798:	d133      	bne.n	8004802 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0204 	bic.w	r2, r2, #4
 80047ac:	b292      	uxth	r2, r2
 80047ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0208 	bic.w	r2, r2, #8
 80047c4:	b292      	uxth	r2, r2
 80047c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d107      	bne.n	80047e4 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80047dc:	2100      	movs	r1, #0
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f007 f98e 	bl	800bb00 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f006 ffcf 	bl	800b788 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047fc:	b292      	uxth	r2, r2
 80047fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f005 f8a8 	bl	800995c <USB_ReadInterrupts>
 800480c:	4603      	mov	r3, r0
 800480e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004816:	d126      	bne.n	8004866 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0208 	orr.w	r2, r2, #8
 800482a:	b292      	uxth	r2, r2
 800482c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004838:	b29a      	uxth	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004842:	b292      	uxth	r2, r2
 8004844:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004850:	b29a      	uxth	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0204 	orr.w	r2, r2, #4
 800485a:	b292      	uxth	r2, r2
 800485c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f006 ff77 	bl	800b754 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f005 f876 	bl	800995c <USB_ReadInterrupts>
 8004870:	4603      	mov	r3, r0
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b80      	cmp	r3, #128	; 0x80
 8004878:	d13f      	bne.n	80048fa <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004882:	b29a      	uxth	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800488c:	b292      	uxth	r2, r2
 800488e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d12b      	bne.n	80048f4 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0204 	orr.w	r2, r2, #4
 80048ae:	b292      	uxth	r2, r2
 80048b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048bc:	b29a      	uxth	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0208 	orr.w	r2, r2, #8
 80048c6:	b292      	uxth	r2, r2
 80048c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80048dc:	b29b      	uxth	r3, r3
 80048de:	089b      	lsrs	r3, r3, #2
 80048e0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80048ea:	2101      	movs	r1, #1
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f007 f907 	bl	800bb00 <HAL_PCDEx_LPM_Callback>
 80048f2:	e002      	b.n	80048fa <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f006 ff2d 	bl	800b754 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f005 f82c 	bl	800995c <USB_ReadInterrupts>
 8004904:	4603      	mov	r3, r0
 8004906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800490a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800490e:	d10e      	bne.n	800492e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004918:	b29a      	uxth	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004922:	b292      	uxth	r2, r2
 8004924:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f006 fee6 	bl	800b6fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f005 f812 	bl	800995c <USB_ReadInterrupts>
 8004938:	4603      	mov	r3, r0
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004942:	d10b      	bne.n	800495c <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800494c:	b29a      	uxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004956:	b292      	uxth	r2, r2
 8004958:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800495c:	bf00      	nop
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_PCD_SetAddress+0x1a>
 800497a:	2302      	movs	r3, #2
 800497c:	e013      	b.n	80049a6 <HAL_PCD_SetAddress+0x42>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	78fa      	ldrb	r2, [r7, #3]
 8004994:	4611      	mov	r1, r2
 8004996:	4618      	mov	r0, r3
 8004998:	f004 ffb5 	bl	8009906 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	4608      	mov	r0, r1
 80049b8:	4611      	mov	r1, r2
 80049ba:	461a      	mov	r2, r3
 80049bc:	4603      	mov	r3, r0
 80049be:	70fb      	strb	r3, [r7, #3]
 80049c0:	460b      	mov	r3, r1
 80049c2:	803b      	strh	r3, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	da0e      	bge.n	80049f2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	4413      	add	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	705a      	strb	r2, [r3, #1]
 80049f0:	e00e      	b.n	8004a10 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	f003 0207 	and.w	r2, r3, #7
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4413      	add	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a1c:	883a      	ldrh	r2, [r7, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	78ba      	ldrb	r2, [r7, #2]
 8004a26:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a3a:	78bb      	ldrb	r3, [r7, #2]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d102      	bne.n	8004a46 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_PCD_EP_Open+0xa6>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e00e      	b.n	8004a72 <HAL_PCD_EP_Open+0xc4>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68f9      	ldr	r1, [r7, #12]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f002 ffc6 	bl	80079f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004a70:	7afb      	ldrb	r3, [r7, #11]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	460b      	mov	r3, r1
 8004a84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	da0e      	bge.n	8004aac <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	705a      	strb	r2, [r3, #1]
 8004aaa:	e00e      	b.n	8004aca <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	f003 0207 	and.w	r2, r3, #7
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_PCD_EP_Close+0x6a>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e00e      	b.n	8004b02 <HAL_PCD_EP_Close+0x88>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68f9      	ldr	r1, [r7, #12]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f003 faec 	bl	80080d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b086      	sub	sp, #24
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
 8004b16:	460b      	mov	r3, r1
 8004b18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b1a:	7afb      	ldrb	r3, [r7, #11]
 8004b1c:	f003 0207 	and.w	r2, r3, #7
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2200      	movs	r2, #0
 8004b42:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2200      	movs	r2, #0
 8004b48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b4a:	7afb      	ldrb	r3, [r7, #11]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b56:	7afb      	ldrb	r3, [r7, #11]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6979      	ldr	r1, [r7, #20]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f003 fc9f 	bl	80084aa <USB_EPStartXfer>
 8004b6c:	e005      	b.n	8004b7a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6979      	ldr	r1, [r7, #20]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f003 fc98 	bl	80084aa <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	f003 0207 	and.w	r2, r3, #7
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	440b      	add	r3, r1
 8004ba2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004ba6:	681b      	ldr	r3, [r3, #0]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bc4:	7afb      	ldrb	r3, [r7, #11]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c00:	7afb      	ldrb	r3, [r7, #11]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c0c:	7afb      	ldrb	r3, [r7, #11]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6979      	ldr	r1, [r7, #20]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f003 fc44 	bl	80084aa <USB_EPStartXfer>
 8004c22:	e005      	b.n	8004c30 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6979      	ldr	r1, [r7, #20]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f003 fc3d 	bl	80084aa <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	460b      	mov	r3, r1
 8004c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	f003 0207 	and.w	r2, r3, #7
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d901      	bls.n	8004c58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e04c      	b.n	8004cf2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	da0e      	bge.n	8004c7e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	4413      	add	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	705a      	strb	r2, [r3, #1]
 8004c7c:	e00c      	b.n	8004c98 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	4413      	add	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c9e:	78fb      	ldrb	r3, [r7, #3]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_PCD_EP_SetStall+0x7e>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e01c      	b.n	8004cf2 <HAL_PCD_EP_SetStall+0xb8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68f9      	ldr	r1, [r7, #12]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f004 fd1e 	bl	8009708 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d108      	bne.n	8004ce8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	f004 fe4a 	bl	800997c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	460b      	mov	r3, r1
 8004d04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	f003 020f 	and.w	r2, r3, #15
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d901      	bls.n	8004d18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e040      	b.n	8004d9a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	da0e      	bge.n	8004d3e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	4413      	add	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	705a      	strb	r2, [r3, #1]
 8004d3c:	e00e      	b.n	8004d5c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	f003 0207 	and.w	r2, r3, #7
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	4413      	add	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_PCD_EP_ClrStall+0x82>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e00e      	b.n	8004d9a <HAL_PCD_EP_ClrStall+0xa0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68f9      	ldr	r1, [r7, #12]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f004 fd0d 	bl	80097aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b08e      	sub	sp, #56	; 0x38
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004daa:	e2d1      	b.n	8005350 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004db4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004db6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004dc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f040 8152 	bne.w	8005070 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004dcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d150      	bne.n	8004e78 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	81fb      	strh	r3, [r7, #14]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	89fb      	ldrh	r3, [r7, #14]
 8004dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3328      	adds	r3, #40	; 0x28
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4413      	add	r3, r2
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	695a      	ldr	r2, [r3, #20]
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	441a      	add	r2, r3
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004e36:	2100      	movs	r1, #0
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f006 fc44 	bl	800b6c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 8282 	beq.w	8005350 <PCD_EP_ISR_Handler+0x5ae>
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f040 827d 	bne.w	8005350 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	b292      	uxth	r2, r2
 8004e6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e76:	e26b      	b.n	8005350 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d032      	beq.n	8004ef8 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6812      	ldr	r2, [r2, #0]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	f004 fda3 	bl	8009a18 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ede:	4013      	ands	r3, r2
 8004ee0:	823b      	strh	r3, [r7, #16]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	8a3a      	ldrh	r2, [r7, #16]
 8004ee8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eec:	b292      	uxth	r2, r2
 8004eee:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f006 fbbb 	bl	800b66c <HAL_PCD_SetupStageCallback>
 8004ef6:	e22b      	b.n	8005350 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ef8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f280 8227 	bge.w	8005350 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004f0e:	4013      	ands	r3, r2
 8004f10:	83bb      	strh	r3, [r7, #28]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	8bba      	ldrh	r2, [r7, #28]
 8004f18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f1c:	b292      	uxth	r2, r2
 8004f1e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4413      	add	r3, r2
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d019      	beq.n	8004f84 <PCD_EP_ISR_Handler+0x1e2>
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d015      	beq.n	8004f84 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	6959      	ldr	r1, [r3, #20]
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	f004 fd55 	bl	8009a18 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	695a      	ldr	r2, [r3, #20]
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	441a      	add	r2, r3
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f006 fb86 	bl	800b690 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	4413      	add	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d112      	bne.n	8004fd2 <PCD_EP_ISR_Handler+0x230>
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	801a      	strh	r2, [r3, #0]
 8004fd0:	e02f      	b.n	8005032 <PCD_EP_ISR_Handler+0x290>
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b3e      	cmp	r3, #62	; 0x3e
 8004fd8:	d813      	bhi.n	8005002 <PCD_EP_ISR_Handler+0x260>
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <PCD_EP_ISR_Handler+0x252>
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	029b      	lsls	r3, r3, #10
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	801a      	strh	r2, [r3, #0]
 8005000:	e017      	b.n	8005032 <PCD_EP_ISR_Handler+0x290>
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	633b      	str	r3, [r7, #48]	; 0x30
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	2b00      	cmp	r3, #0
 8005014:	d102      	bne.n	800501c <PCD_EP_ISR_Handler+0x27a>
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	3b01      	subs	r3, #1
 800501a:	633b      	str	r3, [r7, #48]	; 0x30
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	b29b      	uxth	r3, r3
 8005020:	029b      	lsls	r3, r3, #10
 8005022:	b29b      	uxth	r3, r3
 8005024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800502c:	b29a      	uxth	r2, r3
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	827b      	strh	r3, [r7, #18]
 8005044:	8a7b      	ldrh	r3, [r7, #18]
 8005046:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800504a:	827b      	strh	r3, [r7, #18]
 800504c:	8a7b      	ldrh	r3, [r7, #18]
 800504e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005052:	827b      	strh	r3, [r7, #18]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	8a7b      	ldrh	r3, [r7, #18]
 800505a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800505e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506a:	b29b      	uxth	r3, r3
 800506c:	8013      	strh	r3, [r2, #0]
 800506e:	e16f      	b.n	8005350 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005082:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005086:	2b00      	cmp	r3, #0
 8005088:	f280 80e4 	bge.w	8005254 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	461a      	mov	r2, r3
 8005092:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29a      	uxth	r2, r3
 800509e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80050a2:	4013      	ands	r3, r2
 80050a4:	853b      	strh	r3, [r7, #40]	; 0x28
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80050b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050ba:	b292      	uxth	r2, r2
 80050bc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80050be:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	4413      	add	r3, r2
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	7b1b      	ldrb	r3, [r3, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d120      	bne.n	800511e <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	4413      	add	r3, r2
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	4413      	add	r3, r2
 80050f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005100:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005102:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8083 	beq.w	8005210 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	6959      	ldr	r1, [r3, #20]
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	88da      	ldrh	r2, [r3, #6]
 8005116:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005118:	f004 fc7e 	bl	8009a18 <USB_ReadPMA>
 800511c:	e078      	b.n	8005210 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	78db      	ldrb	r3, [r3, #3]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d108      	bne.n	8005138 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005126:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005128:	461a      	mov	r2, r3
 800512a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f91d 	bl	800536c <HAL_PCD_EP_DB_Receive>
 8005132:	4603      	mov	r3, r0
 8005134:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005136:	e06b      	b.n	8005210 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	847b      	strh	r3, [r7, #34]	; 0x22
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	441a      	add	r2, r3
 8005162:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005170:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005174:	b29b      	uxth	r3, r3
 8005176:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	461a      	mov	r2, r3
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01f      	beq.n	80051d2 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519a:	b29b      	uxth	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	4413      	add	r3, r2
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	4413      	add	r3, r2
 80051ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051b6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80051b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d028      	beq.n	8005210 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	6959      	ldr	r1, [r3, #20]
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	891a      	ldrh	r2, [r3, #8]
 80051ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051cc:	f004 fc24 	bl	8009a18 <USB_ReadPMA>
 80051d0:	e01e      	b.n	8005210 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051da:	b29b      	uxth	r3, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4413      	add	r3, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	4413      	add	r3, r2
 80051ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051f6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80051f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	6959      	ldr	r1, [r3, #20]
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	895a      	ldrh	r2, [r3, #10]
 800520a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800520c:	f004 fc04 	bl	8009a18 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005216:	441a      	add	r2, r3
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	695a      	ldr	r2, [r3, #20]
 8005220:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005222:	441a      	add	r2, r3
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d004      	beq.n	800523a <PCD_EP_ISR_Handler+0x498>
 8005230:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	429a      	cmp	r2, r3
 8005238:	d206      	bcs.n	8005248 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f006 fa25 	bl	800b690 <HAL_PCD_DataOutStageCallback>
 8005246:	e005      	b.n	8005254 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800524e:	4618      	mov	r0, r3
 8005250:	f003 f92b 	bl	80084aa <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005254:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d078      	beq.n	8005350 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 800525e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	4413      	add	r3, r2
 8005270:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528c:	843b      	strh	r3, [r7, #32]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	441a      	add	r2, r3
 800529c:	8c3b      	ldrh	r3, [r7, #32]
 800529e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	78db      	ldrb	r3, [r3, #3]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d108      	bne.n	80052c4 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d144      	bne.n	8005344 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80052ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d13f      	bne.n	8005344 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4413      	add	r3, r2
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	4413      	add	r3, r2
 80052de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052e8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	8bfb      	ldrh	r3, [r7, #30]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d906      	bls.n	8005302 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	699a      	ldr	r2, [r3, #24]
 80052f8:	8bfb      	ldrh	r3, [r7, #30]
 80052fa:	1ad2      	subs	r2, r2, r3
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	619a      	str	r2, [r3, #24]
 8005300:	e002      	b.n	8005308 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	2200      	movs	r2, #0
 8005306:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d106      	bne.n	800531e <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f006 f9d5 	bl	800b6c6 <HAL_PCD_DataInStageCallback>
 800531c:	e018      	b.n	8005350 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	695a      	ldr	r2, [r3, #20]
 8005322:	8bfb      	ldrh	r3, [r7, #30]
 8005324:	441a      	add	r2, r3
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	69da      	ldr	r2, [r3, #28]
 800532e:	8bfb      	ldrh	r3, [r7, #30]
 8005330:	441a      	add	r2, r3
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800533c:	4618      	mov	r0, r3
 800533e:	f003 f8b4 	bl	80084aa <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005342:	e005      	b.n	8005350 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005344:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005346:	461a      	mov	r2, r3
 8005348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f917 	bl	800557e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005358:	b29b      	uxth	r3, r3
 800535a:	b21b      	sxth	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	f6ff ad25 	blt.w	8004dac <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3738      	adds	r7, #56	; 0x38
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	4613      	mov	r3, r2
 8005378:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d07c      	beq.n	800547e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800538c:	b29b      	uxth	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	4413      	add	r3, r2
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	4413      	add	r3, r2
 800539e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	8b7b      	ldrh	r3, [r7, #26]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d306      	bcc.n	80053c2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	699a      	ldr	r2, [r3, #24]
 80053b8:	8b7b      	ldrh	r3, [r7, #26]
 80053ba:	1ad2      	subs	r2, r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	619a      	str	r2, [r3, #24]
 80053c0:	e002      	b.n	80053c8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2200      	movs	r2, #0
 80053c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d123      	bne.n	8005418 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	833b      	strh	r3, [r7, #24]
 80053ec:	8b3b      	ldrh	r3, [r7, #24]
 80053ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053f2:	833b      	strh	r3, [r7, #24]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	461a      	mov	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	441a      	add	r2, r3
 8005402:	8b3b      	ldrh	r3, [r7, #24]
 8005404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005414:	b29b      	uxth	r3, r3
 8005416:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005418:	88fb      	ldrh	r3, [r7, #6]
 800541a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d01f      	beq.n	8005462 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543c:	82fb      	strh	r3, [r7, #22]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	441a      	add	r2, r3
 800544c:	8afb      	ldrh	r3, [r7, #22]
 800544e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800545e:	b29b      	uxth	r3, r3
 8005460:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005462:	8b7b      	ldrh	r3, [r7, #26]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8085 	beq.w	8005574 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	6959      	ldr	r1, [r3, #20]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	891a      	ldrh	r2, [r3, #8]
 8005476:	8b7b      	ldrh	r3, [r7, #26]
 8005478:	f004 face 	bl	8009a18 <USB_ReadPMA>
 800547c:	e07a      	b.n	8005574 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005486:	b29b      	uxth	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4413      	add	r3, r2
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	4413      	add	r3, r2
 8005498:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	699a      	ldr	r2, [r3, #24]
 80054a8:	8b7b      	ldrh	r3, [r7, #26]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d306      	bcc.n	80054bc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	8b7b      	ldrh	r3, [r7, #26]
 80054b4:	1ad2      	subs	r2, r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	619a      	str	r2, [r3, #24]
 80054ba:	e002      	b.n	80054c2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2200      	movs	r2, #0
 80054c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d123      	bne.n	8005512 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e4:	83fb      	strh	r3, [r7, #30]
 80054e6:	8bfb      	ldrh	r3, [r7, #30]
 80054e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054ec:	83fb      	strh	r3, [r7, #30]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	441a      	add	r2, r3
 80054fc:	8bfb      	ldrh	r3, [r7, #30]
 80054fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550e:	b29b      	uxth	r3, r3
 8005510:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	d11f      	bne.n	800555c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005536:	83bb      	strh	r3, [r7, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	8bbb      	ldrh	r3, [r7, #28]
 8005548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005558:	b29b      	uxth	r3, r3
 800555a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800555c:	8b7b      	ldrh	r3, [r7, #26]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d008      	beq.n	8005574 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	6959      	ldr	r1, [r3, #20]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	895a      	ldrh	r2, [r3, #10]
 800556e:	8b7b      	ldrh	r3, [r7, #26]
 8005570:	f004 fa52 	bl	8009a18 <USB_ReadPMA>
    }
  }

  return count;
 8005574:	8b7b      	ldrh	r3, [r7, #26]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b094      	sub	sp, #80	; 0x50
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	4613      	mov	r3, r2
 800558a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800558c:	88fb      	ldrh	r3, [r7, #6]
 800558e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 8136 	beq.w	8005804 <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	4413      	add	r3, r2
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	4413      	add	r3, r2
 80055b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055bc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	699a      	ldr	r2, [r3, #24]
 80055c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d907      	bls.n	80055dc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	699a      	ldr	r2, [r3, #24]
 80055d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055d4:	1ad2      	subs	r2, r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	619a      	str	r2, [r3, #24]
 80055da:	e002      	b.n	80055e2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2200      	movs	r2, #0
 80055e0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d12c      	bne.n	8005644 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	4619      	mov	r1, r3
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f006 f868 	bl	800b6c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8238 	beq.w	8005a72 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561c:	82fb      	strh	r3, [r7, #22]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	441a      	add	r2, r3
 800562c:	8afb      	ldrh	r3, [r7, #22]
 800562e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800563a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563e:	b29b      	uxth	r3, r3
 8005640:	8013      	strh	r3, [r2, #0]
 8005642:	e216      	b.n	8005a72 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d01f      	beq.n	800568e <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	b29b      	uxth	r3, r3
 8005660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005668:	857b      	strh	r3, [r7, #42]	; 0x2a
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	441a      	add	r2, r3
 8005678:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800567a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800567e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800568a:	b29b      	uxth	r3, r3
 800568c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005694:	2b01      	cmp	r3, #1
 8005696:	f040 81ec 	bne.w	8005a72 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056a2:	441a      	add	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056b0:	441a      	add	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	6a1a      	ldr	r2, [r3, #32]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d309      	bcc.n	80056d6 <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ce:	1ad2      	subs	r2, r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	621a      	str	r2, [r3, #32]
 80056d4:	e015      	b.n	8005702 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d107      	bne.n	80056ee <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 80056de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056e2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80056ec:	e009      	b.n	8005702 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2200      	movs	r2, #0
 8005700:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	785b      	ldrb	r3, [r3, #1]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d155      	bne.n	80057b6 <HAL_PCD_EP_DB_Transmit+0x238>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005718:	b29b      	uxth	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	00da      	lsls	r2, r3, #3
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005734:	2b00      	cmp	r3, #0
 8005736:	d112      	bne.n	800575e <HAL_PCD_EP_DB_Transmit+0x1e0>
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005742:	b29a      	uxth	r2, r3
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	801a      	strh	r2, [r3, #0]
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005756:	b29a      	uxth	r2, r3
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	e047      	b.n	80057ee <HAL_PCD_EP_DB_Transmit+0x270>
 800575e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005760:	2b3e      	cmp	r3, #62	; 0x3e
 8005762:	d811      	bhi.n	8005788 <HAL_PCD_EP_DB_Transmit+0x20a>
 8005764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005766:	085b      	lsrs	r3, r3, #1
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_PCD_EP_DB_Transmit+0x1fc>
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	3301      	adds	r3, #1
 8005778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	b29b      	uxth	r3, r3
 800577e:	029b      	lsls	r3, r3, #10
 8005780:	b29a      	uxth	r2, r3
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	801a      	strh	r2, [r3, #0]
 8005786:	e032      	b.n	80057ee <HAL_PCD_EP_DB_Transmit+0x270>
 8005788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800578e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005790:	f003 031f 	and.w	r3, r3, #31
 8005794:	2b00      	cmp	r3, #0
 8005796:	d102      	bne.n	800579e <HAL_PCD_EP_DB_Transmit+0x220>
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	3b01      	subs	r3, #1
 800579c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	029b      	lsls	r3, r3, #10
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	801a      	strh	r2, [r3, #0]
 80057b4:	e01b      	b.n	80057ee <HAL_PCD_EP_DB_Transmit+0x270>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	785b      	ldrb	r3, [r3, #1]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d117      	bne.n	80057ee <HAL_PCD_EP_DB_Transmit+0x270>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	4413      	add	r3, r2
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	00da      	lsls	r2, r3, #3
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	4413      	add	r3, r2
 80057e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057e4:	623b      	str	r3, [r7, #32]
 80057e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	6959      	ldr	r1, [r3, #20]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	891a      	ldrh	r2, [r3, #8]
 80057fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f004 f8c9 	bl	8009994 <USB_WritePMA>
 8005802:	e136      	b.n	8005a72 <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580c:	b29b      	uxth	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4413      	add	r3, r2
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	4413      	add	r3, r2
 800581e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005828:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	699a      	ldr	r2, [r3, #24]
 8005830:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005834:	429a      	cmp	r2, r3
 8005836:	d307      	bcc.n	8005848 <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005840:	1ad2      	subs	r2, r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	619a      	str	r2, [r3, #24]
 8005846:	e002      	b.n	800584e <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2200      	movs	r2, #0
 800584c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d12e      	bne.n	80058b4 <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	4619      	mov	r1, r3
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f005 ff32 	bl	800b6c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005868:	2b00      	cmp	r3, #0
 800586a:	f040 8102 	bne.w	8005a72 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005888:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	441a      	add	r2, r3
 800589a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800589e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	8013      	strh	r3, [r2, #0]
 80058b2:	e0de      	b.n	8005a72 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80058b4:	88fb      	ldrh	r3, [r7, #6]
 80058b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d11f      	bne.n	80058fe <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d8:	867b      	strh	r3, [r7, #50]	; 0x32
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	441a      	add	r2, r3
 80058e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80058ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005904:	2b01      	cmp	r3, #1
 8005906:	f040 80b4 	bne.w	8005a72 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	695a      	ldr	r2, [r3, #20]
 800590e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005912:	441a      	add	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	69da      	ldr	r2, [r3, #28]
 800591c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005920:	441a      	add	r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6a1a      	ldr	r2, [r3, #32]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	429a      	cmp	r2, r3
 8005930:	d309      	bcc.n	8005946 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	6a1a      	ldr	r2, [r3, #32]
 800593c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800593e:	1ad2      	subs	r2, r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	621a      	str	r2, [r3, #32]
 8005944:	e015      	b.n	8005972 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d107      	bne.n	800595e <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 800594e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005952:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800595c:	e009      	b.n	8005972 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2200      	movs	r2, #0
 8005968:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	643b      	str	r3, [r7, #64]	; 0x40
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d155      	bne.n	8005a2c <HAL_PCD_EP_DB_Transmit+0x4ae>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	63bb      	str	r3, [r7, #56]	; 0x38
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598e:	b29b      	uxth	r3, r3
 8005990:	461a      	mov	r2, r3
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	4413      	add	r3, r2
 8005996:	63bb      	str	r3, [r7, #56]	; 0x38
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	00da      	lsls	r2, r3, #3
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	4413      	add	r3, r2
 80059a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059a6:	637b      	str	r3, [r7, #52]	; 0x34
 80059a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d112      	bne.n	80059d4 <HAL_PCD_EP_DB_Transmit+0x456>
 80059ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	e044      	b.n	8005a5e <HAL_PCD_EP_DB_Transmit+0x4e0>
 80059d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d6:	2b3e      	cmp	r3, #62	; 0x3e
 80059d8:	d811      	bhi.n	80059fe <HAL_PCD_EP_DB_Transmit+0x480>
 80059da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059dc:	085b      	lsrs	r3, r3, #1
 80059de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_PCD_EP_DB_Transmit+0x472>
 80059ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ec:	3301      	adds	r3, #1
 80059ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	029b      	lsls	r3, r3, #10
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e02f      	b.n	8005a5e <HAL_PCD_EP_DB_Transmit+0x4e0>
 80059fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <HAL_PCD_EP_DB_Transmit+0x496>
 8005a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a10:	3b01      	subs	r3, #1
 8005a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	029b      	lsls	r3, r3, #10
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e018      	b.n	8005a5e <HAL_PCD_EP_DB_Transmit+0x4e0>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	785b      	ldrb	r3, [r3, #1]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d114      	bne.n	8005a5e <HAL_PCD_EP_DB_Transmit+0x4e0>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a42:	4413      	add	r3, r2
 8005a44:	643b      	str	r3, [r7, #64]	; 0x40
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	00da      	lsls	r2, r3, #3
 8005a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a4e:	4413      	add	r3, r2
 8005a50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6959      	ldr	r1, [r3, #20]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	895a      	ldrh	r2, [r3, #10]
 8005a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f003 ff91 	bl	8009994 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a8c:	82bb      	strh	r3, [r7, #20]
 8005a8e:	8abb      	ldrh	r3, [r7, #20]
 8005a90:	f083 0310 	eor.w	r3, r3, #16
 8005a94:	82bb      	strh	r3, [r7, #20]
 8005a96:	8abb      	ldrh	r3, [r7, #20]
 8005a98:	f083 0320 	eor.w	r3, r3, #32
 8005a9c:	82bb      	strh	r3, [r7, #20]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	441a      	add	r2, r3
 8005aac:	8abb      	ldrh	r3, [r7, #20]
 8005aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3750      	adds	r7, #80	; 0x50
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	607b      	str	r3, [r7, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	817b      	strh	r3, [r7, #10]
 8005ada:	4613      	mov	r3, r2
 8005adc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005ade:	897b      	ldrh	r3, [r7, #10]
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00b      	beq.n	8005b02 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aea:	897b      	ldrh	r3, [r7, #10]
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e009      	b.n	8005b16 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b02:	897a      	ldrh	r2, [r7, #10]
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005b16:	893b      	ldrh	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d107      	bne.n	8005b2c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	80da      	strh	r2, [r3, #6]
 8005b2a:	e00b      	b.n	8005b44 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	0c1b      	lsrs	r3, r3, #16
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f043 0302 	orr.w	r3, r3, #2
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8005baa:	bf00      	nop
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d141      	bne.n	8005c46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bc2:	4b4b      	ldr	r3, [pc, #300]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bce:	d131      	bne.n	8005c34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bd0:	4b47      	ldr	r3, [pc, #284]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bd6:	4a46      	ldr	r2, [pc, #280]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005be0:	4b43      	ldr	r3, [pc, #268]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005be8:	4a41      	ldr	r2, [pc, #260]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bf0:	4b40      	ldr	r3, [pc, #256]	; (8005cf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2232      	movs	r2, #50	; 0x32
 8005bf6:	fb02 f303 	mul.w	r3, r2, r3
 8005bfa:	4a3f      	ldr	r2, [pc, #252]	; (8005cf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005c00:	0c9b      	lsrs	r3, r3, #18
 8005c02:	3301      	adds	r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c06:	e002      	b.n	8005c0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c0e:	4b38      	ldr	r3, [pc, #224]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1a:	d102      	bne.n	8005c22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f2      	bne.n	8005c08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c22:	4b33      	ldr	r3, [pc, #204]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c2e:	d158      	bne.n	8005ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e057      	b.n	8005ce4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c34:	4b2e      	ldr	r3, [pc, #184]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c3a:	4a2d      	ldr	r2, [pc, #180]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005c44:	e04d      	b.n	8005ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c4c:	d141      	bne.n	8005cd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c4e:	4b28      	ldr	r3, [pc, #160]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c5a:	d131      	bne.n	8005cc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c5c:	4b24      	ldr	r3, [pc, #144]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c62:	4a23      	ldr	r2, [pc, #140]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c6c:	4b20      	ldr	r3, [pc, #128]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c74:	4a1e      	ldr	r2, [pc, #120]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c7c:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2232      	movs	r2, #50	; 0x32
 8005c82:	fb02 f303 	mul.w	r3, r2, r3
 8005c86:	4a1c      	ldr	r2, [pc, #112]	; (8005cf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c88:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8c:	0c9b      	lsrs	r3, r3, #18
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c92:	e002      	b.n	8005c9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c9a:	4b15      	ldr	r3, [pc, #84]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca6:	d102      	bne.n	8005cae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1f2      	bne.n	8005c94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cae:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cba:	d112      	bne.n	8005ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e011      	b.n	8005ce4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cc6:	4a0a      	ldr	r2, [pc, #40]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ccc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005cd0:	e007      	b.n	8005ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005cd2:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cda:	4a05      	ldr	r2, [pc, #20]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ce0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	40007000 	.word	0x40007000
 8005cf4:	20000000 	.word	0x20000000
 8005cf8:	431bde83 	.word	0x431bde83

08005cfc <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8005d00:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005d0c:	f7ff ff4b 	bl	8005ba6 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005d10:	4b18      	ldr	r3, [pc, #96]	; (8005d74 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005d12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005d16:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 8005d18:	4b16      	ldr	r3, [pc, #88]	; (8005d74 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8005d24:	f000 f828 	bl	8005d78 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8005d28:	4b12      	ldr	r3, [pc, #72]	; (8005d74 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005d2a:	2208      	movs	r2, #8
 8005d2c:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0U)
 8005d2e:	4b11      	ldr	r3, [pc, #68]	; (8005d74 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d32:	f003 0310 	and.w	r3, r3, #16
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d004      	beq.n	8005d44 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8005d3a:	f000 f824 	bl	8005d86 <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005d40:	2210      	movs	r2, #16
 8005d42:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 8005d44:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8005d50:	f000 f820 	bl	8005d94 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8005d54:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005d56:	2220      	movs	r2, #32
 8005d58:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0U)
 8005d5a:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8005d66:	f000 f81c 	bl	8005da2 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8005d6a:	4b02      	ldr	r3, [pc, #8]	; (8005d74 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005d6c:	2240      	movs	r2, #64	; 0x40
 8005d6e:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8005d70:	bf00      	nop
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40010400 	.word	0x40010400

08005d78 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8005d86:	b480      	push	{r7}
 8005d88:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 8005da2:	b480      	push	{r7}
 8005da4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005db4:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	4a04      	ldr	r2, [pc, #16]	; (8005dcc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dbe:	6093      	str	r3, [r2, #8]
}
 8005dc0:	bf00      	nop
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40007000 	.word	0x40007000

08005dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e308      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d075      	beq.n	8005eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dee:	4ba3      	ldr	r3, [pc, #652]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 030c 	and.w	r3, r3, #12
 8005df6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005df8:	4ba0      	ldr	r3, [pc, #640]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f003 0303 	and.w	r3, r3, #3
 8005e00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	2b0c      	cmp	r3, #12
 8005e06:	d102      	bne.n	8005e0e <HAL_RCC_OscConfig+0x3e>
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d002      	beq.n	8005e14 <HAL_RCC_OscConfig+0x44>
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d10b      	bne.n	8005e2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e14:	4b99      	ldr	r3, [pc, #612]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d05b      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x108>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d157      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e2e3      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e34:	d106      	bne.n	8005e44 <HAL_RCC_OscConfig+0x74>
 8005e36:	4b91      	ldr	r3, [pc, #580]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a90      	ldr	r2, [pc, #576]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	e01d      	b.n	8005e80 <HAL_RCC_OscConfig+0xb0>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e4c:	d10c      	bne.n	8005e68 <HAL_RCC_OscConfig+0x98>
 8005e4e:	4b8b      	ldr	r3, [pc, #556]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a8a      	ldr	r2, [pc, #552]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	4b88      	ldr	r3, [pc, #544]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a87      	ldr	r2, [pc, #540]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	e00b      	b.n	8005e80 <HAL_RCC_OscConfig+0xb0>
 8005e68:	4b84      	ldr	r3, [pc, #528]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a83      	ldr	r2, [pc, #524]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	4b81      	ldr	r3, [pc, #516]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a80      	ldr	r2, [pc, #512]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d013      	beq.n	8005eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fb fc66 	bl	8001758 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e90:	f7fb fc62 	bl	8001758 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b64      	cmp	r3, #100	; 0x64
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e2a8      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ea2:	4b76      	ldr	r3, [pc, #472]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0xc0>
 8005eae:	e014      	b.n	8005eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb0:	f7fb fc52 	bl	8001758 <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eb8:	f7fb fc4e 	bl	8001758 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b64      	cmp	r3, #100	; 0x64
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e294      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005eca:	4b6c      	ldr	r3, [pc, #432]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1f0      	bne.n	8005eb8 <HAL_RCC_OscConfig+0xe8>
 8005ed6:	e000      	b.n	8005eda <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d075      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ee6:	4b65      	ldr	r3, [pc, #404]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 030c 	and.w	r3, r3, #12
 8005eee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ef0:	4b62      	ldr	r3, [pc, #392]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	2b0c      	cmp	r3, #12
 8005efe:	d102      	bne.n	8005f06 <HAL_RCC_OscConfig+0x136>
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d002      	beq.n	8005f0c <HAL_RCC_OscConfig+0x13c>
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d11f      	bne.n	8005f4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f0c:	4b5b      	ldr	r3, [pc, #364]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d005      	beq.n	8005f24 <HAL_RCC_OscConfig+0x154>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e267      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f24:	4b55      	ldr	r3, [pc, #340]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	061b      	lsls	r3, r3, #24
 8005f32:	4952      	ldr	r1, [pc, #328]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f38:	4b51      	ldr	r3, [pc, #324]	; (8006080 <HAL_RCC_OscConfig+0x2b0>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fb fbbf 	bl	80016c0 <HAL_InitTick>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d043      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e253      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d023      	beq.n	8005f9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f54:	4b49      	ldr	r3, [pc, #292]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a48      	ldr	r2, [pc, #288]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f60:	f7fb fbfa 	bl	8001758 <HAL_GetTick>
 8005f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f68:	f7fb fbf6 	bl	8001758 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e23c      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f7a:	4b40      	ldr	r3, [pc, #256]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0f0      	beq.n	8005f68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f86:	4b3d      	ldr	r3, [pc, #244]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	061b      	lsls	r3, r3, #24
 8005f94:	4939      	ldr	r1, [pc, #228]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	604b      	str	r3, [r1, #4]
 8005f9a:	e01a      	b.n	8005fd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f9c:	4b37      	ldr	r3, [pc, #220]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a36      	ldr	r2, [pc, #216]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005fa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa8:	f7fb fbd6 	bl	8001758 <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fb0:	f7fb fbd2 	bl	8001758 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e218      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fc2:	4b2e      	ldr	r3, [pc, #184]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f0      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x1e0>
 8005fce:	e000      	b.n	8005fd2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fd0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d03c      	beq.n	8006058 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d01c      	beq.n	8006020 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fe6:	4b25      	ldr	r3, [pc, #148]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fec:	4a23      	ldr	r2, [pc, #140]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005fee:	f043 0301 	orr.w	r3, r3, #1
 8005ff2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff6:	f7fb fbaf 	bl	8001758 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ffc:	e008      	b.n	8006010 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ffe:	f7fb fbab 	bl	8001758 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e1f1      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006010:	4b1a      	ldr	r3, [pc, #104]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8006012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0ef      	beq.n	8005ffe <HAL_RCC_OscConfig+0x22e>
 800601e:	e01b      	b.n	8006058 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006020:	4b16      	ldr	r3, [pc, #88]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8006022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006026:	4a15      	ldr	r2, [pc, #84]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006030:	f7fb fb92 	bl	8001758 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006038:	f7fb fb8e 	bl	8001758 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e1d4      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800604a:	4b0c      	ldr	r3, [pc, #48]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 800604c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1ef      	bne.n	8006038 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 80ab 	beq.w	80061bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006066:	2300      	movs	r3, #0
 8006068:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800606a:	4b04      	ldr	r3, [pc, #16]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 800606c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <HAL_RCC_OscConfig+0x2b4>
 8006076:	2301      	movs	r3, #1
 8006078:	e005      	b.n	8006086 <HAL_RCC_OscConfig+0x2b6>
 800607a:	bf00      	nop
 800607c:	40021000 	.word	0x40021000
 8006080:	20000004 	.word	0x20000004
 8006084:	2300      	movs	r3, #0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00d      	beq.n	80060a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800608a:	4baf      	ldr	r3, [pc, #700]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	4aae      	ldr	r2, [pc, #696]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006094:	6593      	str	r3, [r2, #88]	; 0x58
 8006096:	4bac      	ldr	r3, [pc, #688]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80060a2:	2301      	movs	r3, #1
 80060a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060a6:	4ba9      	ldr	r3, [pc, #676]	; (800634c <HAL_RCC_OscConfig+0x57c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d118      	bne.n	80060e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060b2:	4ba6      	ldr	r3, [pc, #664]	; (800634c <HAL_RCC_OscConfig+0x57c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4aa5      	ldr	r2, [pc, #660]	; (800634c <HAL_RCC_OscConfig+0x57c>)
 80060b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060be:	f7fb fb4b 	bl	8001758 <HAL_GetTick>
 80060c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060c4:	e008      	b.n	80060d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c6:	f7fb fb47 	bl	8001758 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e18d      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060d8:	4b9c      	ldr	r3, [pc, #624]	; (800634c <HAL_RCC_OscConfig+0x57c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0f0      	beq.n	80060c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d108      	bne.n	80060fe <HAL_RCC_OscConfig+0x32e>
 80060ec:	4b96      	ldr	r3, [pc, #600]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 80060ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f2:	4a95      	ldr	r2, [pc, #596]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 80060f4:	f043 0301 	orr.w	r3, r3, #1
 80060f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060fc:	e024      	b.n	8006148 <HAL_RCC_OscConfig+0x378>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b05      	cmp	r3, #5
 8006104:	d110      	bne.n	8006128 <HAL_RCC_OscConfig+0x358>
 8006106:	4b90      	ldr	r3, [pc, #576]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610c:	4a8e      	ldr	r2, [pc, #568]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 800610e:	f043 0304 	orr.w	r3, r3, #4
 8006112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006116:	4b8c      	ldr	r3, [pc, #560]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611c:	4a8a      	ldr	r2, [pc, #552]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 800611e:	f043 0301 	orr.w	r3, r3, #1
 8006122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006126:	e00f      	b.n	8006148 <HAL_RCC_OscConfig+0x378>
 8006128:	4b87      	ldr	r3, [pc, #540]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 800612a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612e:	4a86      	ldr	r2, [pc, #536]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006130:	f023 0301 	bic.w	r3, r3, #1
 8006134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006138:	4b83      	ldr	r3, [pc, #524]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 800613a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613e:	4a82      	ldr	r2, [pc, #520]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006140:	f023 0304 	bic.w	r3, r3, #4
 8006144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d016      	beq.n	800617e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006150:	f7fb fb02 	bl	8001758 <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006156:	e00a      	b.n	800616e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006158:	f7fb fafe 	bl	8001758 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	f241 3288 	movw	r2, #5000	; 0x1388
 8006166:	4293      	cmp	r3, r2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e142      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800616e:	4b76      	ldr	r3, [pc, #472]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d0ed      	beq.n	8006158 <HAL_RCC_OscConfig+0x388>
 800617c:	e015      	b.n	80061aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800617e:	f7fb faeb 	bl	8001758 <HAL_GetTick>
 8006182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006184:	e00a      	b.n	800619c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006186:	f7fb fae7 	bl	8001758 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	f241 3288 	movw	r2, #5000	; 0x1388
 8006194:	4293      	cmp	r3, r2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e12b      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800619c:	4b6a      	ldr	r3, [pc, #424]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1ed      	bne.n	8006186 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061aa:	7ffb      	ldrb	r3, [r7, #31]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d105      	bne.n	80061bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b0:	4b65      	ldr	r3, [pc, #404]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 80061b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b4:	4a64      	ldr	r2, [pc, #400]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 80061b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d03c      	beq.n	8006242 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01c      	beq.n	800620a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061d0:	4b5d      	ldr	r3, [pc, #372]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 80061d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061d6:	4a5c      	ldr	r2, [pc, #368]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e0:	f7fb faba 	bl	8001758 <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061e6:	e008      	b.n	80061fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061e8:	f7fb fab6 	bl	8001758 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e0fc      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061fa:	4b53      	ldr	r3, [pc, #332]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 80061fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0ef      	beq.n	80061e8 <HAL_RCC_OscConfig+0x418>
 8006208:	e01b      	b.n	8006242 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800620a:	4b4f      	ldr	r3, [pc, #316]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 800620c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006210:	4a4d      	ldr	r2, [pc, #308]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006212:	f023 0301 	bic.w	r3, r3, #1
 8006216:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800621a:	f7fb fa9d 	bl	8001758 <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006222:	f7fb fa99 	bl	8001758 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e0df      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006234:	4b44      	ldr	r3, [pc, #272]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006236:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1ef      	bne.n	8006222 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 80d3 	beq.w	80063f2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800624c:	4b3e      	ldr	r3, [pc, #248]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 030c 	and.w	r3, r3, #12
 8006254:	2b0c      	cmp	r3, #12
 8006256:	f000 808d 	beq.w	8006374 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d15a      	bne.n	8006318 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006262:	4b39      	ldr	r3, [pc, #228]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a38      	ldr	r2, [pc, #224]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006268:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800626c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626e:	f7fb fa73 	bl	8001758 <HAL_GetTick>
 8006272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006274:	e008      	b.n	8006288 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006276:	f7fb fa6f 	bl	8001758 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	d901      	bls.n	8006288 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e0b5      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006288:	4b2f      	ldr	r3, [pc, #188]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1f0      	bne.n	8006276 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006294:	4b2c      	ldr	r3, [pc, #176]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	4b2d      	ldr	r3, [pc, #180]	; (8006350 <HAL_RCC_OscConfig+0x580>)
 800629a:	4013      	ands	r3, r2
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6a11      	ldr	r1, [r2, #32]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062a4:	3a01      	subs	r2, #1
 80062a6:	0112      	lsls	r2, r2, #4
 80062a8:	4311      	orrs	r1, r2
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80062ae:	0212      	lsls	r2, r2, #8
 80062b0:	4311      	orrs	r1, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80062b6:	0852      	lsrs	r2, r2, #1
 80062b8:	3a01      	subs	r2, #1
 80062ba:	0552      	lsls	r2, r2, #21
 80062bc:	4311      	orrs	r1, r2
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062c2:	0852      	lsrs	r2, r2, #1
 80062c4:	3a01      	subs	r2, #1
 80062c6:	0652      	lsls	r2, r2, #25
 80062c8:	4311      	orrs	r1, r2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80062ce:	06d2      	lsls	r2, r2, #27
 80062d0:	430a      	orrs	r2, r1
 80062d2:	491d      	ldr	r1, [pc, #116]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062d8:	4b1b      	ldr	r3, [pc, #108]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1a      	ldr	r2, [pc, #104]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 80062de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062e4:	4b18      	ldr	r3, [pc, #96]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4a17      	ldr	r2, [pc, #92]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 80062ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f0:	f7fb fa32 	bl	8001758 <HAL_GetTick>
 80062f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f8:	f7fb fa2e 	bl	8001758 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e074      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800630a:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0f0      	beq.n	80062f8 <HAL_RCC_OscConfig+0x528>
 8006316:	e06c      	b.n	80063f2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006318:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 800631e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006322:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006324:	4b08      	ldr	r3, [pc, #32]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	4a07      	ldr	r2, [pc, #28]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 800632a:	f023 0303 	bic.w	r3, r3, #3
 800632e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	4a04      	ldr	r2, [pc, #16]	; (8006348 <HAL_RCC_OscConfig+0x578>)
 8006336:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800633a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800633e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006340:	f7fb fa0a 	bl	8001758 <HAL_GetTick>
 8006344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006346:	e00e      	b.n	8006366 <HAL_RCC_OscConfig+0x596>
 8006348:	40021000 	.word	0x40021000
 800634c:	40007000 	.word	0x40007000
 8006350:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006354:	f7fb fa00 	bl	8001758 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e046      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006366:	4b25      	ldr	r3, [pc, #148]	; (80063fc <HAL_RCC_OscConfig+0x62c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1f0      	bne.n	8006354 <HAL_RCC_OscConfig+0x584>
 8006372:	e03e      	b.n	80063f2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d101      	bne.n	8006380 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e039      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006380:	4b1e      	ldr	r3, [pc, #120]	; (80063fc <HAL_RCC_OscConfig+0x62c>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f003 0203 	and.w	r2, r3, #3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	429a      	cmp	r2, r3
 8006392:	d12c      	bne.n	80063ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	3b01      	subs	r3, #1
 80063a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d123      	bne.n	80063ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d11b      	bne.n	80063ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d113      	bne.n	80063ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	085b      	lsrs	r3, r3, #1
 80063d2:	3b01      	subs	r3, #1
 80063d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d109      	bne.n	80063ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	3b01      	subs	r3, #1
 80063e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d001      	beq.n	80063f2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3720      	adds	r7, #32
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	40021000 	.word	0x40021000

08006400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e11e      	b.n	8006656 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006418:	4b91      	ldr	r3, [pc, #580]	; (8006660 <HAL_RCC_ClockConfig+0x260>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 030f 	and.w	r3, r3, #15
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d910      	bls.n	8006448 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006426:	4b8e      	ldr	r3, [pc, #568]	; (8006660 <HAL_RCC_ClockConfig+0x260>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f023 020f 	bic.w	r2, r3, #15
 800642e:	498c      	ldr	r1, [pc, #560]	; (8006660 <HAL_RCC_ClockConfig+0x260>)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	4313      	orrs	r3, r2
 8006434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006436:	4b8a      	ldr	r3, [pc, #552]	; (8006660 <HAL_RCC_ClockConfig+0x260>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d001      	beq.n	8006448 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e106      	b.n	8006656 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d073      	beq.n	800653c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2b03      	cmp	r3, #3
 800645a:	d129      	bne.n	80064b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800645c:	4b81      	ldr	r3, [pc, #516]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e0f4      	b.n	8006656 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800646c:	f000 f99e 	bl	80067ac <RCC_GetSysClockFreqFromPLLSource>
 8006470:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	4a7c      	ldr	r2, [pc, #496]	; (8006668 <HAL_RCC_ClockConfig+0x268>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d93f      	bls.n	80064fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800647a:	4b7a      	ldr	r3, [pc, #488]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800648e:	2b00      	cmp	r3, #0
 8006490:	d033      	beq.n	80064fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006496:	2b00      	cmp	r3, #0
 8006498:	d12f      	bne.n	80064fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800649a:	4b72      	ldr	r3, [pc, #456]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064a2:	4a70      	ldr	r2, [pc, #448]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 80064a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064aa:	2380      	movs	r3, #128	; 0x80
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	e024      	b.n	80064fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d107      	bne.n	80064c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064b8:	4b6a      	ldr	r3, [pc, #424]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d109      	bne.n	80064d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e0c6      	b.n	8006656 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064c8:	4b66      	ldr	r3, [pc, #408]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0be      	b.n	8006656 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80064d8:	f000 f8ce 	bl	8006678 <HAL_RCC_GetSysClockFreq>
 80064dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	4a61      	ldr	r2, [pc, #388]	; (8006668 <HAL_RCC_ClockConfig+0x268>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d909      	bls.n	80064fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064e6:	4b5f      	ldr	r3, [pc, #380]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ee:	4a5d      	ldr	r2, [pc, #372]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 80064f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80064f6:	2380      	movs	r3, #128	; 0x80
 80064f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064fa:	4b5a      	ldr	r3, [pc, #360]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f023 0203 	bic.w	r2, r3, #3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	4957      	ldr	r1, [pc, #348]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 8006508:	4313      	orrs	r3, r2
 800650a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800650c:	f7fb f924 	bl	8001758 <HAL_GetTick>
 8006510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006512:	e00a      	b.n	800652a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006514:	f7fb f920 	bl	8001758 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006522:	4293      	cmp	r3, r2
 8006524:	d901      	bls.n	800652a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e095      	b.n	8006656 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800652a:	4b4e      	ldr	r3, [pc, #312]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 020c 	and.w	r2, r3, #12
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	429a      	cmp	r2, r3
 800653a:	d1eb      	bne.n	8006514 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d023      	beq.n	8006590 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006554:	4b43      	ldr	r3, [pc, #268]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4a42      	ldr	r2, [pc, #264]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 800655a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800655e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800656c:	4b3d      	ldr	r3, [pc, #244]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006574:	4a3b      	ldr	r2, [pc, #236]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 8006576:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800657a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800657c:	4b39      	ldr	r3, [pc, #228]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	4936      	ldr	r1, [pc, #216]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 800658a:	4313      	orrs	r3, r2
 800658c:	608b      	str	r3, [r1, #8]
 800658e:	e008      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2b80      	cmp	r3, #128	; 0x80
 8006594:	d105      	bne.n	80065a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006596:	4b33      	ldr	r3, [pc, #204]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	4a32      	ldr	r2, [pc, #200]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 800659c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065a2:	4b2f      	ldr	r3, [pc, #188]	; (8006660 <HAL_RCC_ClockConfig+0x260>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d21d      	bcs.n	80065ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b0:	4b2b      	ldr	r3, [pc, #172]	; (8006660 <HAL_RCC_ClockConfig+0x260>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f023 020f 	bic.w	r2, r3, #15
 80065b8:	4929      	ldr	r1, [pc, #164]	; (8006660 <HAL_RCC_ClockConfig+0x260>)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	4313      	orrs	r3, r2
 80065be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80065c0:	f7fb f8ca 	bl	8001758 <HAL_GetTick>
 80065c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c6:	e00a      	b.n	80065de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c8:	f7fb f8c6 	bl	8001758 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e03b      	b.n	8006656 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065de:	4b20      	ldr	r3, [pc, #128]	; (8006660 <HAL_RCC_ClockConfig+0x260>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d1ed      	bne.n	80065c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d008      	beq.n	800660a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065f8:	4b1a      	ldr	r3, [pc, #104]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	4917      	ldr	r1, [pc, #92]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 8006606:	4313      	orrs	r3, r2
 8006608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006616:	4b13      	ldr	r3, [pc, #76]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	490f      	ldr	r1, [pc, #60]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 8006626:	4313      	orrs	r3, r2
 8006628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800662a:	f000 f825 	bl	8006678 <HAL_RCC_GetSysClockFreq>
 800662e:	4602      	mov	r2, r0
 8006630:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <HAL_RCC_ClockConfig+0x264>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	091b      	lsrs	r3, r3, #4
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	490c      	ldr	r1, [pc, #48]	; (800666c <HAL_RCC_ClockConfig+0x26c>)
 800663c:	5ccb      	ldrb	r3, [r1, r3]
 800663e:	f003 031f 	and.w	r3, r3, #31
 8006642:	fa22 f303 	lsr.w	r3, r2, r3
 8006646:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <HAL_RCC_ClockConfig+0x270>)
 8006648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800664a:	4b0a      	ldr	r3, [pc, #40]	; (8006674 <HAL_RCC_ClockConfig+0x274>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f7fb f836 	bl	80016c0 <HAL_InitTick>
 8006654:	4603      	mov	r3, r0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	40022000 	.word	0x40022000
 8006664:	40021000 	.word	0x40021000
 8006668:	04c4b400 	.word	0x04c4b400
 800666c:	0800bdc8 	.word	0x0800bdc8
 8006670:	20000000 	.word	0x20000000
 8006674:	20000004 	.word	0x20000004

08006678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800667e:	4b2c      	ldr	r3, [pc, #176]	; (8006730 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 030c 	and.w	r3, r3, #12
 8006686:	2b04      	cmp	r3, #4
 8006688:	d102      	bne.n	8006690 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800668a:	4b2a      	ldr	r3, [pc, #168]	; (8006734 <HAL_RCC_GetSysClockFreq+0xbc>)
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	e047      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006690:	4b27      	ldr	r3, [pc, #156]	; (8006730 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 030c 	and.w	r3, r3, #12
 8006698:	2b08      	cmp	r3, #8
 800669a:	d102      	bne.n	80066a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800669c:	4b26      	ldr	r3, [pc, #152]	; (8006738 <HAL_RCC_GetSysClockFreq+0xc0>)
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	e03e      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80066a2:	4b23      	ldr	r3, [pc, #140]	; (8006730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 030c 	and.w	r3, r3, #12
 80066aa:	2b0c      	cmp	r3, #12
 80066ac:	d136      	bne.n	800671c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066ae:	4b20      	ldr	r3, [pc, #128]	; (8006730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066b8:	4b1d      	ldr	r3, [pc, #116]	; (8006730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	091b      	lsrs	r3, r3, #4
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	3301      	adds	r3, #1
 80066c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d10c      	bne.n	80066e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066cc:	4a1a      	ldr	r2, [pc, #104]	; (8006738 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d4:	4a16      	ldr	r2, [pc, #88]	; (8006730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066d6:	68d2      	ldr	r2, [r2, #12]
 80066d8:	0a12      	lsrs	r2, r2, #8
 80066da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	617b      	str	r3, [r7, #20]
      break;
 80066e4:	e00c      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066e6:	4a13      	ldr	r2, [pc, #76]	; (8006734 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ee:	4a10      	ldr	r2, [pc, #64]	; (8006730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066f0:	68d2      	ldr	r2, [r2, #12]
 80066f2:	0a12      	lsrs	r2, r2, #8
 80066f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066f8:	fb02 f303 	mul.w	r3, r2, r3
 80066fc:	617b      	str	r3, [r7, #20]
      break;
 80066fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006700:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	0e5b      	lsrs	r3, r3, #25
 8006706:	f003 0303 	and.w	r3, r3, #3
 800670a:	3301      	adds	r3, #1
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	fbb2 f3f3 	udiv	r3, r2, r3
 8006718:	613b      	str	r3, [r7, #16]
 800671a:	e001      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006720:	693b      	ldr	r3, [r7, #16]
}
 8006722:	4618      	mov	r0, r3
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40021000 	.word	0x40021000
 8006734:	00f42400 	.word	0x00f42400
 8006738:	016e3600 	.word	0x016e3600

0800673c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006740:	4b03      	ldr	r3, [pc, #12]	; (8006750 <HAL_RCC_GetHCLKFreq+0x14>)
 8006742:	681b      	ldr	r3, [r3, #0]
}
 8006744:	4618      	mov	r0, r3
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	20000000 	.word	0x20000000

08006754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006758:	f7ff fff0 	bl	800673c <HAL_RCC_GetHCLKFreq>
 800675c:	4602      	mov	r2, r0
 800675e:	4b06      	ldr	r3, [pc, #24]	; (8006778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	0a1b      	lsrs	r3, r3, #8
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	4904      	ldr	r1, [pc, #16]	; (800677c <HAL_RCC_GetPCLK1Freq+0x28>)
 800676a:	5ccb      	ldrb	r3, [r1, r3]
 800676c:	f003 031f 	and.w	r3, r3, #31
 8006770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006774:	4618      	mov	r0, r3
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40021000 	.word	0x40021000
 800677c:	0800bdd8 	.word	0x0800bdd8

08006780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006784:	f7ff ffda 	bl	800673c <HAL_RCC_GetHCLKFreq>
 8006788:	4602      	mov	r2, r0
 800678a:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	0adb      	lsrs	r3, r3, #11
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	4904      	ldr	r1, [pc, #16]	; (80067a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006796:	5ccb      	ldrb	r3, [r1, r3]
 8006798:	f003 031f 	and.w	r3, r3, #31
 800679c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40021000 	.word	0x40021000
 80067a8:	0800bdd8 	.word	0x0800bdd8

080067ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067b2:	4b1e      	ldr	r3, [pc, #120]	; (800682c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067bc:	4b1b      	ldr	r3, [pc, #108]	; (800682c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	091b      	lsrs	r3, r3, #4
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	2b03      	cmp	r3, #3
 80067ce:	d10c      	bne.n	80067ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067d0:	4a17      	ldr	r2, [pc, #92]	; (8006830 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d8:	4a14      	ldr	r2, [pc, #80]	; (800682c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067da:	68d2      	ldr	r2, [r2, #12]
 80067dc:	0a12      	lsrs	r2, r2, #8
 80067de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067e2:	fb02 f303 	mul.w	r3, r2, r3
 80067e6:	617b      	str	r3, [r7, #20]
    break;
 80067e8:	e00c      	b.n	8006804 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067ea:	4a12      	ldr	r2, [pc, #72]	; (8006834 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f2:	4a0e      	ldr	r2, [pc, #56]	; (800682c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067f4:	68d2      	ldr	r2, [r2, #12]
 80067f6:	0a12      	lsrs	r2, r2, #8
 80067f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067fc:	fb02 f303 	mul.w	r3, r2, r3
 8006800:	617b      	str	r3, [r7, #20]
    break;
 8006802:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006804:	4b09      	ldr	r3, [pc, #36]	; (800682c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	0e5b      	lsrs	r3, r3, #25
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	3301      	adds	r3, #1
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	fbb2 f3f3 	udiv	r3, r2, r3
 800681c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800681e:	687b      	ldr	r3, [r7, #4]
}
 8006820:	4618      	mov	r0, r3
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	40021000 	.word	0x40021000
 8006830:	016e3600 	.word	0x016e3600
 8006834:	00f42400 	.word	0x00f42400

08006838 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006840:	2300      	movs	r3, #0
 8006842:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006844:	2300      	movs	r3, #0
 8006846:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8098 	beq.w	8006986 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006856:	2300      	movs	r3, #0
 8006858:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800685a:	4b43      	ldr	r3, [pc, #268]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800685c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10d      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006866:	4b40      	ldr	r3, [pc, #256]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686a:	4a3f      	ldr	r2, [pc, #252]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800686c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006870:	6593      	str	r3, [r2, #88]	; 0x58
 8006872:	4b3d      	ldr	r3, [pc, #244]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800687a:	60bb      	str	r3, [r7, #8]
 800687c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800687e:	2301      	movs	r3, #1
 8006880:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006882:	4b3a      	ldr	r3, [pc, #232]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a39      	ldr	r2, [pc, #228]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800688c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800688e:	f7fa ff63 	bl	8001758 <HAL_GetTick>
 8006892:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006894:	e009      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006896:	f7fa ff5f 	bl	8001758 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d902      	bls.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	74fb      	strb	r3, [r7, #19]
        break;
 80068a8:	e005      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068aa:	4b30      	ldr	r3, [pc, #192]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0ef      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80068b6:	7cfb      	ldrb	r3, [r7, #19]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d159      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068bc:	4b2a      	ldr	r3, [pc, #168]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01e      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d019      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068d8:	4b23      	ldr	r3, [pc, #140]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068e4:	4b20      	ldr	r3, [pc, #128]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ea:	4a1f      	ldr	r2, [pc, #124]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068f4:	4b1c      	ldr	r3, [pc, #112]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fa:	4a1b      	ldr	r2, [pc, #108]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006904:	4a18      	ldr	r2, [pc, #96]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d016      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006916:	f7fa ff1f 	bl	8001758 <HAL_GetTick>
 800691a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800691c:	e00b      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800691e:	f7fa ff1b 	bl	8001758 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	f241 3288 	movw	r2, #5000	; 0x1388
 800692c:	4293      	cmp	r3, r2
 800692e:	d902      	bls.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	74fb      	strb	r3, [r7, #19]
            break;
 8006934:	e006      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006936:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0ec      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006944:	7cfb      	ldrb	r3, [r7, #19]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10b      	bne.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800694c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006950:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006958:	4903      	ldr	r1, [pc, #12]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800695a:	4313      	orrs	r3, r2
 800695c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006960:	e008      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006962:	7cfb      	ldrb	r3, [r7, #19]
 8006964:	74bb      	strb	r3, [r7, #18]
 8006966:	e005      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006968:	40021000 	.word	0x40021000
 800696c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006970:	7cfb      	ldrb	r3, [r7, #19]
 8006972:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006974:	7c7b      	ldrb	r3, [r7, #17]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d105      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800697a:	4baf      	ldr	r3, [pc, #700]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800697c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697e:	4aae      	ldr	r2, [pc, #696]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006984:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006992:	4ba9      	ldr	r3, [pc, #676]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006998:	f023 0203 	bic.w	r2, r3, #3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	49a5      	ldr	r1, [pc, #660]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069b4:	4ba0      	ldr	r3, [pc, #640]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ba:	f023 020c 	bic.w	r2, r3, #12
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	499d      	ldr	r1, [pc, #628]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069d6:	4b98      	ldr	r3, [pc, #608]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	4994      	ldr	r1, [pc, #592]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0308 	and.w	r3, r3, #8
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00a      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069f8:	4b8f      	ldr	r3, [pc, #572]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	498c      	ldr	r1, [pc, #560]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0310 	and.w	r3, r3, #16
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a1a:	4b87      	ldr	r3, [pc, #540]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	4983      	ldr	r1, [pc, #524]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a3c:	4b7e      	ldr	r3, [pc, #504]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	497b      	ldr	r1, [pc, #492]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a5e:	4b76      	ldr	r3, [pc, #472]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	4972      	ldr	r1, [pc, #456]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a80:	4b6d      	ldr	r3, [pc, #436]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	496a      	ldr	r1, [pc, #424]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006aa2:	4b65      	ldr	r3, [pc, #404]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	4961      	ldr	r1, [pc, #388]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ac4:	4b5c      	ldr	r3, [pc, #368]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aca:	f023 0203 	bic.w	r2, r3, #3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	4959      	ldr	r1, [pc, #356]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ae6:	4b54      	ldr	r3, [pc, #336]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	4950      	ldr	r1, [pc, #320]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d015      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b08:	4b4b      	ldr	r3, [pc, #300]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	4948      	ldr	r1, [pc, #288]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b26:	d105      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b28:	4b43      	ldr	r3, [pc, #268]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	4a42      	ldr	r2, [pc, #264]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d015      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b40:	4b3d      	ldr	r3, [pc, #244]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4e:	493a      	ldr	r1, [pc, #232]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b5e:	d105      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b60:	4b35      	ldr	r3, [pc, #212]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	4a34      	ldr	r2, [pc, #208]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b6a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d015      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b78:	4b2f      	ldr	r3, [pc, #188]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	492c      	ldr	r1, [pc, #176]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b96:	d105      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b98:	4b27      	ldr	r3, [pc, #156]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	4a26      	ldr	r2, [pc, #152]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ba2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d015      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bb0:	4b21      	ldr	r3, [pc, #132]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbe:	491e      	ldr	r1, [pc, #120]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bce:	d105      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bd0:	4b19      	ldr	r3, [pc, #100]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bda:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d015      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006be8:	4b13      	ldr	r3, [pc, #76]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	4910      	ldr	r1, [pc, #64]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c06:	d105      	bne.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c08:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	4a0a      	ldr	r2, [pc, #40]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d018      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c20:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2e:	4902      	ldr	r1, [pc, #8]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006c36:	e001      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006c38:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c44:	d105      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c46:	4b21      	ldr	r3, [pc, #132]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	4a20      	ldr	r2, [pc, #128]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c50:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d015      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006c5e:	4b1b      	ldr	r3, [pc, #108]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c64:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6c:	4917      	ldr	r1, [pc, #92]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7c:	d105      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c7e:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	4a12      	ldr	r2, [pc, #72]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c88:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d015      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006c96:	4b0d      	ldr	r3, [pc, #52]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca4:	4909      	ldr	r1, [pc, #36]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cb4:	d105      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cb6:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	4a04      	ldr	r2, [pc, #16]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006cbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cc0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006cc2:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	40021000 	.word	0x40021000

08006cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e042      	b.n	8006d68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d106      	bne.n	8006cfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7fa fa91 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2224      	movs	r2, #36	; 0x24
 8006cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0201 	bic.w	r2, r2, #1
 8006d10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f8c2 	bl	8006e9c <UART_SetConfig>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d101      	bne.n	8006d22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e022      	b.n	8006d68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fb86 	bl	800743c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0201 	orr.w	r2, r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fc0d 	bl	8007580 <UART_CheckIdleState>
 8006d66:	4603      	mov	r3, r0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08a      	sub	sp, #40	; 0x28
 8006d74:	af02      	add	r7, sp, #8
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	603b      	str	r3, [r7, #0]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	f040 8083 	bne.w	8006e92 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <HAL_UART_Transmit+0x28>
 8006d92:	88fb      	ldrh	r3, [r7, #6]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e07b      	b.n	8006e94 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_UART_Transmit+0x3a>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e074      	b.n	8006e94 <HAL_UART_Transmit+0x124>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2221      	movs	r2, #33	; 0x21
 8006dbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dc2:	f7fa fcc9 	bl	8001758 <HAL_GetTick>
 8006dc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	88fa      	ldrh	r2, [r7, #6]
 8006dcc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	88fa      	ldrh	r2, [r7, #6]
 8006dd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de0:	d108      	bne.n	8006df4 <HAL_UART_Transmit+0x84>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d104      	bne.n	8006df4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	e003      	b.n	8006dfc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8006e04:	e02c      	b.n	8006e60 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2180      	movs	r1, #128	; 0x80
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fbfd 	bl	8007610 <UART_WaitOnFlagUntilTimeout>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e039      	b.n	8006e94 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10b      	bne.n	8006e3e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	3302      	adds	r3, #2
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	e007      	b.n	8006e4e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	781a      	ldrb	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1cc      	bne.n	8006e06 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2200      	movs	r2, #0
 8006e74:	2140      	movs	r1, #64	; 0x40
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 fbca 	bl	8007610 <UART_WaitOnFlagUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e006      	b.n	8006e94 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e000      	b.n	8006e94 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006e92:	2302      	movs	r3, #2
  }
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3720      	adds	r7, #32
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e9c:	b5b0      	push	{r4, r5, r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ec4:	69fa      	ldr	r2, [r7, #28]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	4bb1      	ldr	r3, [pc, #708]	; (8007198 <UART_SetConfig+0x2fc>)
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6812      	ldr	r2, [r2, #0]
 8006ed8:	69f9      	ldr	r1, [r7, #28]
 8006eda:	430b      	orrs	r3, r1
 8006edc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4aa7      	ldr	r2, [pc, #668]	; (800719c <UART_SetConfig+0x300>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d004      	beq.n	8006f0e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006f18:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6812      	ldr	r2, [r2, #0]
 8006f20:	69f9      	ldr	r1, [r7, #28]
 8006f22:	430b      	orrs	r3, r1
 8006f24:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	f023 010f 	bic.w	r1, r3, #15
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a97      	ldr	r2, [pc, #604]	; (80071a0 <UART_SetConfig+0x304>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d121      	bne.n	8006f8a <UART_SetConfig+0xee>
 8006f46:	4b97      	ldr	r3, [pc, #604]	; (80071a4 <UART_SetConfig+0x308>)
 8006f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4c:	f003 0303 	and.w	r3, r3, #3
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d817      	bhi.n	8006f84 <UART_SetConfig+0xe8>
 8006f54:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <UART_SetConfig+0xc0>)
 8006f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5a:	bf00      	nop
 8006f5c:	08006f6d 	.word	0x08006f6d
 8006f60:	08006f79 	.word	0x08006f79
 8006f64:	08006f73 	.word	0x08006f73
 8006f68:	08006f7f 	.word	0x08006f7f
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	76fb      	strb	r3, [r7, #27]
 8006f70:	e0e7      	b.n	8007142 <UART_SetConfig+0x2a6>
 8006f72:	2302      	movs	r3, #2
 8006f74:	76fb      	strb	r3, [r7, #27]
 8006f76:	e0e4      	b.n	8007142 <UART_SetConfig+0x2a6>
 8006f78:	2304      	movs	r3, #4
 8006f7a:	76fb      	strb	r3, [r7, #27]
 8006f7c:	e0e1      	b.n	8007142 <UART_SetConfig+0x2a6>
 8006f7e:	2308      	movs	r3, #8
 8006f80:	76fb      	strb	r3, [r7, #27]
 8006f82:	e0de      	b.n	8007142 <UART_SetConfig+0x2a6>
 8006f84:	2310      	movs	r3, #16
 8006f86:	76fb      	strb	r3, [r7, #27]
 8006f88:	e0db      	b.n	8007142 <UART_SetConfig+0x2a6>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a86      	ldr	r2, [pc, #536]	; (80071a8 <UART_SetConfig+0x30c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d132      	bne.n	8006ffa <UART_SetConfig+0x15e>
 8006f94:	4b83      	ldr	r3, [pc, #524]	; (80071a4 <UART_SetConfig+0x308>)
 8006f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f9a:	f003 030c 	and.w	r3, r3, #12
 8006f9e:	2b0c      	cmp	r3, #12
 8006fa0:	d828      	bhi.n	8006ff4 <UART_SetConfig+0x158>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <UART_SetConfig+0x10c>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fdd 	.word	0x08006fdd
 8006fac:	08006ff5 	.word	0x08006ff5
 8006fb0:	08006ff5 	.word	0x08006ff5
 8006fb4:	08006ff5 	.word	0x08006ff5
 8006fb8:	08006fe9 	.word	0x08006fe9
 8006fbc:	08006ff5 	.word	0x08006ff5
 8006fc0:	08006ff5 	.word	0x08006ff5
 8006fc4:	08006ff5 	.word	0x08006ff5
 8006fc8:	08006fe3 	.word	0x08006fe3
 8006fcc:	08006ff5 	.word	0x08006ff5
 8006fd0:	08006ff5 	.word	0x08006ff5
 8006fd4:	08006ff5 	.word	0x08006ff5
 8006fd8:	08006fef 	.word	0x08006fef
 8006fdc:	2300      	movs	r3, #0
 8006fde:	76fb      	strb	r3, [r7, #27]
 8006fe0:	e0af      	b.n	8007142 <UART_SetConfig+0x2a6>
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	76fb      	strb	r3, [r7, #27]
 8006fe6:	e0ac      	b.n	8007142 <UART_SetConfig+0x2a6>
 8006fe8:	2304      	movs	r3, #4
 8006fea:	76fb      	strb	r3, [r7, #27]
 8006fec:	e0a9      	b.n	8007142 <UART_SetConfig+0x2a6>
 8006fee:	2308      	movs	r3, #8
 8006ff0:	76fb      	strb	r3, [r7, #27]
 8006ff2:	e0a6      	b.n	8007142 <UART_SetConfig+0x2a6>
 8006ff4:	2310      	movs	r3, #16
 8006ff6:	76fb      	strb	r3, [r7, #27]
 8006ff8:	e0a3      	b.n	8007142 <UART_SetConfig+0x2a6>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a6b      	ldr	r2, [pc, #428]	; (80071ac <UART_SetConfig+0x310>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d120      	bne.n	8007046 <UART_SetConfig+0x1aa>
 8007004:	4b67      	ldr	r3, [pc, #412]	; (80071a4 <UART_SetConfig+0x308>)
 8007006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800700e:	2b30      	cmp	r3, #48	; 0x30
 8007010:	d013      	beq.n	800703a <UART_SetConfig+0x19e>
 8007012:	2b30      	cmp	r3, #48	; 0x30
 8007014:	d814      	bhi.n	8007040 <UART_SetConfig+0x1a4>
 8007016:	2b20      	cmp	r3, #32
 8007018:	d009      	beq.n	800702e <UART_SetConfig+0x192>
 800701a:	2b20      	cmp	r3, #32
 800701c:	d810      	bhi.n	8007040 <UART_SetConfig+0x1a4>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <UART_SetConfig+0x18c>
 8007022:	2b10      	cmp	r3, #16
 8007024:	d006      	beq.n	8007034 <UART_SetConfig+0x198>
 8007026:	e00b      	b.n	8007040 <UART_SetConfig+0x1a4>
 8007028:	2300      	movs	r3, #0
 800702a:	76fb      	strb	r3, [r7, #27]
 800702c:	e089      	b.n	8007142 <UART_SetConfig+0x2a6>
 800702e:	2302      	movs	r3, #2
 8007030:	76fb      	strb	r3, [r7, #27]
 8007032:	e086      	b.n	8007142 <UART_SetConfig+0x2a6>
 8007034:	2304      	movs	r3, #4
 8007036:	76fb      	strb	r3, [r7, #27]
 8007038:	e083      	b.n	8007142 <UART_SetConfig+0x2a6>
 800703a:	2308      	movs	r3, #8
 800703c:	76fb      	strb	r3, [r7, #27]
 800703e:	e080      	b.n	8007142 <UART_SetConfig+0x2a6>
 8007040:	2310      	movs	r3, #16
 8007042:	76fb      	strb	r3, [r7, #27]
 8007044:	e07d      	b.n	8007142 <UART_SetConfig+0x2a6>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a59      	ldr	r2, [pc, #356]	; (80071b0 <UART_SetConfig+0x314>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d120      	bne.n	8007092 <UART_SetConfig+0x1f6>
 8007050:	4b54      	ldr	r3, [pc, #336]	; (80071a4 <UART_SetConfig+0x308>)
 8007052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007056:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800705a:	2bc0      	cmp	r3, #192	; 0xc0
 800705c:	d013      	beq.n	8007086 <UART_SetConfig+0x1ea>
 800705e:	2bc0      	cmp	r3, #192	; 0xc0
 8007060:	d814      	bhi.n	800708c <UART_SetConfig+0x1f0>
 8007062:	2b80      	cmp	r3, #128	; 0x80
 8007064:	d009      	beq.n	800707a <UART_SetConfig+0x1de>
 8007066:	2b80      	cmp	r3, #128	; 0x80
 8007068:	d810      	bhi.n	800708c <UART_SetConfig+0x1f0>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <UART_SetConfig+0x1d8>
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d006      	beq.n	8007080 <UART_SetConfig+0x1e4>
 8007072:	e00b      	b.n	800708c <UART_SetConfig+0x1f0>
 8007074:	2300      	movs	r3, #0
 8007076:	76fb      	strb	r3, [r7, #27]
 8007078:	e063      	b.n	8007142 <UART_SetConfig+0x2a6>
 800707a:	2302      	movs	r3, #2
 800707c:	76fb      	strb	r3, [r7, #27]
 800707e:	e060      	b.n	8007142 <UART_SetConfig+0x2a6>
 8007080:	2304      	movs	r3, #4
 8007082:	76fb      	strb	r3, [r7, #27]
 8007084:	e05d      	b.n	8007142 <UART_SetConfig+0x2a6>
 8007086:	2308      	movs	r3, #8
 8007088:	76fb      	strb	r3, [r7, #27]
 800708a:	e05a      	b.n	8007142 <UART_SetConfig+0x2a6>
 800708c:	2310      	movs	r3, #16
 800708e:	76fb      	strb	r3, [r7, #27]
 8007090:	e057      	b.n	8007142 <UART_SetConfig+0x2a6>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a47      	ldr	r2, [pc, #284]	; (80071b4 <UART_SetConfig+0x318>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d125      	bne.n	80070e8 <UART_SetConfig+0x24c>
 800709c:	4b41      	ldr	r3, [pc, #260]	; (80071a4 <UART_SetConfig+0x308>)
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070aa:	d017      	beq.n	80070dc <UART_SetConfig+0x240>
 80070ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070b0:	d817      	bhi.n	80070e2 <UART_SetConfig+0x246>
 80070b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070b6:	d00b      	beq.n	80070d0 <UART_SetConfig+0x234>
 80070b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070bc:	d811      	bhi.n	80070e2 <UART_SetConfig+0x246>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <UART_SetConfig+0x22e>
 80070c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c6:	d006      	beq.n	80070d6 <UART_SetConfig+0x23a>
 80070c8:	e00b      	b.n	80070e2 <UART_SetConfig+0x246>
 80070ca:	2300      	movs	r3, #0
 80070cc:	76fb      	strb	r3, [r7, #27]
 80070ce:	e038      	b.n	8007142 <UART_SetConfig+0x2a6>
 80070d0:	2302      	movs	r3, #2
 80070d2:	76fb      	strb	r3, [r7, #27]
 80070d4:	e035      	b.n	8007142 <UART_SetConfig+0x2a6>
 80070d6:	2304      	movs	r3, #4
 80070d8:	76fb      	strb	r3, [r7, #27]
 80070da:	e032      	b.n	8007142 <UART_SetConfig+0x2a6>
 80070dc:	2308      	movs	r3, #8
 80070de:	76fb      	strb	r3, [r7, #27]
 80070e0:	e02f      	b.n	8007142 <UART_SetConfig+0x2a6>
 80070e2:	2310      	movs	r3, #16
 80070e4:	76fb      	strb	r3, [r7, #27]
 80070e6:	e02c      	b.n	8007142 <UART_SetConfig+0x2a6>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a2b      	ldr	r2, [pc, #172]	; (800719c <UART_SetConfig+0x300>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d125      	bne.n	800713e <UART_SetConfig+0x2a2>
 80070f2:	4b2c      	ldr	r3, [pc, #176]	; (80071a4 <UART_SetConfig+0x308>)
 80070f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007100:	d017      	beq.n	8007132 <UART_SetConfig+0x296>
 8007102:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007106:	d817      	bhi.n	8007138 <UART_SetConfig+0x29c>
 8007108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800710c:	d00b      	beq.n	8007126 <UART_SetConfig+0x28a>
 800710e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007112:	d811      	bhi.n	8007138 <UART_SetConfig+0x29c>
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <UART_SetConfig+0x284>
 8007118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800711c:	d006      	beq.n	800712c <UART_SetConfig+0x290>
 800711e:	e00b      	b.n	8007138 <UART_SetConfig+0x29c>
 8007120:	2300      	movs	r3, #0
 8007122:	76fb      	strb	r3, [r7, #27]
 8007124:	e00d      	b.n	8007142 <UART_SetConfig+0x2a6>
 8007126:	2302      	movs	r3, #2
 8007128:	76fb      	strb	r3, [r7, #27]
 800712a:	e00a      	b.n	8007142 <UART_SetConfig+0x2a6>
 800712c:	2304      	movs	r3, #4
 800712e:	76fb      	strb	r3, [r7, #27]
 8007130:	e007      	b.n	8007142 <UART_SetConfig+0x2a6>
 8007132:	2308      	movs	r3, #8
 8007134:	76fb      	strb	r3, [r7, #27]
 8007136:	e004      	b.n	8007142 <UART_SetConfig+0x2a6>
 8007138:	2310      	movs	r3, #16
 800713a:	76fb      	strb	r3, [r7, #27]
 800713c:	e001      	b.n	8007142 <UART_SetConfig+0x2a6>
 800713e:	2310      	movs	r3, #16
 8007140:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a15      	ldr	r2, [pc, #84]	; (800719c <UART_SetConfig+0x300>)
 8007148:	4293      	cmp	r3, r2
 800714a:	f040 809f 	bne.w	800728c <UART_SetConfig+0x3f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800714e:	7efb      	ldrb	r3, [r7, #27]
 8007150:	2b08      	cmp	r3, #8
 8007152:	d837      	bhi.n	80071c4 <UART_SetConfig+0x328>
 8007154:	a201      	add	r2, pc, #4	; (adr r2, 800715c <UART_SetConfig+0x2c0>)
 8007156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715a:	bf00      	nop
 800715c:	08007181 	.word	0x08007181
 8007160:	080071c5 	.word	0x080071c5
 8007164:	08007189 	.word	0x08007189
 8007168:	080071c5 	.word	0x080071c5
 800716c:	0800718f 	.word	0x0800718f
 8007170:	080071c5 	.word	0x080071c5
 8007174:	080071c5 	.word	0x080071c5
 8007178:	080071c5 	.word	0x080071c5
 800717c:	080071bd 	.word	0x080071bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007180:	f7ff fae8 	bl	8006754 <HAL_RCC_GetPCLK1Freq>
 8007184:	6178      	str	r0, [r7, #20]
        break;
 8007186:	e022      	b.n	80071ce <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007188:	4b0b      	ldr	r3, [pc, #44]	; (80071b8 <UART_SetConfig+0x31c>)
 800718a:	617b      	str	r3, [r7, #20]
        break;
 800718c:	e01f      	b.n	80071ce <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800718e:	f7ff fa73 	bl	8006678 <HAL_RCC_GetSysClockFreq>
 8007192:	6178      	str	r0, [r7, #20]
        break;
 8007194:	e01b      	b.n	80071ce <UART_SetConfig+0x332>
 8007196:	bf00      	nop
 8007198:	cfff69f3 	.word	0xcfff69f3
 800719c:	40008000 	.word	0x40008000
 80071a0:	40013800 	.word	0x40013800
 80071a4:	40021000 	.word	0x40021000
 80071a8:	40004400 	.word	0x40004400
 80071ac:	40004800 	.word	0x40004800
 80071b0:	40004c00 	.word	0x40004c00
 80071b4:	40005000 	.word	0x40005000
 80071b8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071c0:	617b      	str	r3, [r7, #20]
        break;
 80071c2:	e004      	b.n	80071ce <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	76bb      	strb	r3, [r7, #26]
        break;
 80071cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 811b 	beq.w	800740c <UART_SetConfig+0x570>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	4a96      	ldr	r2, [pc, #600]	; (8007434 <UART_SetConfig+0x598>)
 80071dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e0:	461a      	mov	r2, r3
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071e8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	4613      	mov	r3, r2
 80071f0:	005b      	lsls	r3, r3, #1
 80071f2:	4413      	add	r3, r2
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d305      	bcc.n	8007206 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	429a      	cmp	r2, r3
 8007204:	d902      	bls.n	800720c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	76bb      	strb	r3, [r7, #26]
 800720a:	e0ff      	b.n	800740c <UART_SetConfig+0x570>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	4618      	mov	r0, r3
 8007210:	f04f 0100 	mov.w	r1, #0
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	4a86      	ldr	r2, [pc, #536]	; (8007434 <UART_SetConfig+0x598>)
 800721a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800721e:	b29a      	uxth	r2, r3
 8007220:	f04f 0300 	mov.w	r3, #0
 8007224:	f7f9 f800 	bl	8000228 <__aeabi_uldivmod>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	4610      	mov	r0, r2
 800722e:	4619      	mov	r1, r3
 8007230:	f04f 0200 	mov.w	r2, #0
 8007234:	f04f 0300 	mov.w	r3, #0
 8007238:	020b      	lsls	r3, r1, #8
 800723a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800723e:	0202      	lsls	r2, r0, #8
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	6849      	ldr	r1, [r1, #4]
 8007244:	0849      	lsrs	r1, r1, #1
 8007246:	4608      	mov	r0, r1
 8007248:	f04f 0100 	mov.w	r1, #0
 800724c:	1814      	adds	r4, r2, r0
 800724e:	eb43 0501 	adc.w	r5, r3, r1
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	461a      	mov	r2, r3
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	4620      	mov	r0, r4
 800725e:	4629      	mov	r1, r5
 8007260:	f7f8 ffe2 	bl	8000228 <__aeabi_uldivmod>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4613      	mov	r3, r2
 800726a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007272:	d308      	bcc.n	8007286 <UART_SetConfig+0x3ea>
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800727a:	d204      	bcs.n	8007286 <UART_SetConfig+0x3ea>
        {
          huart->Instance->BRR = usartdiv;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	60da      	str	r2, [r3, #12]
 8007284:	e0c2      	b.n	800740c <UART_SetConfig+0x570>
        }
        else
        {
          ret = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	76bb      	strb	r3, [r7, #26]
 800728a:	e0bf      	b.n	800740c <UART_SetConfig+0x570>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007294:	d165      	bne.n	8007362 <UART_SetConfig+0x4c6>
  {
    switch (clocksource)
 8007296:	7efb      	ldrb	r3, [r7, #27]
 8007298:	2b08      	cmp	r3, #8
 800729a:	d828      	bhi.n	80072ee <UART_SetConfig+0x452>
 800729c:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <UART_SetConfig+0x408>)
 800729e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a2:	bf00      	nop
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072d1 	.word	0x080072d1
 80072ac:	080072d9 	.word	0x080072d9
 80072b0:	080072ef 	.word	0x080072ef
 80072b4:	080072df 	.word	0x080072df
 80072b8:	080072ef 	.word	0x080072ef
 80072bc:	080072ef 	.word	0x080072ef
 80072c0:	080072ef 	.word	0x080072ef
 80072c4:	080072e7 	.word	0x080072e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072c8:	f7ff fa44 	bl	8006754 <HAL_RCC_GetPCLK1Freq>
 80072cc:	6178      	str	r0, [r7, #20]
        break;
 80072ce:	e013      	b.n	80072f8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072d0:	f7ff fa56 	bl	8006780 <HAL_RCC_GetPCLK2Freq>
 80072d4:	6178      	str	r0, [r7, #20]
        break;
 80072d6:	e00f      	b.n	80072f8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072d8:	4b57      	ldr	r3, [pc, #348]	; (8007438 <UART_SetConfig+0x59c>)
 80072da:	617b      	str	r3, [r7, #20]
        break;
 80072dc:	e00c      	b.n	80072f8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072de:	f7ff f9cb 	bl	8006678 <HAL_RCC_GetSysClockFreq>
 80072e2:	6178      	str	r0, [r7, #20]
        break;
 80072e4:	e008      	b.n	80072f8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ea:	617b      	str	r3, [r7, #20]
        break;
 80072ec:	e004      	b.n	80072f8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	76bb      	strb	r3, [r7, #26]
        break;
 80072f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 8086 	beq.w	800740c <UART_SetConfig+0x570>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	4a4b      	ldr	r2, [pc, #300]	; (8007434 <UART_SetConfig+0x598>)
 8007306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800730a:	461a      	mov	r2, r3
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007312:	005a      	lsls	r2, r3, #1
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	085b      	lsrs	r3, r3, #1
 800731a:	441a      	add	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	fbb2 f3f3 	udiv	r3, r2, r3
 8007324:	b29b      	uxth	r3, r3
 8007326:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	2b0f      	cmp	r3, #15
 800732c:	d916      	bls.n	800735c <UART_SetConfig+0x4c0>
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007334:	d212      	bcs.n	800735c <UART_SetConfig+0x4c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f023 030f 	bic.w	r3, r3, #15
 800733e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	085b      	lsrs	r3, r3, #1
 8007344:	b29b      	uxth	r3, r3
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	b29a      	uxth	r2, r3
 800734c:	89fb      	ldrh	r3, [r7, #14]
 800734e:	4313      	orrs	r3, r2
 8007350:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	89fa      	ldrh	r2, [r7, #14]
 8007358:	60da      	str	r2, [r3, #12]
 800735a:	e057      	b.n	800740c <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	76bb      	strb	r3, [r7, #26]
 8007360:	e054      	b.n	800740c <UART_SetConfig+0x570>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007362:	7efb      	ldrb	r3, [r7, #27]
 8007364:	2b08      	cmp	r3, #8
 8007366:	d828      	bhi.n	80073ba <UART_SetConfig+0x51e>
 8007368:	a201      	add	r2, pc, #4	; (adr r2, 8007370 <UART_SetConfig+0x4d4>)
 800736a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736e:	bf00      	nop
 8007370:	08007395 	.word	0x08007395
 8007374:	0800739d 	.word	0x0800739d
 8007378:	080073a5 	.word	0x080073a5
 800737c:	080073bb 	.word	0x080073bb
 8007380:	080073ab 	.word	0x080073ab
 8007384:	080073bb 	.word	0x080073bb
 8007388:	080073bb 	.word	0x080073bb
 800738c:	080073bb 	.word	0x080073bb
 8007390:	080073b3 	.word	0x080073b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007394:	f7ff f9de 	bl	8006754 <HAL_RCC_GetPCLK1Freq>
 8007398:	6178      	str	r0, [r7, #20]
        break;
 800739a:	e013      	b.n	80073c4 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800739c:	f7ff f9f0 	bl	8006780 <HAL_RCC_GetPCLK2Freq>
 80073a0:	6178      	str	r0, [r7, #20]
        break;
 80073a2:	e00f      	b.n	80073c4 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073a4:	4b24      	ldr	r3, [pc, #144]	; (8007438 <UART_SetConfig+0x59c>)
 80073a6:	617b      	str	r3, [r7, #20]
        break;
 80073a8:	e00c      	b.n	80073c4 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073aa:	f7ff f965 	bl	8006678 <HAL_RCC_GetSysClockFreq>
 80073ae:	6178      	str	r0, [r7, #20]
        break;
 80073b0:	e008      	b.n	80073c4 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073b6:	617b      	str	r3, [r7, #20]
        break;
 80073b8:	e004      	b.n	80073c4 <UART_SetConfig+0x528>
      default:
        pclk = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	76bb      	strb	r3, [r7, #26]
        break;
 80073c2:	bf00      	nop
    }

    if (pclk != 0U)
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d020      	beq.n	800740c <UART_SetConfig+0x570>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	4a19      	ldr	r2, [pc, #100]	; (8007434 <UART_SetConfig+0x598>)
 80073d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073d4:	461a      	mov	r2, r3
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	085b      	lsrs	r3, r3, #1
 80073e2:	441a      	add	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2b0f      	cmp	r3, #15
 80073f4:	d908      	bls.n	8007408 <UART_SetConfig+0x56c>
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073fc:	d204      	bcs.n	8007408 <UART_SetConfig+0x56c>
      {
        huart->Instance->BRR = usartdiv;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	60da      	str	r2, [r3, #12]
 8007406:	e001      	b.n	800740c <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007428:	7ebb      	ldrb	r3, [r7, #26]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3720      	adds	r7, #32
 800742e:	46bd      	mov	sp, r7
 8007430:	bdb0      	pop	{r4, r5, r7, pc}
 8007432:	bf00      	nop
 8007434:	0800bde0 	.word	0x0800bde0
 8007438:	00f42400 	.word	0x00f42400

0800743c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ae:	f003 0308 	and.w	r3, r3, #8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01a      	beq.n	8007552 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800753a:	d10a      	bne.n	8007552 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	605a      	str	r2, [r3, #4]
  }
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af02      	add	r7, sp, #8
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007590:	f7fa f8e2 	bl	8001758 <HAL_GetTick>
 8007594:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d10e      	bne.n	80075c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f82c 	bl	8007610 <UART_WaitOnFlagUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e022      	b.n	8007608 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d10e      	bne.n	80075ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f816 	bl	8007610 <UART_WaitOnFlagUntilTimeout>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e00c      	b.n	8007608 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2220      	movs	r2, #32
 80075fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	603b      	str	r3, [r7, #0]
 800761c:	4613      	mov	r3, r2
 800761e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007620:	e062      	b.n	80076e8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007628:	d05e      	beq.n	80076e8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800762a:	f7fa f895 	bl	8001758 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	429a      	cmp	r2, r3
 8007638:	d302      	bcc.n	8007640 <UART_WaitOnFlagUntilTimeout+0x30>
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d11d      	bne.n	800767c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800764e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689a      	ldr	r2, [r3, #8]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0201 	bic.w	r2, r2, #1
 800765e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2220      	movs	r2, #32
 8007664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2220      	movs	r2, #32
 800766c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e045      	b.n	8007708 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	2b00      	cmp	r3, #0
 8007688:	d02e      	beq.n	80076e8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007698:	d126      	bne.n	80076e8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076b2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0201 	bic.w	r2, r2, #1
 80076c2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2220      	movs	r2, #32
 80076d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e00f      	b.n	8007708 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	69da      	ldr	r2, [r3, #28]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	4013      	ands	r3, r2
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	bf0c      	ite	eq
 80076f8:	2301      	moveq	r3, #1
 80076fa:	2300      	movne	r3, #0
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	461a      	mov	r2, r3
 8007700:	79fb      	ldrb	r3, [r7, #7]
 8007702:	429a      	cmp	r2, r3
 8007704:	d08d      	beq.n	8007622 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <HAL_UARTEx_DisableFifoMode+0x16>
 8007722:	2302      	movs	r3, #2
 8007724:	e027      	b.n	8007776 <HAL_UARTEx_DisableFifoMode+0x66>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2224      	movs	r2, #36	; 0x24
 8007732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0201 	bic.w	r2, r2, #1
 800774c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007754:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007792:	2b01      	cmp	r3, #1
 8007794:	d101      	bne.n	800779a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007796:	2302      	movs	r3, #2
 8007798:	e02d      	b.n	80077f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2224      	movs	r2, #36	; 0x24
 80077a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 0201 	bic.w	r2, r2, #1
 80077c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f850 	bl	800787c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b084      	sub	sp, #16
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800780e:	2b01      	cmp	r3, #1
 8007810:	d101      	bne.n	8007816 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007812:	2302      	movs	r3, #2
 8007814:	e02d      	b.n	8007872 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2224      	movs	r2, #36	; 0x24
 8007822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0201 	bic.w	r2, r2, #1
 800783c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f812 	bl	800787c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800787c:	b480      	push	{r7}
 800787e:	b089      	sub	sp, #36	; 0x24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007884:	4a2f      	ldr	r2, [pc, #188]	; (8007944 <UARTEx_SetNbDataToProcess+0xc8>)
 8007886:	f107 0314 	add.w	r3, r7, #20
 800788a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800788e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007892:	4a2d      	ldr	r2, [pc, #180]	; (8007948 <UARTEx_SetNbDataToProcess+0xcc>)
 8007894:	f107 030c 	add.w	r3, r7, #12
 8007898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800789c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d108      	bne.n	80078ba <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078b8:	e03d      	b.n	8007936 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078ba:	2308      	movs	r3, #8
 80078bc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078be:	2308      	movs	r3, #8
 80078c0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	0e5b      	lsrs	r3, r3, #25
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	f003 0307 	and.w	r3, r3, #7
 80078d0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	0f5b      	lsrs	r3, r3, #29
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078e2:	7fbb      	ldrb	r3, [r7, #30]
 80078e4:	7f3a      	ldrb	r2, [r7, #28]
 80078e6:	f107 0120 	add.w	r1, r7, #32
 80078ea:	440a      	add	r2, r1
 80078ec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80078f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078f4:	7f3a      	ldrb	r2, [r7, #28]
 80078f6:	f107 0120 	add.w	r1, r7, #32
 80078fa:	440a      	add	r2, r1
 80078fc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007900:	fb93 f3f2 	sdiv	r3, r3, r2
 8007904:	b29a      	uxth	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800790c:	7ffb      	ldrb	r3, [r7, #31]
 800790e:	7f7a      	ldrb	r2, [r7, #29]
 8007910:	f107 0120 	add.w	r1, r7, #32
 8007914:	440a      	add	r2, r1
 8007916:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800791a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800791e:	7f7a      	ldrb	r2, [r7, #29]
 8007920:	f107 0120 	add.w	r1, r7, #32
 8007924:	440a      	add	r2, r1
 8007926:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800792a:	fb93 f3f2 	sdiv	r3, r3, r2
 800792e:	b29a      	uxth	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007936:	bf00      	nop
 8007938:	3724      	adds	r7, #36	; 0x24
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	0800bd70 	.word	0x0800bd70
 8007948:	0800bd78 	.word	0x0800bd78

0800794c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800795c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007960:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	b29a      	uxth	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800797a:	b480      	push	{r7}
 800797c:	b085      	sub	sp, #20
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007982:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007986:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800798e:	b29a      	uxth	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	b29b      	uxth	r3, r3
 8007994:	43db      	mvns	r3, r3
 8007996:	b29b      	uxth	r3, r3
 8007998:	4013      	ands	r3, r2
 800799a:	b29a      	uxth	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80079b0:	b084      	sub	sp, #16
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	f107 0014 	add.w	r0, r7, #20
 80079be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	b004      	add	sp, #16
 80079f0:	4770      	bx	lr
	...

080079f4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b09b      	sub	sp, #108	; 0x6c
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	78db      	ldrb	r3, [r3, #3]
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d81f      	bhi.n	8007a66 <USB_ActivateEndpoint+0x72>
 8007a26:	a201      	add	r2, pc, #4	; (adr r2, 8007a2c <USB_ActivateEndpoint+0x38>)
 8007a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2c:	08007a3d 	.word	0x08007a3d
 8007a30:	08007a59 	.word	0x08007a59
 8007a34:	08007a6f 	.word	0x08007a6f
 8007a38:	08007a4b 	.word	0x08007a4b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007a3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007a48:	e012      	b.n	8007a70 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007a4a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a4e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007a52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007a56:	e00b      	b.n	8007a70 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007a58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a60:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007a64:	e004      	b.n	8007a70 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007a6c:	e000      	b.n	8007a70 <USB_ActivateEndpoint+0x7c>
      break;
 8007a6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	441a      	add	r2, r3
 8007a7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	b21b      	sxth	r3, r3
 8007aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aaa:	b21a      	sxth	r2, r3
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	b21b      	sxth	r3, r3
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	b21b      	sxth	r3, r3
 8007ab6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	441a      	add	r2, r3
 8007ac4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	7b1b      	ldrb	r3, [r3, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f040 8149 	bne.w	8007d78 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 8084 	beq.w	8007bf8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	461a      	mov	r2, r3
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	4413      	add	r3, r2
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	00da      	lsls	r2, r3, #3
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b12:	613b      	str	r3, [r7, #16]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	88db      	ldrh	r3, [r3, #6]
 8007b18:	085b      	lsrs	r3, r3, #1
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	81fb      	strh	r3, [r7, #14]
 8007b32:	89fb      	ldrh	r3, [r7, #14]
 8007b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01b      	beq.n	8007b74 <USB_ActivateEndpoint+0x180>
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b52:	81bb      	strh	r3, [r7, #12]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	441a      	add	r2, r3
 8007b5e:	89bb      	ldrh	r3, [r7, #12]
 8007b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	78db      	ldrb	r3, [r3, #3]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d020      	beq.n	8007bbe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b92:	813b      	strh	r3, [r7, #8]
 8007b94:	893b      	ldrh	r3, [r7, #8]
 8007b96:	f083 0320 	eor.w	r3, r3, #32
 8007b9a:	813b      	strh	r3, [r7, #8]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	441a      	add	r2, r3
 8007ba6:	893b      	ldrh	r3, [r7, #8]
 8007ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	8013      	strh	r3, [r2, #0]
 8007bbc:	e27f      	b.n	80080be <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd4:	817b      	strh	r3, [r7, #10]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	441a      	add	r2, r3
 8007be0:	897b      	ldrh	r3, [r7, #10]
 8007be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	8013      	strh	r3, [r2, #0]
 8007bf6:	e262      	b.n	80080be <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	461a      	mov	r2, r3
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	4413      	add	r3, r2
 8007c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	00da      	lsls	r2, r3, #3
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	4413      	add	r3, r2
 8007c16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	88db      	ldrh	r3, [r3, #6]
 8007c20:	085b      	lsrs	r3, r3, #1
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	461a      	mov	r2, r3
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	4413      	add	r3, r2
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	00da      	lsls	r2, r3, #3
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	4413      	add	r3, r2
 8007c4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c4e:	623b      	str	r3, [r7, #32]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d112      	bne.n	8007c7e <USB_ActivateEndpoint+0x28a>
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	801a      	strh	r2, [r3, #0]
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	801a      	strh	r2, [r3, #0]
 8007c7c:	e02f      	b.n	8007cde <USB_ActivateEndpoint+0x2ea>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	2b3e      	cmp	r3, #62	; 0x3e
 8007c84:	d813      	bhi.n	8007cae <USB_ActivateEndpoint+0x2ba>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	085b      	lsrs	r3, r3, #1
 8007c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <USB_ActivateEndpoint+0x2ac>
 8007c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	663b      	str	r3, [r7, #96]	; 0x60
 8007ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	029b      	lsls	r3, r3, #10
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	801a      	strh	r2, [r3, #0]
 8007cac:	e017      	b.n	8007cde <USB_ActivateEndpoint+0x2ea>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	095b      	lsrs	r3, r3, #5
 8007cb4:	663b      	str	r3, [r7, #96]	; 0x60
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	f003 031f 	and.w	r3, r3, #31
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d102      	bne.n	8007cc8 <USB_ActivateEndpoint+0x2d4>
 8007cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	663b      	str	r3, [r7, #96]	; 0x60
 8007cc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	029b      	lsls	r3, r3, #10
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	83fb      	strh	r3, [r7, #30]
 8007cec:	8bfb      	ldrh	r3, [r7, #30]
 8007cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d01b      	beq.n	8007d2e <USB_ActivateEndpoint+0x33a>
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0c:	83bb      	strh	r3, [r7, #28]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	441a      	add	r2, r3
 8007d18:	8bbb      	ldrh	r3, [r7, #28]
 8007d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d44:	837b      	strh	r3, [r7, #26]
 8007d46:	8b7b      	ldrh	r3, [r7, #26]
 8007d48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d4c:	837b      	strh	r3, [r7, #26]
 8007d4e:	8b7b      	ldrh	r3, [r7, #26]
 8007d50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d54:	837b      	strh	r3, [r7, #26]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	441a      	add	r2, r3
 8007d60:	8b7b      	ldrh	r3, [r7, #26]
 8007d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	8013      	strh	r3, [r2, #0]
 8007d76:	e1a2      	b.n	80080be <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	441a      	add	r2, r3
 8007d9c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dc4:	4413      	add	r3, r2
 8007dc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	00da      	lsls	r2, r3, #3
 8007dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	891b      	ldrh	r3, [r3, #8]
 8007ddc:	085b      	lsrs	r3, r3, #1
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007de6:	801a      	strh	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	653b      	str	r3, [r7, #80]	; 0x50
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df8:	4413      	add	r3, r2
 8007dfa:	653b      	str	r3, [r7, #80]	; 0x50
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	00da      	lsls	r2, r3, #3
 8007e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e04:	4413      	add	r3, r2
 8007e06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	895b      	ldrh	r3, [r3, #10]
 8007e10:	085b      	lsrs	r3, r3, #1
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e1a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f040 8091 	bne.w	8007f48 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4413      	add	r3, r2
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007e34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d01b      	beq.n	8007e76 <USB_ActivateEndpoint+0x482>
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e54:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	441a      	add	r2, r3
 8007e60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	873b      	strh	r3, [r7, #56]	; 0x38
 8007e84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d01b      	beq.n	8007ec6 <USB_ActivateEndpoint+0x4d2>
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	441a      	add	r2, r3
 8007eb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ebe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007edc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007ede:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007ee0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ee4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007ee6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007ee8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007eec:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	441a      	add	r2, r3
 8007ef8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f24:	867b      	strh	r3, [r7, #50]	; 0x32
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	441a      	add	r2, r3
 8007f30:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	8013      	strh	r3, [r2, #0]
 8007f46:	e0ba      	b.n	80080be <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007f58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d01d      	beq.n	8007fa0 <USB_ActivateEndpoint+0x5ac>
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	441a      	add	r2, r3
 8007f88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007fb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d01d      	beq.n	8007ff8 <USB_ActivateEndpoint+0x604>
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	441a      	add	r2, r3
 8007fe0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ff0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	78db      	ldrb	r3, [r3, #3]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d024      	beq.n	800804a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	b29b      	uxth	r3, r3
 800800e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008016:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800801a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800801e:	f083 0320 	eor.w	r3, r3, #32
 8008022:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	441a      	add	r2, r3
 8008030:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800803c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008044:	b29b      	uxth	r3, r3
 8008046:	8013      	strh	r3, [r2, #0]
 8008048:	e01d      	b.n	8008086 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29b      	uxth	r3, r3
 8008058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800805c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008060:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	441a      	add	r2, r3
 800806e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800807a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800807e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008082:	b29b      	uxth	r3, r3
 8008084:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	b29b      	uxth	r3, r3
 8008094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800809c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	441a      	add	r2, r3
 80080a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80080aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80080be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	376c      	adds	r7, #108	; 0x6c
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop

080080d0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b08d      	sub	sp, #52	; 0x34
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	7b1b      	ldrb	r3, [r3, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f040 808e 	bne.w	8008200 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	785b      	ldrb	r3, [r3, #1]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d044      	beq.n	8008176 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	81bb      	strh	r3, [r7, #12]
 80080fa:	89bb      	ldrh	r3, [r7, #12]
 80080fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01b      	beq.n	800813c <USB_DeactivateEndpoint+0x6c>
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	b29b      	uxth	r3, r3
 8008112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800811a:	817b      	strh	r3, [r7, #10]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	441a      	add	r2, r3
 8008126:	897b      	ldrh	r3, [r7, #10]
 8008128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800812c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008138:	b29b      	uxth	r3, r3
 800813a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	b29b      	uxth	r3, r3
 800814a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800814e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008152:	813b      	strh	r3, [r7, #8]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	441a      	add	r2, r3
 800815e:	893b      	ldrh	r3, [r7, #8]
 8008160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800816c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008170:	b29b      	uxth	r3, r3
 8008172:	8013      	strh	r3, [r2, #0]
 8008174:	e192      	b.n	800849c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	827b      	strh	r3, [r7, #18]
 8008184:	8a7b      	ldrh	r3, [r7, #18]
 8008186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d01b      	beq.n	80081c6 <USB_DeactivateEndpoint+0xf6>
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	b29b      	uxth	r3, r3
 800819c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a4:	823b      	strh	r3, [r7, #16]
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	441a      	add	r2, r3
 80081b0:	8a3b      	ldrh	r3, [r7, #16]
 80081b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081dc:	81fb      	strh	r3, [r7, #14]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	441a      	add	r2, r3
 80081e8:	89fb      	ldrh	r3, [r7, #14]
 80081ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	8013      	strh	r3, [r2, #0]
 80081fe:	e14d      	b.n	800849c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	785b      	ldrb	r3, [r3, #1]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f040 80a5 	bne.w	8008354 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	843b      	strh	r3, [r7, #32]
 8008218:	8c3b      	ldrh	r3, [r7, #32]
 800821a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01b      	beq.n	800825a <USB_DeactivateEndpoint+0x18a>
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008238:	83fb      	strh	r3, [r7, #30]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	441a      	add	r2, r3
 8008244:	8bfb      	ldrh	r3, [r7, #30]
 8008246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800824a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800824e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008256:	b29b      	uxth	r3, r3
 8008258:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	83bb      	strh	r3, [r7, #28]
 8008268:	8bbb      	ldrh	r3, [r7, #28]
 800826a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826e:	2b00      	cmp	r3, #0
 8008270:	d01b      	beq.n	80082aa <USB_DeactivateEndpoint+0x1da>
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008288:	837b      	strh	r3, [r7, #26]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	441a      	add	r2, r3
 8008294:	8b7b      	ldrh	r3, [r7, #26]
 8008296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800829a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800829e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c0:	833b      	strh	r3, [r7, #24]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	441a      	add	r2, r3
 80082cc:	8b3b      	ldrh	r3, [r7, #24]
 80082ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082de:	b29b      	uxth	r3, r3
 80082e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082f8:	82fb      	strh	r3, [r7, #22]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	441a      	add	r2, r3
 8008304:	8afb      	ldrh	r3, [r7, #22]
 8008306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800830a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800830e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008316:	b29b      	uxth	r3, r3
 8008318:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	b29b      	uxth	r3, r3
 8008328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800832c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008330:	82bb      	strh	r3, [r7, #20]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	441a      	add	r2, r3
 800833c:	8abb      	ldrh	r3, [r7, #20]
 800833e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800834a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800834e:	b29b      	uxth	r3, r3
 8008350:	8013      	strh	r3, [r2, #0]
 8008352:	e0a3      	b.n	800849c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008362:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d01b      	beq.n	80083a4 <USB_DeactivateEndpoint+0x2d4>
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	b29b      	uxth	r3, r3
 800837a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800837e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008382:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	441a      	add	r2, r3
 800838e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008398:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800839c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80083b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80083b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d01b      	beq.n	80083f4 <USB_DeactivateEndpoint+0x324>
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	441a      	add	r2, r3
 80083de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b29b      	uxth	r3, r3
 8008402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	441a      	add	r2, r3
 8008416:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800841c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008428:	b29b      	uxth	r3, r3
 800842a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800843e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008442:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	441a      	add	r2, r3
 800844e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800845c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008460:	b29b      	uxth	r3, r3
 8008462:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	881b      	ldrh	r3, [r3, #0]
 8008470:	b29b      	uxth	r3, r3
 8008472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800847a:	847b      	strh	r3, [r7, #34]	; 0x22
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	441a      	add	r2, r3
 8008486:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800848c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008498:	b29b      	uxth	r3, r3
 800849a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3734      	adds	r7, #52	; 0x34
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b0c4      	sub	sp, #272	; 0x110
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	1d3b      	adds	r3, r7, #4
 80084b2:	6018      	str	r0, [r3, #0]
 80084b4:	463b      	mov	r3, r7
 80084b6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084b8:	463b      	mov	r3, r7
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	785b      	ldrb	r3, [r3, #1]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	f040 8566 	bne.w	8008f90 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80084c4:	463b      	mov	r3, r7
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	699a      	ldr	r2, [r3, #24]
 80084ca:	463b      	mov	r3, r7
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d905      	bls.n	80084e0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80084d4:	463b      	mov	r3, r7
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084de:	e004      	b.n	80084ea <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80084e0:	463b      	mov	r3, r7
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80084ea:	463b      	mov	r3, r7
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	7b1b      	ldrb	r3, [r3, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d12c      	bne.n	800854e <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80084f4:	463b      	mov	r3, r7
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6959      	ldr	r1, [r3, #20]
 80084fa:	463b      	mov	r3, r7
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	88da      	ldrh	r2, [r3, #6]
 8008500:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008504:	b29b      	uxth	r3, r3
 8008506:	1d38      	adds	r0, r7, #4
 8008508:	6800      	ldr	r0, [r0, #0]
 800850a:	f001 fa43 	bl	8009994 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800850e:	1d3b      	adds	r3, r7, #4
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	617b      	str	r3, [r7, #20]
 8008514:	1d3b      	adds	r3, r7, #4
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800851c:	b29b      	uxth	r3, r3
 800851e:	461a      	mov	r2, r3
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	4413      	add	r3, r2
 8008524:	617b      	str	r3, [r7, #20]
 8008526:	463b      	mov	r3, r7
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	00da      	lsls	r2, r3, #3
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	4413      	add	r3, r2
 8008532:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8008536:	f107 0310 	add.w	r3, r7, #16
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008540:	b29a      	uxth	r2, r3
 8008542:	f107 0310 	add.w	r3, r7, #16
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	801a      	strh	r2, [r3, #0]
 800854a:	f000 bcec 	b.w	8008f26 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800854e:	463b      	mov	r3, r7
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	78db      	ldrb	r3, [r3, #3]
 8008554:	2b02      	cmp	r3, #2
 8008556:	f040 8356 	bne.w	8008c06 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800855a:	463b      	mov	r3, r7
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6a1a      	ldr	r2, [r3, #32]
 8008560:	463b      	mov	r3, r7
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	429a      	cmp	r2, r3
 8008568:	f240 82fa 	bls.w	8008b60 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800856c:	1d3b      	adds	r3, r7, #4
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	463b      	mov	r3, r7
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4413      	add	r3, r2
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	b29b      	uxth	r3, r3
 800857e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008586:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800858a:	1d3b      	adds	r3, r7, #4
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	463b      	mov	r3, r7
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	441a      	add	r2, r3
 8008598:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800859c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085a4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80085a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80085b0:	463b      	mov	r3, r7
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80085ba:	463b      	mov	r3, r7
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6a1a      	ldr	r2, [r3, #32]
 80085c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80085c4:	1ad2      	subs	r2, r2, r3
 80085c6:	463b      	mov	r3, r7
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80085cc:	1d3b      	adds	r3, r7, #4
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	463b      	mov	r3, r7
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 815e 	beq.w	80088a4 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085e8:	1d3b      	adds	r3, r7, #4
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	637b      	str	r3, [r7, #52]	; 0x34
 80085ee:	463b      	mov	r3, r7
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	785b      	ldrb	r3, [r3, #1]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d164      	bne.n	80086c2 <USB_EPStartXfer+0x218>
 80085f8:	1d3b      	adds	r3, r7, #4
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085fe:	1d3b      	adds	r3, r7, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008606:	b29b      	uxth	r3, r3
 8008608:	461a      	mov	r2, r3
 800860a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860c:	4413      	add	r3, r2
 800860e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008610:	463b      	mov	r3, r7
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	00da      	lsls	r2, r3, #3
 8008618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861a:	4413      	add	r3, r2
 800861c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008620:	62bb      	str	r3, [r7, #40]	; 0x28
 8008622:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008626:	2b00      	cmp	r3, #0
 8008628:	d112      	bne.n	8008650 <USB_EPStartXfer+0x1a6>
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008634:	b29a      	uxth	r2, r3
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	801a      	strh	r2, [r3, #0]
 800863a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	b29b      	uxth	r3, r3
 8008640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008648:	b29a      	uxth	r2, r3
 800864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864c:	801a      	strh	r2, [r3, #0]
 800864e:	e054      	b.n	80086fa <USB_EPStartXfer+0x250>
 8008650:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008654:	2b3e      	cmp	r3, #62	; 0x3e
 8008656:	d817      	bhi.n	8008688 <USB_EPStartXfer+0x1de>
 8008658:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800865c:	085b      	lsrs	r3, r3, #1
 800865e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008662:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d004      	beq.n	8008678 <USB_EPStartXfer+0x1ce>
 800866e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008672:	3301      	adds	r3, #1
 8008674:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800867c:	b29b      	uxth	r3, r3
 800867e:	029b      	lsls	r3, r3, #10
 8008680:	b29a      	uxth	r2, r3
 8008682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008684:	801a      	strh	r2, [r3, #0]
 8008686:	e038      	b.n	80086fa <USB_EPStartXfer+0x250>
 8008688:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800868c:	095b      	lsrs	r3, r3, #5
 800868e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008692:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008696:	f003 031f 	and.w	r3, r3, #31
 800869a:	2b00      	cmp	r3, #0
 800869c:	d104      	bne.n	80086a8 <USB_EPStartXfer+0x1fe>
 800869e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a2:	3b01      	subs	r3, #1
 80086a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80086a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	029b      	lsls	r3, r3, #10
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	801a      	strh	r2, [r3, #0]
 80086c0:	e01b      	b.n	80086fa <USB_EPStartXfer+0x250>
 80086c2:	463b      	mov	r3, r7
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	785b      	ldrb	r3, [r3, #1]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d116      	bne.n	80086fa <USB_EPStartXfer+0x250>
 80086cc:	1d3b      	adds	r3, r7, #4
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	461a      	mov	r2, r3
 80086d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086da:	4413      	add	r3, r2
 80086dc:	637b      	str	r3, [r7, #52]	; 0x34
 80086de:	463b      	mov	r3, r7
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	00da      	lsls	r2, r3, #3
 80086e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e8:	4413      	add	r3, r2
 80086ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086ee:	633b      	str	r3, [r7, #48]	; 0x30
 80086f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80086fa:	463b      	mov	r3, r7
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	895b      	ldrh	r3, [r3, #10]
 8008700:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008704:	463b      	mov	r3, r7
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6959      	ldr	r1, [r3, #20]
 800870a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800870e:	b29b      	uxth	r3, r3
 8008710:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008714:	1d38      	adds	r0, r7, #4
 8008716:	6800      	ldr	r0, [r0, #0]
 8008718:	f001 f93c 	bl	8009994 <USB_WritePMA>
            ep->xfer_buff += len;
 800871c:	463b      	mov	r3, r7
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695a      	ldr	r2, [r3, #20]
 8008722:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008726:	441a      	add	r2, r3
 8008728:	463b      	mov	r3, r7
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800872e:	463b      	mov	r3, r7
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6a1a      	ldr	r2, [r3, #32]
 8008734:	463b      	mov	r3, r7
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	429a      	cmp	r2, r3
 800873c:	d90e      	bls.n	800875c <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800873e:	463b      	mov	r3, r7
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8008748:	463b      	mov	r3, r7
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6a1a      	ldr	r2, [r3, #32]
 800874e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008752:	1ad2      	subs	r2, r2, r3
 8008754:	463b      	mov	r3, r7
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	621a      	str	r2, [r3, #32]
 800875a:	e008      	b.n	800876e <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800875c:	463b      	mov	r3, r7
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8008766:	463b      	mov	r3, r7
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2200      	movs	r2, #0
 800876c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800876e:	463b      	mov	r3, r7
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	785b      	ldrb	r3, [r3, #1]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d164      	bne.n	8008842 <USB_EPStartXfer+0x398>
 8008778:	1d3b      	adds	r3, r7, #4
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	61fb      	str	r3, [r7, #28]
 800877e:	1d3b      	adds	r3, r7, #4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008786:	b29b      	uxth	r3, r3
 8008788:	461a      	mov	r2, r3
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	4413      	add	r3, r2
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	463b      	mov	r3, r7
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	00da      	lsls	r2, r3, #3
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	4413      	add	r3, r2
 800879c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087a0:	61bb      	str	r3, [r7, #24]
 80087a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d112      	bne.n	80087d0 <USB_EPStartXfer+0x326>
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	801a      	strh	r2, [r3, #0]
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	801a      	strh	r2, [r3, #0]
 80087ce:	e057      	b.n	8008880 <USB_EPStartXfer+0x3d6>
 80087d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80087d4:	2b3e      	cmp	r3, #62	; 0x3e
 80087d6:	d817      	bhi.n	8008808 <USB_EPStartXfer+0x35e>
 80087d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80087dc:	085b      	lsrs	r3, r3, #1
 80087de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80087e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d004      	beq.n	80087f8 <USB_EPStartXfer+0x34e>
 80087ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80087f2:	3301      	adds	r3, #1
 80087f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80087f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	029b      	lsls	r3, r3, #10
 8008800:	b29a      	uxth	r2, r3
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	801a      	strh	r2, [r3, #0]
 8008806:	e03b      	b.n	8008880 <USB_EPStartXfer+0x3d6>
 8008808:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800880c:	095b      	lsrs	r3, r3, #5
 800880e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008812:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008816:	f003 031f 	and.w	r3, r3, #31
 800881a:	2b00      	cmp	r3, #0
 800881c:	d104      	bne.n	8008828 <USB_EPStartXfer+0x37e>
 800881e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008822:	3b01      	subs	r3, #1
 8008824:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008828:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800882c:	b29b      	uxth	r3, r3
 800882e:	029b      	lsls	r3, r3, #10
 8008830:	b29b      	uxth	r3, r3
 8008832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800883a:	b29a      	uxth	r2, r3
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	801a      	strh	r2, [r3, #0]
 8008840:	e01e      	b.n	8008880 <USB_EPStartXfer+0x3d6>
 8008842:	463b      	mov	r3, r7
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	785b      	ldrb	r3, [r3, #1]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d119      	bne.n	8008880 <USB_EPStartXfer+0x3d6>
 800884c:	1d3b      	adds	r3, r7, #4
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
 8008852:	1d3b      	adds	r3, r7, #4
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800885a:	b29b      	uxth	r3, r3
 800885c:	461a      	mov	r2, r3
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	4413      	add	r3, r2
 8008862:	627b      	str	r3, [r7, #36]	; 0x24
 8008864:	463b      	mov	r3, r7
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	00da      	lsls	r2, r3, #3
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	4413      	add	r3, r2
 8008870:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008874:	623b      	str	r3, [r7, #32]
 8008876:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800887a:	b29a      	uxth	r2, r3
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008880:	463b      	mov	r3, r7
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	891b      	ldrh	r3, [r3, #8]
 8008886:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800888a:	463b      	mov	r3, r7
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6959      	ldr	r1, [r3, #20]
 8008890:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008894:	b29b      	uxth	r3, r3
 8008896:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800889a:	1d38      	adds	r0, r7, #4
 800889c:	6800      	ldr	r0, [r0, #0]
 800889e:	f001 f879 	bl	8009994 <USB_WritePMA>
 80088a2:	e340      	b.n	8008f26 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088a4:	463b      	mov	r3, r7
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	785b      	ldrb	r3, [r3, #1]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d164      	bne.n	8008978 <USB_EPStartXfer+0x4ce>
 80088ae:	1d3b      	adds	r3, r7, #4
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088b4:	1d3b      	adds	r3, r7, #4
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088bc:	b29b      	uxth	r3, r3
 80088be:	461a      	mov	r2, r3
 80088c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c2:	4413      	add	r3, r2
 80088c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088c6:	463b      	mov	r3, r7
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	00da      	lsls	r2, r3, #3
 80088ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088d0:	4413      	add	r3, r2
 80088d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80088d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80088d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d112      	bne.n	8008906 <USB_EPStartXfer+0x45c>
 80088e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e2:	881b      	ldrh	r3, [r3, #0]
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ee:	801a      	strh	r2, [r3, #0]
 80088f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088fe:	b29a      	uxth	r2, r3
 8008900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008902:	801a      	strh	r2, [r3, #0]
 8008904:	e057      	b.n	80089b6 <USB_EPStartXfer+0x50c>
 8008906:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800890a:	2b3e      	cmp	r3, #62	; 0x3e
 800890c:	d817      	bhi.n	800893e <USB_EPStartXfer+0x494>
 800890e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008912:	085b      	lsrs	r3, r3, #1
 8008914:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008918:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <USB_EPStartXfer+0x484>
 8008924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008928:	3301      	adds	r3, #1
 800892a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800892e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008932:	b29b      	uxth	r3, r3
 8008934:	029b      	lsls	r3, r3, #10
 8008936:	b29a      	uxth	r2, r3
 8008938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800893a:	801a      	strh	r2, [r3, #0]
 800893c:	e03b      	b.n	80089b6 <USB_EPStartXfer+0x50c>
 800893e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008942:	095b      	lsrs	r3, r3, #5
 8008944:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008948:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800894c:	f003 031f 	and.w	r3, r3, #31
 8008950:	2b00      	cmp	r3, #0
 8008952:	d104      	bne.n	800895e <USB_EPStartXfer+0x4b4>
 8008954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008958:	3b01      	subs	r3, #1
 800895a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800895e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008962:	b29b      	uxth	r3, r3
 8008964:	029b      	lsls	r3, r3, #10
 8008966:	b29b      	uxth	r3, r3
 8008968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800896c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008970:	b29a      	uxth	r2, r3
 8008972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008974:	801a      	strh	r2, [r3, #0]
 8008976:	e01e      	b.n	80089b6 <USB_EPStartXfer+0x50c>
 8008978:	463b      	mov	r3, r7
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	785b      	ldrb	r3, [r3, #1]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d119      	bne.n	80089b6 <USB_EPStartXfer+0x50c>
 8008982:	1d3b      	adds	r3, r7, #4
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	657b      	str	r3, [r7, #84]	; 0x54
 8008988:	1d3b      	adds	r3, r7, #4
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008990:	b29b      	uxth	r3, r3
 8008992:	461a      	mov	r2, r3
 8008994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008996:	4413      	add	r3, r2
 8008998:	657b      	str	r3, [r7, #84]	; 0x54
 800899a:	463b      	mov	r3, r7
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	00da      	lsls	r2, r3, #3
 80089a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089a4:	4413      	add	r3, r2
 80089a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80089aa:	653b      	str	r3, [r7, #80]	; 0x50
 80089ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80089b6:	463b      	mov	r3, r7
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	891b      	ldrh	r3, [r3, #8]
 80089bc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089c0:	463b      	mov	r3, r7
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6959      	ldr	r1, [r3, #20]
 80089c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80089d0:	1d38      	adds	r0, r7, #4
 80089d2:	6800      	ldr	r0, [r0, #0]
 80089d4:	f000 ffde 	bl	8009994 <USB_WritePMA>
            ep->xfer_buff += len;
 80089d8:	463b      	mov	r3, r7
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	695a      	ldr	r2, [r3, #20]
 80089de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80089e2:	441a      	add	r2, r3
 80089e4:	463b      	mov	r3, r7
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80089ea:	463b      	mov	r3, r7
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6a1a      	ldr	r2, [r3, #32]
 80089f0:	463b      	mov	r3, r7
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d90e      	bls.n	8008a18 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 80089fa:	463b      	mov	r3, r7
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8008a04:	463b      	mov	r3, r7
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6a1a      	ldr	r2, [r3, #32]
 8008a0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a0e:	1ad2      	subs	r2, r2, r3
 8008a10:	463b      	mov	r3, r7
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	621a      	str	r2, [r3, #32]
 8008a16:	e008      	b.n	8008a2a <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a18:	463b      	mov	r3, r7
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8008a22:	463b      	mov	r3, r7
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2200      	movs	r2, #0
 8008a28:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a2a:	1d3b      	adds	r3, r7, #4
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a30:	463b      	mov	r3, r7
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	785b      	ldrb	r3, [r3, #1]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d164      	bne.n	8008b04 <USB_EPStartXfer+0x65a>
 8008a3a:	1d3b      	adds	r3, r7, #4
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a40:	1d3b      	adds	r3, r7, #4
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4e:	4413      	add	r3, r2
 8008a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a52:	463b      	mov	r3, r7
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	00da      	lsls	r2, r3, #3
 8008a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d112      	bne.n	8008a92 <USB_EPStartXfer+0x5e8>
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	801a      	strh	r2, [r3, #0]
 8008a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	801a      	strh	r2, [r3, #0]
 8008a90:	e054      	b.n	8008b3c <USB_EPStartXfer+0x692>
 8008a92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a96:	2b3e      	cmp	r3, #62	; 0x3e
 8008a98:	d817      	bhi.n	8008aca <USB_EPStartXfer+0x620>
 8008a9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a9e:	085b      	lsrs	r3, r3, #1
 8008aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008aa4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d004      	beq.n	8008aba <USB_EPStartXfer+0x610>
 8008ab0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	029b      	lsls	r3, r3, #10
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac6:	801a      	strh	r2, [r3, #0]
 8008ac8:	e038      	b.n	8008b3c <USB_EPStartXfer+0x692>
 8008aca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ace:	095b      	lsrs	r3, r3, #5
 8008ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ad4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ad8:	f003 031f 	and.w	r3, r3, #31
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d104      	bne.n	8008aea <USB_EPStartXfer+0x640>
 8008ae0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	029b      	lsls	r3, r3, #10
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b00:	801a      	strh	r2, [r3, #0]
 8008b02:	e01b      	b.n	8008b3c <USB_EPStartXfer+0x692>
 8008b04:	463b      	mov	r3, r7
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	785b      	ldrb	r3, [r3, #1]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d116      	bne.n	8008b3c <USB_EPStartXfer+0x692>
 8008b0e:	1d3b      	adds	r3, r7, #4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	461a      	mov	r2, r3
 8008b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b1c:	4413      	add	r3, r2
 8008b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b20:	463b      	mov	r3, r7
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	00da      	lsls	r2, r3, #3
 8008b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b30:	643b      	str	r3, [r7, #64]	; 0x40
 8008b32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b3c:	463b      	mov	r3, r7
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	895b      	ldrh	r3, [r3, #10]
 8008b42:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b46:	463b      	mov	r3, r7
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6959      	ldr	r1, [r3, #20]
 8008b4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008b56:	1d38      	adds	r0, r7, #4
 8008b58:	6800      	ldr	r0, [r0, #0]
 8008b5a:	f000 ff1b 	bl	8009994 <USB_WritePMA>
 8008b5e:	e1e2      	b.n	8008f26 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8008b60:	463b      	mov	r3, r7
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008b6a:	1d3b      	adds	r3, r7, #4
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	463b      	mov	r3, r7
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4413      	add	r3, r2
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b84:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008b88:	1d3b      	adds	r3, r7, #4
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	463b      	mov	r3, r7
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	441a      	add	r2, r3
 8008b96:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008bae:	1d3b      	adds	r3, r7, #4
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	663b      	str	r3, [r7, #96]	; 0x60
 8008bb4:	1d3b      	adds	r3, r7, #4
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bc2:	4413      	add	r3, r2
 8008bc4:	663b      	str	r3, [r7, #96]	; 0x60
 8008bc6:	463b      	mov	r3, r7
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	00da      	lsls	r2, r3, #3
 8008bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008be0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008be2:	463b      	mov	r3, r7
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	891b      	ldrh	r3, [r3, #8]
 8008be8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bec:	463b      	mov	r3, r7
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6959      	ldr	r1, [r3, #20]
 8008bf2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008bfc:	1d38      	adds	r0, r7, #4
 8008bfe:	6800      	ldr	r0, [r0, #0]
 8008c00:	f000 fec8 	bl	8009994 <USB_WritePMA>
 8008c04:	e18f      	b.n	8008f26 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c06:	1d3b      	adds	r3, r7, #4
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	463b      	mov	r3, r7
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 808f 	beq.w	8008d40 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c22:	1d3b      	adds	r3, r7, #4
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c28:	463b      	mov	r3, r7
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	785b      	ldrb	r3, [r3, #1]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d164      	bne.n	8008cfc <USB_EPStartXfer+0x852>
 8008c32:	1d3b      	adds	r3, r7, #4
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	673b      	str	r3, [r7, #112]	; 0x70
 8008c38:	1d3b      	adds	r3, r7, #4
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	461a      	mov	r2, r3
 8008c44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c46:	4413      	add	r3, r2
 8008c48:	673b      	str	r3, [r7, #112]	; 0x70
 8008c4a:	463b      	mov	r3, r7
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	00da      	lsls	r2, r3, #3
 8008c52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c54:	4413      	add	r3, r2
 8008c56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d112      	bne.n	8008c8a <USB_EPStartXfer+0x7e0>
 8008c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c72:	801a      	strh	r2, [r3, #0]
 8008c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c86:	801a      	strh	r2, [r3, #0]
 8008c88:	e054      	b.n	8008d34 <USB_EPStartXfer+0x88a>
 8008c8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c8e:	2b3e      	cmp	r3, #62	; 0x3e
 8008c90:	d817      	bhi.n	8008cc2 <USB_EPStartXfer+0x818>
 8008c92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c96:	085b      	lsrs	r3, r3, #1
 8008c98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008c9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d004      	beq.n	8008cb2 <USB_EPStartXfer+0x808>
 8008ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cac:	3301      	adds	r3, #1
 8008cae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	029b      	lsls	r3, r3, #10
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cbe:	801a      	strh	r2, [r3, #0]
 8008cc0:	e038      	b.n	8008d34 <USB_EPStartXfer+0x88a>
 8008cc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008cc6:	095b      	lsrs	r3, r3, #5
 8008cc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ccc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008cd0:	f003 031f 	and.w	r3, r3, #31
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d104      	bne.n	8008ce2 <USB_EPStartXfer+0x838>
 8008cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	029b      	lsls	r3, r3, #10
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf8:	801a      	strh	r2, [r3, #0]
 8008cfa:	e01b      	b.n	8008d34 <USB_EPStartXfer+0x88a>
 8008cfc:	463b      	mov	r3, r7
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	785b      	ldrb	r3, [r3, #1]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d116      	bne.n	8008d34 <USB_EPStartXfer+0x88a>
 8008d06:	1d3b      	adds	r3, r7, #4
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	461a      	mov	r2, r3
 8008d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d14:	4413      	add	r3, r2
 8008d16:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d18:	463b      	mov	r3, r7
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	00da      	lsls	r2, r3, #3
 8008d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d22:	4413      	add	r3, r2
 8008d24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d28:	677b      	str	r3, [r7, #116]	; 0x74
 8008d2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008d34:	463b      	mov	r3, r7
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	895b      	ldrh	r3, [r3, #10]
 8008d3a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8008d3e:	e097      	b.n	8008e70 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d40:	463b      	mov	r3, r7
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	785b      	ldrb	r3, [r3, #1]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d168      	bne.n	8008e1c <USB_EPStartXfer+0x972>
 8008d4a:	1d3b      	adds	r3, r7, #4
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d52:	1d3b      	adds	r3, r7, #4
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d62:	4413      	add	r3, r2
 8008d64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d68:	463b      	mov	r3, r7
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	00da      	lsls	r2, r3, #3
 8008d70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d74:	4413      	add	r3, r2
 8008d76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d112      	bne.n	8008daa <USB_EPStartXfer+0x900>
 8008d84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d92:	801a      	strh	r2, [r3, #0]
 8008d94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008da6:	801a      	strh	r2, [r3, #0]
 8008da8:	e05d      	b.n	8008e66 <USB_EPStartXfer+0x9bc>
 8008daa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008dae:	2b3e      	cmp	r3, #62	; 0x3e
 8008db0:	d817      	bhi.n	8008de2 <USB_EPStartXfer+0x938>
 8008db2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008db6:	085b      	lsrs	r3, r3, #1
 8008db8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008dbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d004      	beq.n	8008dd2 <USB_EPStartXfer+0x928>
 8008dc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008dcc:	3301      	adds	r3, #1
 8008dce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008dd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	029b      	lsls	r3, r3, #10
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008dde:	801a      	strh	r2, [r3, #0]
 8008de0:	e041      	b.n	8008e66 <USB_EPStartXfer+0x9bc>
 8008de2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008de6:	095b      	lsrs	r3, r3, #5
 8008de8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008dec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008df0:	f003 031f 	and.w	r3, r3, #31
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d104      	bne.n	8008e02 <USB_EPStartXfer+0x958>
 8008df8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008e02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	029b      	lsls	r3, r3, #10
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e18:	801a      	strh	r2, [r3, #0]
 8008e1a:	e024      	b.n	8008e66 <USB_EPStartXfer+0x9bc>
 8008e1c:	463b      	mov	r3, r7
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	785b      	ldrb	r3, [r3, #1]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d11f      	bne.n	8008e66 <USB_EPStartXfer+0x9bc>
 8008e26:	1d3b      	adds	r3, r7, #4
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e2e:	1d3b      	adds	r3, r7, #4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e3e:	4413      	add	r3, r2
 8008e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e44:	463b      	mov	r3, r7
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	00da      	lsls	r2, r3, #3
 8008e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e50:	4413      	add	r3, r2
 8008e52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008e66:	463b      	mov	r3, r7
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	891b      	ldrh	r3, [r3, #8]
 8008e6c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e70:	463b      	mov	r3, r7
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6959      	ldr	r1, [r3, #20]
 8008e76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008e80:	1d38      	adds	r0, r7, #4
 8008e82:	6800      	ldr	r0, [r0, #0]
 8008e84:	f000 fd86 	bl	8009994 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008e88:	463b      	mov	r3, r7
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	785b      	ldrb	r3, [r3, #1]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d122      	bne.n	8008ed8 <USB_EPStartXfer+0xa2e>
 8008e92:	1d3b      	adds	r3, r7, #4
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	463b      	mov	r3, r7
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eac:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8008eb0:	1d3b      	adds	r3, r7, #4
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	463b      	mov	r3, r7
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	441a      	add	r2, r3
 8008ebe:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ece:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	8013      	strh	r3, [r2, #0]
 8008ed6:	e026      	b.n	8008f26 <USB_EPStartXfer+0xa7c>
 8008ed8:	463b      	mov	r3, r7
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	785b      	ldrb	r3, [r3, #1]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d121      	bne.n	8008f26 <USB_EPStartXfer+0xa7c>
 8008ee2:	1d3b      	adds	r3, r7, #4
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008f00:	1d3b      	adds	r3, r7, #4
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	463b      	mov	r3, r7
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	441a      	add	r2, r3
 8008f0e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8008f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008f26:	1d3b      	adds	r3, r7, #4
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	463b      	mov	r3, r7
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	f107 020e 	add.w	r2, r7, #14
 8008f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f44:	8013      	strh	r3, [r2, #0]
 8008f46:	f107 030e 	add.w	r3, r7, #14
 8008f4a:	f107 020e 	add.w	r2, r7, #14
 8008f4e:	8812      	ldrh	r2, [r2, #0]
 8008f50:	f082 0210 	eor.w	r2, r2, #16
 8008f54:	801a      	strh	r2, [r3, #0]
 8008f56:	f107 030e 	add.w	r3, r7, #14
 8008f5a:	f107 020e 	add.w	r2, r7, #14
 8008f5e:	8812      	ldrh	r2, [r2, #0]
 8008f60:	f082 0220 	eor.w	r2, r2, #32
 8008f64:	801a      	strh	r2, [r3, #0]
 8008f66:	1d3b      	adds	r3, r7, #4
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	463b      	mov	r3, r7
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	441a      	add	r2, r3
 8008f74:	f107 030e 	add.w	r3, r7, #14
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	8013      	strh	r3, [r2, #0]
 8008f8e:	e3b5      	b.n	80096fc <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008f90:	463b      	mov	r3, r7
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	7b1b      	ldrb	r3, [r3, #12]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f040 8090 	bne.w	80090bc <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8008f9c:	463b      	mov	r3, r7
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	699a      	ldr	r2, [r3, #24]
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d90e      	bls.n	8008fca <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8008fac:	463b      	mov	r3, r7
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8008fb6:	463b      	mov	r3, r7
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	699a      	ldr	r2, [r3, #24]
 8008fbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008fc0:	1ad2      	subs	r2, r2, r3
 8008fc2:	463b      	mov	r3, r7
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	619a      	str	r2, [r3, #24]
 8008fc8:	e008      	b.n	8008fdc <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8008fca:	463b      	mov	r3, r7
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8008fd4:	463b      	mov	r3, r7
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008fdc:	1d3b      	adds	r3, r7, #4
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008fe4:	1d3b      	adds	r3, r7, #4
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	461a      	mov	r2, r3
 8008ff0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ffa:	463b      	mov	r3, r7
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	00da      	lsls	r2, r3, #3
 8009002:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009006:	4413      	add	r3, r2
 8009008:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800900c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009010:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009014:	2b00      	cmp	r3, #0
 8009016:	d116      	bne.n	8009046 <USB_EPStartXfer+0xb9c>
 8009018:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	b29b      	uxth	r3, r3
 8009020:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009024:	b29a      	uxth	r2, r3
 8009026:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800902a:	801a      	strh	r2, [r3, #0]
 800902c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	b29b      	uxth	r3, r3
 8009034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800903c:	b29a      	uxth	r2, r3
 800903e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009042:	801a      	strh	r2, [r3, #0]
 8009044:	e32c      	b.n	80096a0 <USB_EPStartXfer+0x11f6>
 8009046:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800904a:	2b3e      	cmp	r3, #62	; 0x3e
 800904c:	d818      	bhi.n	8009080 <USB_EPStartXfer+0xbd6>
 800904e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009052:	085b      	lsrs	r3, r3, #1
 8009054:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009058:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	2b00      	cmp	r3, #0
 8009062:	d004      	beq.n	800906e <USB_EPStartXfer+0xbc4>
 8009064:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009068:	3301      	adds	r3, #1
 800906a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800906e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009072:	b29b      	uxth	r3, r3
 8009074:	029b      	lsls	r3, r3, #10
 8009076:	b29a      	uxth	r2, r3
 8009078:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800907c:	801a      	strh	r2, [r3, #0]
 800907e:	e30f      	b.n	80096a0 <USB_EPStartXfer+0x11f6>
 8009080:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009084:	095b      	lsrs	r3, r3, #5
 8009086:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800908a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800908e:	f003 031f 	and.w	r3, r3, #31
 8009092:	2b00      	cmp	r3, #0
 8009094:	d104      	bne.n	80090a0 <USB_EPStartXfer+0xbf6>
 8009096:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800909a:	3b01      	subs	r3, #1
 800909c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80090a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	029b      	lsls	r3, r3, #10
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090b8:	801a      	strh	r2, [r3, #0]
 80090ba:	e2f1      	b.n	80096a0 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 80090bc:	463b      	mov	r3, r7
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	78db      	ldrb	r3, [r3, #3]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	f040 818f 	bne.w	80093e6 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80090c8:	463b      	mov	r3, r7
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	785b      	ldrb	r3, [r3, #1]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d175      	bne.n	80091be <USB_EPStartXfer+0xd14>
 80090d2:	1d3b      	adds	r3, r7, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090da:	1d3b      	adds	r3, r7, #4
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	461a      	mov	r2, r3
 80090e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80090ea:	4413      	add	r3, r2
 80090ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090f0:	463b      	mov	r3, r7
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	00da      	lsls	r2, r3, #3
 80090f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80090fc:	4413      	add	r3, r2
 80090fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009106:	463b      	mov	r3, r7
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d116      	bne.n	800913e <USB_EPStartXfer+0xc94>
 8009110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	b29b      	uxth	r3, r3
 8009118:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800911c:	b29a      	uxth	r2, r3
 800911e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009122:	801a      	strh	r2, [r3, #0]
 8009124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009128:	881b      	ldrh	r3, [r3, #0]
 800912a:	b29b      	uxth	r3, r3
 800912c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009134:	b29a      	uxth	r2, r3
 8009136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800913a:	801a      	strh	r2, [r3, #0]
 800913c:	e065      	b.n	800920a <USB_EPStartXfer+0xd60>
 800913e:	463b      	mov	r3, r7
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	2b3e      	cmp	r3, #62	; 0x3e
 8009146:	d81a      	bhi.n	800917e <USB_EPStartXfer+0xcd4>
 8009148:	463b      	mov	r3, r7
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	085b      	lsrs	r3, r3, #1
 8009150:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009154:	463b      	mov	r3, r7
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d004      	beq.n	800916c <USB_EPStartXfer+0xcc2>
 8009162:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009166:	3301      	adds	r3, #1
 8009168:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800916c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009170:	b29b      	uxth	r3, r3
 8009172:	029b      	lsls	r3, r3, #10
 8009174:	b29a      	uxth	r2, r3
 8009176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800917a:	801a      	strh	r2, [r3, #0]
 800917c:	e045      	b.n	800920a <USB_EPStartXfer+0xd60>
 800917e:	463b      	mov	r3, r7
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	095b      	lsrs	r3, r3, #5
 8009186:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800918a:	463b      	mov	r3, r7
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	f003 031f 	and.w	r3, r3, #31
 8009194:	2b00      	cmp	r3, #0
 8009196:	d104      	bne.n	80091a2 <USB_EPStartXfer+0xcf8>
 8009198:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800919c:	3b01      	subs	r3, #1
 800919e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	029b      	lsls	r3, r3, #10
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091ba:	801a      	strh	r2, [r3, #0]
 80091bc:	e025      	b.n	800920a <USB_EPStartXfer+0xd60>
 80091be:	463b      	mov	r3, r7
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	785b      	ldrb	r3, [r3, #1]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d120      	bne.n	800920a <USB_EPStartXfer+0xd60>
 80091c8:	1d3b      	adds	r3, r7, #4
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091d0:	1d3b      	adds	r3, r7, #4
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091d8:	b29b      	uxth	r3, r3
 80091da:	461a      	mov	r2, r3
 80091dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091e0:	4413      	add	r3, r2
 80091e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091e6:	463b      	mov	r3, r7
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	00da      	lsls	r2, r3, #3
 80091ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091f2:	4413      	add	r3, r2
 80091f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091fc:	463b      	mov	r3, r7
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	b29a      	uxth	r2, r3
 8009204:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009208:	801a      	strh	r2, [r3, #0]
 800920a:	1d3b      	adds	r3, r7, #4
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009212:	463b      	mov	r3, r7
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	785b      	ldrb	r3, [r3, #1]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d175      	bne.n	8009308 <USB_EPStartXfer+0xe5e>
 800921c:	1d3b      	adds	r3, r7, #4
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009224:	1d3b      	adds	r3, r7, #4
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800922c:	b29b      	uxth	r3, r3
 800922e:	461a      	mov	r2, r3
 8009230:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009234:	4413      	add	r3, r2
 8009236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800923a:	463b      	mov	r3, r7
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	00da      	lsls	r2, r3, #3
 8009242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009246:	4413      	add	r3, r2
 8009248:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800924c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009250:	463b      	mov	r3, r7
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d116      	bne.n	8009288 <USB_EPStartXfer+0xdde>
 800925a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800925e:	881b      	ldrh	r3, [r3, #0]
 8009260:	b29b      	uxth	r3, r3
 8009262:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009266:	b29a      	uxth	r2, r3
 8009268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800926c:	801a      	strh	r2, [r3, #0]
 800926e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	b29b      	uxth	r3, r3
 8009276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800927a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800927e:	b29a      	uxth	r2, r3
 8009280:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009284:	801a      	strh	r2, [r3, #0]
 8009286:	e061      	b.n	800934c <USB_EPStartXfer+0xea2>
 8009288:	463b      	mov	r3, r7
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	2b3e      	cmp	r3, #62	; 0x3e
 8009290:	d81a      	bhi.n	80092c8 <USB_EPStartXfer+0xe1e>
 8009292:	463b      	mov	r3, r7
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	085b      	lsrs	r3, r3, #1
 800929a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800929e:	463b      	mov	r3, r7
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d004      	beq.n	80092b6 <USB_EPStartXfer+0xe0c>
 80092ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b0:	3301      	adds	r3, #1
 80092b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	029b      	lsls	r3, r3, #10
 80092be:	b29a      	uxth	r2, r3
 80092c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092c4:	801a      	strh	r2, [r3, #0]
 80092c6:	e041      	b.n	800934c <USB_EPStartXfer+0xea2>
 80092c8:	463b      	mov	r3, r7
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	095b      	lsrs	r3, r3, #5
 80092d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092d4:	463b      	mov	r3, r7
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	f003 031f 	and.w	r3, r3, #31
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d104      	bne.n	80092ec <USB_EPStartXfer+0xe42>
 80092e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e6:	3b01      	subs	r3, #1
 80092e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	029b      	lsls	r3, r3, #10
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092fe:	b29a      	uxth	r2, r3
 8009300:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009304:	801a      	strh	r2, [r3, #0]
 8009306:	e021      	b.n	800934c <USB_EPStartXfer+0xea2>
 8009308:	463b      	mov	r3, r7
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	785b      	ldrb	r3, [r3, #1]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d11c      	bne.n	800934c <USB_EPStartXfer+0xea2>
 8009312:	1d3b      	adds	r3, r7, #4
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800931a:	b29b      	uxth	r3, r3
 800931c:	461a      	mov	r2, r3
 800931e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009322:	4413      	add	r3, r2
 8009324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009328:	463b      	mov	r3, r7
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	00da      	lsls	r2, r3, #3
 8009330:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009334:	4413      	add	r3, r2
 8009336:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800933a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800933e:	463b      	mov	r3, r7
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	b29a      	uxth	r2, r3
 8009346:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800934a:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800934c:	463b      	mov	r3, r7
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 81a4 	beq.w	80096a0 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009358:	1d3b      	adds	r3, r7, #4
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	463b      	mov	r3, r7
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800936c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d005      	beq.n	8009384 <USB_EPStartXfer+0xeda>
 8009378:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800937c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10d      	bne.n	80093a0 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009384:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800938c:	2b00      	cmp	r3, #0
 800938e:	f040 8187 	bne.w	80096a0 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009392:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800939a:	2b00      	cmp	r3, #0
 800939c:	f040 8180 	bne.w	80096a0 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80093a0:	1d3b      	adds	r3, r7, #4
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	463b      	mov	r3, r7
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ba:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80093be:	1d3b      	adds	r3, r7, #4
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	463b      	mov	r3, r7
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	441a      	add	r2, r3
 80093cc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80093d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	8013      	strh	r3, [r2, #0]
 80093e4:	e15c      	b.n	80096a0 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80093e6:	463b      	mov	r3, r7
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	78db      	ldrb	r3, [r3, #3]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	f040 8155 	bne.w	800969c <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80093f2:	463b      	mov	r3, r7
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	699a      	ldr	r2, [r3, #24]
 80093f8:	463b      	mov	r3, r7
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d90e      	bls.n	8009420 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8009402:	463b      	mov	r3, r7
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800940c:	463b      	mov	r3, r7
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	699a      	ldr	r2, [r3, #24]
 8009412:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009416:	1ad2      	subs	r2, r2, r3
 8009418:	463b      	mov	r3, r7
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	619a      	str	r2, [r3, #24]
 800941e:	e008      	b.n	8009432 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8009420:	463b      	mov	r3, r7
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800942a:	463b      	mov	r3, r7
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2200      	movs	r2, #0
 8009430:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009432:	463b      	mov	r3, r7
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	785b      	ldrb	r3, [r3, #1]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d16f      	bne.n	800951c <USB_EPStartXfer+0x1072>
 800943c:	1d3b      	adds	r3, r7, #4
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009444:	1d3b      	adds	r3, r7, #4
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800944c:	b29b      	uxth	r3, r3
 800944e:	461a      	mov	r2, r3
 8009450:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009454:	4413      	add	r3, r2
 8009456:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800945a:	463b      	mov	r3, r7
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	00da      	lsls	r2, r3, #3
 8009462:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009466:	4413      	add	r3, r2
 8009468:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800946c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009470:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009474:	2b00      	cmp	r3, #0
 8009476:	d116      	bne.n	80094a6 <USB_EPStartXfer+0xffc>
 8009478:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	b29b      	uxth	r3, r3
 8009480:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009484:	b29a      	uxth	r2, r3
 8009486:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800948a:	801a      	strh	r2, [r3, #0]
 800948c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	b29b      	uxth	r3, r3
 8009494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800949c:	b29a      	uxth	r2, r3
 800949e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094a2:	801a      	strh	r2, [r3, #0]
 80094a4:	e05f      	b.n	8009566 <USB_EPStartXfer+0x10bc>
 80094a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094aa:	2b3e      	cmp	r3, #62	; 0x3e
 80094ac:	d818      	bhi.n	80094e0 <USB_EPStartXfer+0x1036>
 80094ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094b2:	085b      	lsrs	r3, r3, #1
 80094b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80094b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094bc:	f003 0301 	and.w	r3, r3, #1
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d004      	beq.n	80094ce <USB_EPStartXfer+0x1024>
 80094c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094c8:	3301      	adds	r3, #1
 80094ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80094ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	029b      	lsls	r3, r3, #10
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094dc:	801a      	strh	r2, [r3, #0]
 80094de:	e042      	b.n	8009566 <USB_EPStartXfer+0x10bc>
 80094e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094e4:	095b      	lsrs	r3, r3, #5
 80094e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80094ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094ee:	f003 031f 	and.w	r3, r3, #31
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d104      	bne.n	8009500 <USB_EPStartXfer+0x1056>
 80094f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094fa:	3b01      	subs	r3, #1
 80094fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009504:	b29b      	uxth	r3, r3
 8009506:	029b      	lsls	r3, r3, #10
 8009508:	b29b      	uxth	r3, r3
 800950a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800950e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009512:	b29a      	uxth	r2, r3
 8009514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009518:	801a      	strh	r2, [r3, #0]
 800951a:	e024      	b.n	8009566 <USB_EPStartXfer+0x10bc>
 800951c:	463b      	mov	r3, r7
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	785b      	ldrb	r3, [r3, #1]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d11f      	bne.n	8009566 <USB_EPStartXfer+0x10bc>
 8009526:	1d3b      	adds	r3, r7, #4
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800952e:	1d3b      	adds	r3, r7, #4
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009536:	b29b      	uxth	r3, r3
 8009538:	461a      	mov	r2, r3
 800953a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800953e:	4413      	add	r3, r2
 8009540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009544:	463b      	mov	r3, r7
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	00da      	lsls	r2, r3, #3
 800954c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009550:	4413      	add	r3, r2
 8009552:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009556:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800955a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800955e:	b29a      	uxth	r2, r3
 8009560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009564:	801a      	strh	r2, [r3, #0]
 8009566:	1d3b      	adds	r3, r7, #4
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800956e:	463b      	mov	r3, r7
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	785b      	ldrb	r3, [r3, #1]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d16f      	bne.n	8009658 <USB_EPStartXfer+0x11ae>
 8009578:	1d3b      	adds	r3, r7, #4
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009580:	1d3b      	adds	r3, r7, #4
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009588:	b29b      	uxth	r3, r3
 800958a:	461a      	mov	r2, r3
 800958c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009590:	4413      	add	r3, r2
 8009592:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009596:	463b      	mov	r3, r7
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	00da      	lsls	r2, r3, #3
 800959e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80095a2:	4413      	add	r3, r2
 80095a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80095ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d116      	bne.n	80095e2 <USB_EPStartXfer+0x1138>
 80095b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80095c6:	801a      	strh	r2, [r3, #0]
 80095c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095d8:	b29a      	uxth	r2, r3
 80095da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80095de:	801a      	strh	r2, [r3, #0]
 80095e0:	e05e      	b.n	80096a0 <USB_EPStartXfer+0x11f6>
 80095e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80095e6:	2b3e      	cmp	r3, #62	; 0x3e
 80095e8:	d818      	bhi.n	800961c <USB_EPStartXfer+0x1172>
 80095ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80095ee:	085b      	lsrs	r3, r3, #1
 80095f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d004      	beq.n	800960a <USB_EPStartXfer+0x1160>
 8009600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009604:	3301      	adds	r3, #1
 8009606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800960a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800960e:	b29b      	uxth	r3, r3
 8009610:	029b      	lsls	r3, r3, #10
 8009612:	b29a      	uxth	r2, r3
 8009614:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009618:	801a      	strh	r2, [r3, #0]
 800961a:	e041      	b.n	80096a0 <USB_EPStartXfer+0x11f6>
 800961c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009620:	095b      	lsrs	r3, r3, #5
 8009622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009626:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800962a:	f003 031f 	and.w	r3, r3, #31
 800962e:	2b00      	cmp	r3, #0
 8009630:	d104      	bne.n	800963c <USB_EPStartXfer+0x1192>
 8009632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009636:	3b01      	subs	r3, #1
 8009638:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800963c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009640:	b29b      	uxth	r3, r3
 8009642:	029b      	lsls	r3, r3, #10
 8009644:	b29b      	uxth	r3, r3
 8009646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800964a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800964e:	b29a      	uxth	r2, r3
 8009650:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009654:	801a      	strh	r2, [r3, #0]
 8009656:	e023      	b.n	80096a0 <USB_EPStartXfer+0x11f6>
 8009658:	463b      	mov	r3, r7
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	785b      	ldrb	r3, [r3, #1]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d11e      	bne.n	80096a0 <USB_EPStartXfer+0x11f6>
 8009662:	1d3b      	adds	r3, r7, #4
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800966a:	b29b      	uxth	r3, r3
 800966c:	461a      	mov	r2, r3
 800966e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009672:	4413      	add	r3, r2
 8009674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009678:	463b      	mov	r3, r7
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	00da      	lsls	r2, r3, #3
 8009680:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009684:	4413      	add	r3, r2
 8009686:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800968a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800968e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009692:	b29a      	uxth	r2, r3
 8009694:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009698:	801a      	strh	r2, [r3, #0]
 800969a:	e001      	b.n	80096a0 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e02e      	b.n	80096fe <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096a0:	1d3b      	adds	r3, r7, #4
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	463b      	mov	r3, r7
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	881b      	ldrh	r3, [r3, #0]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80096be:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80096c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80096c6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80096ca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80096ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80096d2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80096d6:	1d3b      	adds	r3, r7, #4
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	463b      	mov	r3, r7
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	441a      	add	r2, r3
 80096e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80096e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	785b      	ldrb	r3, [r3, #1]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d020      	beq.n	800975c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	b29b      	uxth	r3, r3
 8009728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800972c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009730:	81bb      	strh	r3, [r7, #12]
 8009732:	89bb      	ldrh	r3, [r7, #12]
 8009734:	f083 0310 	eor.w	r3, r3, #16
 8009738:	81bb      	strh	r3, [r7, #12]
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	441a      	add	r2, r3
 8009744:	89bb      	ldrh	r3, [r7, #12]
 8009746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800974a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800974e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009756:	b29b      	uxth	r3, r3
 8009758:	8013      	strh	r3, [r2, #0]
 800975a:	e01f      	b.n	800979c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	b29b      	uxth	r3, r3
 800976a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800976e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009772:	81fb      	strh	r3, [r7, #14]
 8009774:	89fb      	ldrh	r3, [r7, #14]
 8009776:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800977a:	81fb      	strh	r3, [r7, #14]
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	441a      	add	r2, r3
 8009786:	89fb      	ldrh	r3, [r7, #14]
 8009788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800978c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009798:	b29b      	uxth	r3, r3
 800979a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b087      	sub	sp, #28
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	7b1b      	ldrb	r3, [r3, #12]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f040 809d 	bne.w	80098f8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	785b      	ldrb	r3, [r3, #1]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d04c      	beq.n	8009860 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	881b      	ldrh	r3, [r3, #0]
 80097d2:	823b      	strh	r3, [r7, #16]
 80097d4:	8a3b      	ldrh	r3, [r7, #16]
 80097d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d01b      	beq.n	8009816 <USB_EPClearStall+0x6c>
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097f4:	81fb      	strh	r3, [r7, #14]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	441a      	add	r2, r3
 8009800:	89fb      	ldrh	r3, [r7, #14]
 8009802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800980a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800980e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009812:	b29b      	uxth	r3, r3
 8009814:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	78db      	ldrb	r3, [r3, #3]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d06c      	beq.n	80098f8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4413      	add	r3, r2
 8009828:	881b      	ldrh	r3, [r3, #0]
 800982a:	b29b      	uxth	r3, r3
 800982c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009834:	81bb      	strh	r3, [r7, #12]
 8009836:	89bb      	ldrh	r3, [r7, #12]
 8009838:	f083 0320 	eor.w	r3, r3, #32
 800983c:	81bb      	strh	r3, [r7, #12]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	441a      	add	r2, r3
 8009848:	89bb      	ldrh	r3, [r7, #12]
 800984a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800984e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800985a:	b29b      	uxth	r3, r3
 800985c:	8013      	strh	r3, [r2, #0]
 800985e:	e04b      	b.n	80098f8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	82fb      	strh	r3, [r7, #22]
 800986e:	8afb      	ldrh	r3, [r7, #22]
 8009870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d01b      	beq.n	80098b0 <USB_EPClearStall+0x106>
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	b29b      	uxth	r3, r3
 8009886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800988a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800988e:	82bb      	strh	r3, [r7, #20]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	441a      	add	r2, r3
 800989a:	8abb      	ldrh	r3, [r7, #20]
 800989c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	881b      	ldrh	r3, [r3, #0]
 80098bc:	b29b      	uxth	r3, r3
 80098be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c6:	827b      	strh	r3, [r7, #18]
 80098c8:	8a7b      	ldrh	r3, [r7, #18]
 80098ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80098ce:	827b      	strh	r3, [r7, #18]
 80098d0:	8a7b      	ldrh	r3, [r7, #18]
 80098d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80098d6:	827b      	strh	r3, [r7, #18]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	441a      	add	r2, r3
 80098e2:	8a7b      	ldrh	r3, [r7, #18]
 80098e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	371c      	adds	r7, #28
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009906:	b480      	push	{r7}
 8009908:	b083      	sub	sp, #12
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	460b      	mov	r3, r1
 8009910:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009912:	78fb      	ldrb	r3, [r7, #3]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d103      	bne.n	8009920 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2280      	movs	r2, #128	; 0x80
 800991c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800992e:	b480      	push	{r7}
 8009930:	b083      	sub	sp, #12
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800993c:	b29b      	uxth	r3, r3
 800993e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009946:	b29a      	uxth	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800996a:	b29b      	uxth	r3, r3
 800996c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800996e:	68fb      	ldr	r3, [r7, #12]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009994:	b480      	push	{r7}
 8009996:	b08d      	sub	sp, #52	; 0x34
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	4611      	mov	r1, r2
 80099a0:	461a      	mov	r2, r3
 80099a2:	460b      	mov	r3, r1
 80099a4:	80fb      	strh	r3, [r7, #6]
 80099a6:	4613      	mov	r3, r2
 80099a8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80099aa:	88bb      	ldrh	r3, [r7, #4]
 80099ac:	3301      	adds	r3, #1
 80099ae:	085b      	lsrs	r3, r3, #1
 80099b0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80099ba:	88fa      	ldrh	r2, [r7, #6]
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099c4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099ca:	e01b      	b.n	8009a04 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	3301      	adds	r3, #1
 80099d6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	b29b      	uxth	r3, r3
 80099de:	021b      	lsls	r3, r3, #8
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	461a      	mov	r2, r3
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80099f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f4:	3302      	adds	r3, #2
 80099f6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	3301      	adds	r3, #1
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80099fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a00:	3b01      	subs	r3, #1
 8009a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1e0      	bne.n	80099cc <USB_WritePMA+0x38>
  }
}
 8009a0a:	bf00      	nop
 8009a0c:	bf00      	nop
 8009a0e:	3734      	adds	r7, #52	; 0x34
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b08b      	sub	sp, #44	; 0x2c
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	4611      	mov	r1, r2
 8009a24:	461a      	mov	r2, r3
 8009a26:	460b      	mov	r3, r1
 8009a28:	80fb      	strh	r3, [r7, #6]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009a2e:	88bb      	ldrh	r3, [r7, #4]
 8009a30:	085b      	lsrs	r3, r3, #1
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009a3e:	88fa      	ldrh	r2, [r7, #6]
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a48:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8009a4e:	e018      	b.n	8009a82 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009a58:	6a3b      	ldr	r3, [r7, #32]
 8009a5a:	3302      	adds	r3, #2
 8009a5c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	0a1b      	lsrs	r3, r3, #8
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	627b      	str	r3, [r7, #36]	; 0x24
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1e3      	bne.n	8009a50 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009a88:	88bb      	ldrh	r3, [r7, #4]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d007      	beq.n	8009aa4 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	701a      	strb	r2, [r3, #0]
  }
}
 8009aa4:	bf00      	nop
 8009aa6:	372c      	adds	r7, #44	; 0x2c
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009abc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009ac0:	f002 f854 	bl	800bb6c <USBD_static_malloc>
 8009ac4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d105      	bne.n	8009ad8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	e066      	b.n	8009ba6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	7c1b      	ldrb	r3, [r3, #16]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d119      	bne.n	8009b1c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aec:	2202      	movs	r2, #2
 8009aee:	2181      	movs	r1, #129	; 0x81
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 fee0 	bl	800b8b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009afc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b00:	2202      	movs	r2, #2
 8009b02:	2101      	movs	r1, #1
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f001 fed6 	bl	800b8b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2210      	movs	r2, #16
 8009b16:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009b1a:	e016      	b.n	8009b4a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009b1c:	2340      	movs	r3, #64	; 0x40
 8009b1e:	2202      	movs	r2, #2
 8009b20:	2181      	movs	r1, #129	; 0x81
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f001 fec7 	bl	800b8b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009b2e:	2340      	movs	r3, #64	; 0x40
 8009b30:	2202      	movs	r2, #2
 8009b32:	2101      	movs	r1, #1
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f001 febe 	bl	800b8b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2210      	movs	r2, #16
 8009b46:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009b4a:	2308      	movs	r3, #8
 8009b4c:	2203      	movs	r2, #3
 8009b4e:	2182      	movs	r1, #130	; 0x82
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f001 feb0 	bl	800b8b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	7c1b      	ldrb	r3, [r3, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d109      	bne.n	8009b94 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f001 ff82 	bl	800ba96 <USBD_LL_PrepareReceive>
 8009b92:	e007      	b.n	8009ba4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b9a:	2340      	movs	r3, #64	; 0x40
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f001 ff79 	bl	800ba96 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009bba:	2181      	movs	r1, #129	; 0x81
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f001 fea0 	bl	800b902 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009bc8:	2101      	movs	r1, #1
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f001 fe99 	bl	800b902 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009bd8:	2182      	movs	r1, #130	; 0x82
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 fe91 	bl	800b902 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00e      	beq.n	8009c18 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f001 ffbc 	bl	800bb88 <USBD_static_free>
    pdev->pClassData = NULL;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
	...

08009c24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c34:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009c36:	2300      	movs	r3, #0
 8009c38:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d03a      	beq.n	8009cc4 <USBD_CDC_Setup+0xa0>
 8009c4e:	2b20      	cmp	r3, #32
 8009c50:	f040 8097 	bne.w	8009d82 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	88db      	ldrh	r3, [r3, #6]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d029      	beq.n	8009cb0 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	b25b      	sxtb	r3, r3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	da11      	bge.n	8009c8a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009c72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	88d2      	ldrh	r2, [r2, #6]
 8009c78:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009c7a:	6939      	ldr	r1, [r7, #16]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	88db      	ldrh	r3, [r3, #6]
 8009c80:	461a      	mov	r2, r3
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f001 fa6c 	bl	800b160 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009c88:	e082      	b.n	8009d90 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	785a      	ldrb	r2, [r3, #1]
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	88db      	ldrh	r3, [r3, #6]
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009ca0:	6939      	ldr	r1, [r7, #16]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	88db      	ldrh	r3, [r3, #6]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f001 fa85 	bl	800b1b8 <USBD_CtlPrepareRx>
      break;
 8009cae:	e06f      	b.n	8009d90 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	7850      	ldrb	r0, [r2, #1]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	6839      	ldr	r1, [r7, #0]
 8009cc0:	4798      	blx	r3
      break;
 8009cc2:	e065      	b.n	8009d90 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	785b      	ldrb	r3, [r3, #1]
 8009cc8:	2b0b      	cmp	r3, #11
 8009cca:	d84f      	bhi.n	8009d6c <USBD_CDC_Setup+0x148>
 8009ccc:	a201      	add	r2, pc, #4	; (adr r2, 8009cd4 <USBD_CDC_Setup+0xb0>)
 8009cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd2:	bf00      	nop
 8009cd4:	08009d05 	.word	0x08009d05
 8009cd8:	08009d7b 	.word	0x08009d7b
 8009cdc:	08009d6d 	.word	0x08009d6d
 8009ce0:	08009d6d 	.word	0x08009d6d
 8009ce4:	08009d6d 	.word	0x08009d6d
 8009ce8:	08009d6d 	.word	0x08009d6d
 8009cec:	08009d6d 	.word	0x08009d6d
 8009cf0:	08009d6d 	.word	0x08009d6d
 8009cf4:	08009d6d 	.word	0x08009d6d
 8009cf8:	08009d6d 	.word	0x08009d6d
 8009cfc:	08009d2d 	.word	0x08009d2d
 8009d00:	08009d55 	.word	0x08009d55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d107      	bne.n	8009d1e <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009d0e:	f107 030c 	add.w	r3, r7, #12
 8009d12:	2202      	movs	r2, #2
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f001 fa22 	bl	800b160 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d1c:	e030      	b.n	8009d80 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f001 f9ac 	bl	800b07e <USBD_CtlError>
            ret = USBD_FAIL;
 8009d26:	2303      	movs	r3, #3
 8009d28:	75fb      	strb	r3, [r7, #23]
          break;
 8009d2a:	e029      	b.n	8009d80 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	d107      	bne.n	8009d46 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009d36:	f107 030f 	add.w	r3, r7, #15
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f001 fa0e 	bl	800b160 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d44:	e01c      	b.n	8009d80 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f001 f998 	bl	800b07e <USBD_CtlError>
            ret = USBD_FAIL;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	75fb      	strb	r3, [r7, #23]
          break;
 8009d52:	e015      	b.n	8009d80 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d00f      	beq.n	8009d7e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f001 f98c 	bl	800b07e <USBD_CtlError>
            ret = USBD_FAIL;
 8009d66:	2303      	movs	r3, #3
 8009d68:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009d6a:	e008      	b.n	8009d7e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f001 f985 	bl	800b07e <USBD_CtlError>
          ret = USBD_FAIL;
 8009d74:	2303      	movs	r3, #3
 8009d76:	75fb      	strb	r3, [r7, #23]
          break;
 8009d78:	e002      	b.n	8009d80 <USBD_CDC_Setup+0x15c>
          break;
 8009d7a:	bf00      	nop
 8009d7c:	e008      	b.n	8009d90 <USBD_CDC_Setup+0x16c>
          break;
 8009d7e:	bf00      	nop
      }
      break;
 8009d80:	e006      	b.n	8009d90 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f001 f97a 	bl	800b07e <USBD_CtlError>
      ret = USBD_FAIL;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d8e:	bf00      	nop
  }

  return (uint8_t)ret;
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop

08009d9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e04f      	b.n	8009e5e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009dc6:	78fa      	ldrb	r2, [r7, #3]
 8009dc8:	6879      	ldr	r1, [r7, #4]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	440b      	add	r3, r1
 8009dd4:	3318      	adds	r3, #24
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d029      	beq.n	8009e30 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009ddc:	78fa      	ldrb	r2, [r7, #3]
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	4613      	mov	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	440b      	add	r3, r1
 8009dea:	3318      	adds	r3, #24
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	78f9      	ldrb	r1, [r7, #3]
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	460b      	mov	r3, r1
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	440b      	add	r3, r1
 8009df8:	00db      	lsls	r3, r3, #3
 8009dfa:	4403      	add	r3, r0
 8009dfc:	3338      	adds	r3, #56	; 0x38
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e04:	fb03 f301 	mul.w	r3, r3, r1
 8009e08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d110      	bne.n	8009e30 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009e0e:	78fa      	ldrb	r2, [r7, #3]
 8009e10:	6879      	ldr	r1, [r7, #4]
 8009e12:	4613      	mov	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	440b      	add	r3, r1
 8009e1c:	3318      	adds	r3, #24
 8009e1e:	2200      	movs	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009e22:	78f9      	ldrb	r1, [r7, #3]
 8009e24:	2300      	movs	r3, #0
 8009e26:	2200      	movs	r2, #0
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f001 fe13 	bl	800ba54 <USBD_LL_Transmit>
 8009e2e:	e015      	b.n	8009e5c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00b      	beq.n	8009e5c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009e58:	78fa      	ldrb	r2, [r7, #3]
 8009e5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b084      	sub	sp, #16
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	460b      	mov	r3, r1
 8009e70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d101      	bne.n	8009e88 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009e84:	2303      	movs	r3, #3
 8009e86:	e015      	b.n	8009eb4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e88:	78fb      	ldrb	r3, [r7, #3]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f001 fe23 	bl	800bad8 <USBD_LL_GetRxDataSize>
 8009e92:	4602      	mov	r2, r0
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009eae:	4611      	mov	r1, r2
 8009eb0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eca:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d015      	beq.n	8009f02 <USBD_CDC_EP0_RxReady+0x46>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009edc:	2bff      	cmp	r3, #255	; 0xff
 8009ede:	d010      	beq.n	8009f02 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009eee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ef6:	b292      	uxth	r2, r2
 8009ef8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	22ff      	movs	r2, #255	; 0xff
 8009efe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2243      	movs	r2, #67	; 0x43
 8009f18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009f1a:	4b03      	ldr	r3, [pc, #12]	; (8009f28 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	200000b4 	.word	0x200000b4

08009f2c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2243      	movs	r2, #67	; 0x43
 8009f38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009f3a:	4b03      	ldr	r3, [pc, #12]	; (8009f48 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr
 8009f48:	20000070 	.word	0x20000070

08009f4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2243      	movs	r2, #67	; 0x43
 8009f58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009f5a:	4b03      	ldr	r3, [pc, #12]	; (8009f68 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	200000f8 	.word	0x200000f8

08009f6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	220a      	movs	r2, #10
 8009f78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009f7a:	4b03      	ldr	r3, [pc, #12]	; (8009f88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr
 8009f88:	2000002c 	.word	0x2000002c

08009f8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d101      	bne.n	8009fa0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e004      	b.n	8009faa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b087      	sub	sp, #28
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	60f8      	str	r0, [r7, #12]
 8009fbe:	60b9      	str	r1, [r7, #8]
 8009fc0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fc8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	371c      	adds	r7, #28
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ff8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	683a      	ldr	r2, [r7, #0]
 8009ffe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a01e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e016      	b.n	800a05c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	7c1b      	ldrb	r3, [r3, #16]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d109      	bne.n	800a04a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a03c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a040:	2101      	movs	r1, #1
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f001 fd27 	bl	800ba96 <USBD_LL_PrepareReceive>
 800a048:	e007      	b.n	800a05a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a050:	2340      	movs	r3, #64	; 0x40
 800a052:	2101      	movs	r1, #1
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f001 fd1e 	bl	800ba96 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	4613      	mov	r3, r2
 800a070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d101      	bne.n	800a07c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a078:	2303      	movs	r3, #3
 800a07a:	e01f      	b.n	800a0bc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	79fa      	ldrb	r2, [r7, #7]
 800a0ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f001 fb85 	bl	800b7c0 <USBD_LL_Init>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a0ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3718      	adds	r7, #24
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d101      	bne.n	800a0dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	e016      	b.n	800a10a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	683a      	ldr	r2, [r7, #0]
 800a0e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00b      	beq.n	800a108 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f8:	f107 020e 	add.w	r2, r7, #14
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	4798      	blx	r3
 800a100:	4602      	mov	r2, r0
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b082      	sub	sp, #8
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f001 fbb0 	bl	800b880 <USBD_LL_Start>
 800a120:	4603      	mov	r3, r0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	460b      	mov	r3, r1
 800a14a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a14c:	2303      	movs	r3, #3
 800a14e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a156:	2b00      	cmp	r3, #0
 800a158:	d009      	beq.n	800a16e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	78fa      	ldrb	r2, [r7, #3]
 800a164:	4611      	mov	r1, r2
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	4798      	blx	r3
 800a16a:	4603      	mov	r3, r0
 800a16c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	460b      	mov	r3, r1
 800a182:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d007      	beq.n	800a19e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	78fa      	ldrb	r2, [r7, #3]
 800a198:	4611      	mov	r1, r2
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	4798      	blx	r3
  }

  return USBD_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 ff25 	bl	800b00a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1dc:	f003 031f 	and.w	r3, r3, #31
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d01a      	beq.n	800a21a <USBD_LL_SetupStage+0x72>
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d822      	bhi.n	800a22e <USBD_LL_SetupStage+0x86>
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d002      	beq.n	800a1f2 <USBD_LL_SetupStage+0x4a>
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d00a      	beq.n	800a206 <USBD_LL_SetupStage+0x5e>
 800a1f0:	e01d      	b.n	800a22e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f9d6 	bl	800a5ac <USBD_StdDevReq>
 800a200:	4603      	mov	r3, r0
 800a202:	73fb      	strb	r3, [r7, #15]
      break;
 800a204:	e020      	b.n	800a248 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a20c:	4619      	mov	r1, r3
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fa3a 	bl	800a688 <USBD_StdItfReq>
 800a214:	4603      	mov	r3, r0
 800a216:	73fb      	strb	r3, [r7, #15]
      break;
 800a218:	e016      	b.n	800a248 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fa78 	bl	800a718 <USBD_StdEPReq>
 800a228:	4603      	mov	r3, r0
 800a22a:	73fb      	strb	r3, [r7, #15]
      break;
 800a22c:	e00c      	b.n	800a248 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a234:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	4619      	mov	r1, r3
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f001 fb7f 	bl	800b940 <USBD_LL_StallEP>
 800a242:	4603      	mov	r3, r0
 800a244:	73fb      	strb	r3, [r7, #15]
      break;
 800a246:	bf00      	nop
  }

  return ret;
 800a248:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b086      	sub	sp, #24
 800a256:	af00      	add	r7, sp, #0
 800a258:	60f8      	str	r0, [r7, #12]
 800a25a:	460b      	mov	r3, r1
 800a25c:	607a      	str	r2, [r7, #4]
 800a25e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a260:	7afb      	ldrb	r3, [r7, #11]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d137      	bne.n	800a2d6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a26c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a274:	2b03      	cmp	r3, #3
 800a276:	d14a      	bne.n	800a30e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	689a      	ldr	r2, [r3, #8]
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	429a      	cmp	r2, r3
 800a282:	d913      	bls.n	800a2ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	689a      	ldr	r2, [r3, #8]
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	1ad2      	subs	r2, r2, r3
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	4293      	cmp	r3, r2
 800a29c:	bf28      	it	cs
 800a29e:	4613      	movcs	r3, r2
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	6879      	ldr	r1, [r7, #4]
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f000 ffa4 	bl	800b1f2 <USBD_CtlContinueRx>
 800a2aa:	e030      	b.n	800a30e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00a      	beq.n	800a2ce <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	d105      	bne.n	800a2ce <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f000 ffa0 	bl	800b214 <USBD_CtlSendStatus>
 800a2d4:	e01b      	b.n	800a30e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2dc:	699b      	ldr	r3, [r3, #24]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d013      	beq.n	800a30a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d10e      	bne.n	800a30a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	7afa      	ldrb	r2, [r7, #11]
 800a2f6:	4611      	mov	r1, r2
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	4798      	blx	r3
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a300:	7dfb      	ldrb	r3, [r7, #23]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a306:	7dfb      	ldrb	r3, [r7, #23]
 800a308:	e002      	b.n	800a310 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e000      	b.n	800a310 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	460b      	mov	r3, r1
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a326:	7afb      	ldrb	r3, [r7, #11]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d16a      	bne.n	800a402 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3314      	adds	r3, #20
 800a330:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d155      	bne.n	800a3e8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	689a      	ldr	r2, [r3, #8]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	429a      	cmp	r2, r3
 800a346:	d914      	bls.n	800a372 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	689a      	ldr	r2, [r3, #8]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	1ad2      	subs	r2, r2, r3
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	461a      	mov	r2, r3
 800a35c:	6879      	ldr	r1, [r7, #4]
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f000 ff19 	bl	800b196 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a364:	2300      	movs	r3, #0
 800a366:	2200      	movs	r2, #0
 800a368:	2100      	movs	r1, #0
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f001 fb93 	bl	800ba96 <USBD_LL_PrepareReceive>
 800a370:	e03a      	b.n	800a3e8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	68da      	ldr	r2, [r3, #12]
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d11c      	bne.n	800a3b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	685a      	ldr	r2, [r3, #4]
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a386:	429a      	cmp	r2, r3
 800a388:	d316      	bcc.n	800a3b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	685a      	ldr	r2, [r3, #4]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a394:	429a      	cmp	r2, r3
 800a396:	d20f      	bcs.n	800a3b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a398:	2200      	movs	r2, #0
 800a39a:	2100      	movs	r1, #0
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f000 fefa 	bl	800b196 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f001 fb70 	bl	800ba96 <USBD_LL_PrepareReceive>
 800a3b6:	e017      	b.n	800a3e8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00a      	beq.n	800a3da <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	d105      	bne.n	800a3da <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3da:	2180      	movs	r1, #128	; 0x80
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f001 faaf 	bl	800b940 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 ff29 	bl	800b23a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d123      	bne.n	800a43a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f7ff fe99 	bl	800a12a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a400:	e01b      	b.n	800a43a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d013      	beq.n	800a436 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a414:	2b03      	cmp	r3, #3
 800a416:	d10e      	bne.n	800a436 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	7afa      	ldrb	r2, [r7, #11]
 800a422:	4611      	mov	r1, r2
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	4798      	blx	r3
 800a428:	4603      	mov	r3, r0
 800a42a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d003      	beq.n	800a43a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a432:	7dfb      	ldrb	r3, [r7, #23]
 800a434:	e002      	b.n	800a43c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a436:	2303      	movs	r3, #3
 800a438:	e000      	b.n	800a43c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a470:	2b00      	cmp	r3, #0
 800a472:	d009      	beq.n	800a488 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	6852      	ldr	r2, [r2, #4]
 800a480:	b2d2      	uxtb	r2, r2
 800a482:	4611      	mov	r1, r2
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a488:	2340      	movs	r3, #64	; 0x40
 800a48a:	2200      	movs	r2, #0
 800a48c:	2100      	movs	r1, #0
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f001 fa11 	bl	800b8b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2240      	movs	r2, #64	; 0x40
 800a4a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4a4:	2340      	movs	r3, #64	; 0x40
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	2180      	movs	r1, #128	; 0x80
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f001 fa03 	bl	800b8b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2240      	movs	r2, #64	; 0x40
 800a4ba:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b083      	sub	sp, #12
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	78fa      	ldrb	r2, [r7, #3]
 800a4d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b083      	sub	sp, #12
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2204      	movs	r2, #4
 800a4fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a51e:	2b04      	cmp	r3, #4
 800a520:	d105      	bne.n	800a52e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d10b      	bne.n	800a566 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a554:	69db      	ldr	r3, [r3, #28]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d005      	beq.n	800a566 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a560:	69db      	ldr	r3, [r3, #28]
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	3301      	adds	r3, #1
 800a586:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a58e:	8a3b      	ldrh	r3, [r7, #16]
 800a590:	021b      	lsls	r3, r3, #8
 800a592:	b21a      	sxth	r2, r3
 800a594:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a598:	4313      	orrs	r3, r2
 800a59a:	b21b      	sxth	r3, r3
 800a59c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a59e:	89fb      	ldrh	r3, [r7, #14]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	371c      	adds	r7, #28
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5c2:	2b40      	cmp	r3, #64	; 0x40
 800a5c4:	d005      	beq.n	800a5d2 <USBD_StdDevReq+0x26>
 800a5c6:	2b40      	cmp	r3, #64	; 0x40
 800a5c8:	d853      	bhi.n	800a672 <USBD_StdDevReq+0xc6>
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00b      	beq.n	800a5e6 <USBD_StdDevReq+0x3a>
 800a5ce:	2b20      	cmp	r3, #32
 800a5d0:	d14f      	bne.n	800a672 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	6839      	ldr	r1, [r7, #0]
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	4798      	blx	r3
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5e4:	e04a      	b.n	800a67c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	785b      	ldrb	r3, [r3, #1]
 800a5ea:	2b09      	cmp	r3, #9
 800a5ec:	d83b      	bhi.n	800a666 <USBD_StdDevReq+0xba>
 800a5ee:	a201      	add	r2, pc, #4	; (adr r2, 800a5f4 <USBD_StdDevReq+0x48>)
 800a5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f4:	0800a649 	.word	0x0800a649
 800a5f8:	0800a65d 	.word	0x0800a65d
 800a5fc:	0800a667 	.word	0x0800a667
 800a600:	0800a653 	.word	0x0800a653
 800a604:	0800a667 	.word	0x0800a667
 800a608:	0800a627 	.word	0x0800a627
 800a60c:	0800a61d 	.word	0x0800a61d
 800a610:	0800a667 	.word	0x0800a667
 800a614:	0800a63f 	.word	0x0800a63f
 800a618:	0800a631 	.word	0x0800a631
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f9da 	bl	800a9d8 <USBD_GetDescriptor>
      break;
 800a624:	e024      	b.n	800a670 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800a626:	6839      	ldr	r1, [r7, #0]
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fb69 	bl	800ad00 <USBD_SetAddress>
      break;
 800a62e:	e01f      	b.n	800a670 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fba8 	bl	800ad88 <USBD_SetConfig>
 800a638:	4603      	mov	r3, r0
 800a63a:	73fb      	strb	r3, [r7, #15]
      break;
 800a63c:	e018      	b.n	800a670 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fc45 	bl	800aed0 <USBD_GetConfig>
      break;
 800a646:	e013      	b.n	800a670 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 fc75 	bl	800af3a <USBD_GetStatus>
      break;
 800a650:	e00e      	b.n	800a670 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800a652:	6839      	ldr	r1, [r7, #0]
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fca3 	bl	800afa0 <USBD_SetFeature>
      break;
 800a65a:	e009      	b.n	800a670 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fcb2 	bl	800afc8 <USBD_ClrFeature>
      break;
 800a664:	e004      	b.n	800a670 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fd08 	bl	800b07e <USBD_CtlError>
      break;
 800a66e:	bf00      	nop
    }
    break;
 800a670:	e004      	b.n	800a67c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fd02 	bl	800b07e <USBD_CtlError>
    break;
 800a67a:	bf00      	nop
  }

  return ret;
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop

0800a688 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a69e:	2b40      	cmp	r3, #64	; 0x40
 800a6a0:	d005      	beq.n	800a6ae <USBD_StdItfReq+0x26>
 800a6a2:	2b40      	cmp	r3, #64	; 0x40
 800a6a4:	d82e      	bhi.n	800a704 <USBD_StdItfReq+0x7c>
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <USBD_StdItfReq+0x26>
 800a6aa:	2b20      	cmp	r3, #32
 800a6ac:	d12a      	bne.n	800a704 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d81d      	bhi.n	800a6f6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	889b      	ldrh	r3, [r3, #4]
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d813      	bhi.n	800a6ec <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	4798      	blx	r3
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	88db      	ldrh	r3, [r3, #6]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d110      	bne.n	800a700 <USBD_StdItfReq+0x78>
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d10d      	bne.n	800a700 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fd95 	bl	800b214 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a6ea:	e009      	b.n	800a700 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fcc5 	bl	800b07e <USBD_CtlError>
      break;
 800a6f4:	e004      	b.n	800a700 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fcc0 	bl	800b07e <USBD_CtlError>
      break;
 800a6fe:	e000      	b.n	800a702 <USBD_StdItfReq+0x7a>
      break;
 800a700:	bf00      	nop
    }
    break;
 800a702:	e004      	b.n	800a70e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 fcb9 	bl	800b07e <USBD_CtlError>
    break;
 800a70c:	bf00      	nop
  }

  return ret;
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	889b      	ldrh	r3, [r3, #4]
 800a72a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a734:	2b40      	cmp	r3, #64	; 0x40
 800a736:	d007      	beq.n	800a748 <USBD_StdEPReq+0x30>
 800a738:	2b40      	cmp	r3, #64	; 0x40
 800a73a:	f200 8142 	bhi.w	800a9c2 <USBD_StdEPReq+0x2aa>
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00c      	beq.n	800a75c <USBD_StdEPReq+0x44>
 800a742:	2b20      	cmp	r3, #32
 800a744:	f040 813d 	bne.w	800a9c2 <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	4798      	blx	r3
 800a756:	4603      	mov	r3, r0
 800a758:	73fb      	strb	r3, [r7, #15]
    break;
 800a75a:	e137      	b.n	800a9cc <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	785b      	ldrb	r3, [r3, #1]
 800a760:	2b03      	cmp	r3, #3
 800a762:	d007      	beq.n	800a774 <USBD_StdEPReq+0x5c>
 800a764:	2b03      	cmp	r3, #3
 800a766:	f300 8126 	bgt.w	800a9b6 <USBD_StdEPReq+0x29e>
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d07d      	beq.n	800a86a <USBD_StdEPReq+0x152>
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d03b      	beq.n	800a7ea <USBD_StdEPReq+0xd2>
 800a772:	e120      	b.n	800a9b6 <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d002      	beq.n	800a784 <USBD_StdEPReq+0x6c>
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d016      	beq.n	800a7b0 <USBD_StdEPReq+0x98>
 800a782:	e02c      	b.n	800a7de <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00d      	beq.n	800a7a6 <USBD_StdEPReq+0x8e>
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	2b80      	cmp	r3, #128	; 0x80
 800a78e:	d00a      	beq.n	800a7a6 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f001 f8d3 	bl	800b940 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a79a:	2180      	movs	r1, #128	; 0x80
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f001 f8cf 	bl	800b940 <USBD_LL_StallEP>
 800a7a2:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a7a4:	e020      	b.n	800a7e8 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fc68 	bl	800b07e <USBD_CtlError>
        break;
 800a7ae:	e01b      	b.n	800a7e8 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	885b      	ldrh	r3, [r3, #2]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10e      	bne.n	800a7d6 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7b8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00b      	beq.n	800a7d6 <USBD_StdEPReq+0xbe>
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	2b80      	cmp	r3, #128	; 0x80
 800a7c2:	d008      	beq.n	800a7d6 <USBD_StdEPReq+0xbe>
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	88db      	ldrh	r3, [r3, #6]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d104      	bne.n	800a7d6 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f001 f8b5 	bl	800b940 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fd1c 	bl	800b214 <USBD_CtlSendStatus>

        break;
 800a7dc:	e004      	b.n	800a7e8 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800a7de:	6839      	ldr	r1, [r7, #0]
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fc4c 	bl	800b07e <USBD_CtlError>
        break;
 800a7e6:	bf00      	nop
      }
      break;
 800a7e8:	e0ea      	b.n	800a9c0 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d002      	beq.n	800a7fa <USBD_StdEPReq+0xe2>
 800a7f4:	2b03      	cmp	r3, #3
 800a7f6:	d016      	beq.n	800a826 <USBD_StdEPReq+0x10e>
 800a7f8:	e030      	b.n	800a85c <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7fa:	7bbb      	ldrb	r3, [r7, #14]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00d      	beq.n	800a81c <USBD_StdEPReq+0x104>
 800a800:	7bbb      	ldrb	r3, [r7, #14]
 800a802:	2b80      	cmp	r3, #128	; 0x80
 800a804:	d00a      	beq.n	800a81c <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	4619      	mov	r1, r3
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f001 f898 	bl	800b940 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a810:	2180      	movs	r1, #128	; 0x80
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f001 f894 	bl	800b940 <USBD_LL_StallEP>
 800a818:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a81a:	e025      	b.n	800a868 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fc2d 	bl	800b07e <USBD_CtlError>
        break;
 800a824:	e020      	b.n	800a868 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	885b      	ldrh	r3, [r3, #2]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d11b      	bne.n	800a866 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a82e:	7bbb      	ldrb	r3, [r7, #14]
 800a830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a834:	2b00      	cmp	r3, #0
 800a836:	d004      	beq.n	800a842 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	4619      	mov	r1, r3
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f001 f89e 	bl	800b97e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fce6 	bl	800b214 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	4798      	blx	r3
 800a856:	4603      	mov	r3, r0
 800a858:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a85a:	e004      	b.n	800a866 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800a85c:	6839      	ldr	r1, [r7, #0]
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 fc0d 	bl	800b07e <USBD_CtlError>
        break;
 800a864:	e000      	b.n	800a868 <USBD_StdEPReq+0x150>
        break;
 800a866:	bf00      	nop
      }
      break;
 800a868:	e0aa      	b.n	800a9c0 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a870:	2b02      	cmp	r3, #2
 800a872:	d002      	beq.n	800a87a <USBD_StdEPReq+0x162>
 800a874:	2b03      	cmp	r3, #3
 800a876:	d032      	beq.n	800a8de <USBD_StdEPReq+0x1c6>
 800a878:	e097      	b.n	800a9aa <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a87a:	7bbb      	ldrb	r3, [r7, #14]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d007      	beq.n	800a890 <USBD_StdEPReq+0x178>
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	2b80      	cmp	r3, #128	; 0x80
 800a884:	d004      	beq.n	800a890 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 800a886:	6839      	ldr	r1, [r7, #0]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fbf8 	bl	800b07e <USBD_CtlError>
          break;
 800a88e:	e091      	b.n	800a9b4 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a894:	2b00      	cmp	r3, #0
 800a896:	da0b      	bge.n	800a8b0 <USBD_StdEPReq+0x198>
 800a898:	7bbb      	ldrb	r3, [r7, #14]
 800a89a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a89e:	4613      	mov	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	3310      	adds	r3, #16
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	e00b      	b.n	800a8c8 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
 800a8b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4413      	add	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	2202      	movs	r2, #2
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fc42 	bl	800b160 <USBD_CtlSendData>
        break;
 800a8dc:	e06a      	b.n	800a9b4 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800a8de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	da11      	bge.n	800a90a <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8e6:	7bbb      	ldrb	r3, [r7, #14]
 800a8e8:	f003 020f 	and.w	r2, r3, #15
 800a8ec:	6879      	ldr	r1, [r7, #4]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	4413      	add	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	440b      	add	r3, r1
 800a8f8:	3324      	adds	r3, #36	; 0x24
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d117      	bne.n	800a930 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fbbb 	bl	800b07e <USBD_CtlError>
            break;
 800a908:	e054      	b.n	800a9b4 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a90a:	7bbb      	ldrb	r3, [r7, #14]
 800a90c:	f003 020f 	and.w	r2, r3, #15
 800a910:	6879      	ldr	r1, [r7, #4]
 800a912:	4613      	mov	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	440b      	add	r3, r1
 800a91c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a920:	881b      	ldrh	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d104      	bne.n	800a930 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fba8 	bl	800b07e <USBD_CtlError>
            break;
 800a92e:	e041      	b.n	800a9b4 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a934:	2b00      	cmp	r3, #0
 800a936:	da0b      	bge.n	800a950 <USBD_StdEPReq+0x238>
 800a938:	7bbb      	ldrb	r3, [r7, #14]
 800a93a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a93e:	4613      	mov	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4413      	add	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	3310      	adds	r3, #16
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	4413      	add	r3, r2
 800a94c:	3304      	adds	r3, #4
 800a94e:	e00b      	b.n	800a968 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a950:	7bbb      	ldrb	r3, [r7, #14]
 800a952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a956:	4613      	mov	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4413      	add	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	4413      	add	r3, r2
 800a966:	3304      	adds	r3, #4
 800a968:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a96a:	7bbb      	ldrb	r3, [r7, #14]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <USBD_StdEPReq+0x25e>
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	2b80      	cmp	r3, #128	; 0x80
 800a974:	d103      	bne.n	800a97e <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]
 800a97c:	e00e      	b.n	800a99c <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a97e:	7bbb      	ldrb	r3, [r7, #14]
 800a980:	4619      	mov	r1, r3
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f001 f81a 	bl	800b9bc <USBD_LL_IsStallEP>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d003      	beq.n	800a996 <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	2201      	movs	r2, #1
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	e002      	b.n	800a99c <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	2200      	movs	r2, #0
 800a99a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	2202      	movs	r2, #2
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fbdc 	bl	800b160 <USBD_CtlSendData>
          break;
 800a9a8:	e004      	b.n	800a9b4 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fb66 	bl	800b07e <USBD_CtlError>
        break;
 800a9b2:	bf00      	nop
      }
      break;
 800a9b4:	e004      	b.n	800a9c0 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fb60 	bl	800b07e <USBD_CtlError>
      break;
 800a9be:	bf00      	nop
    }
    break;
 800a9c0:	e004      	b.n	800a9cc <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800a9c2:	6839      	ldr	r1, [r7, #0]
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fb5a 	bl	800b07e <USBD_CtlError>
    break;
 800a9ca:	bf00      	nop
  }

  return ret;
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
	...

0800a9d8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	885b      	ldrh	r3, [r3, #2]
 800a9f2:	0a1b      	lsrs	r3, r3, #8
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	2b0e      	cmp	r3, #14
 800a9fa:	f200 8152 	bhi.w	800aca2 <USBD_GetDescriptor+0x2ca>
 800a9fe:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <USBD_GetDescriptor+0x2c>)
 800aa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa04:	0800aa75 	.word	0x0800aa75
 800aa08:	0800aa8d 	.word	0x0800aa8d
 800aa0c:	0800aacd 	.word	0x0800aacd
 800aa10:	0800aca3 	.word	0x0800aca3
 800aa14:	0800aca3 	.word	0x0800aca3
 800aa18:	0800ac43 	.word	0x0800ac43
 800aa1c:	0800ac6f 	.word	0x0800ac6f
 800aa20:	0800aca3 	.word	0x0800aca3
 800aa24:	0800aca3 	.word	0x0800aca3
 800aa28:	0800aca3 	.word	0x0800aca3
 800aa2c:	0800aca3 	.word	0x0800aca3
 800aa30:	0800aca3 	.word	0x0800aca3
 800aa34:	0800aca3 	.word	0x0800aca3
 800aa38:	0800aca3 	.word	0x0800aca3
 800aa3c:	0800aa41 	.word	0x0800aa41
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa46:	69db      	ldr	r3, [r3, #28]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00b      	beq.n	800aa64 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa52:	69db      	ldr	r3, [r3, #28]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	7c12      	ldrb	r2, [r2, #16]
 800aa58:	f107 0108 	add.w	r1, r7, #8
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	4798      	blx	r3
 800aa60:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800aa62:	e126      	b.n	800acb2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800aa64:	6839      	ldr	r1, [r7, #0]
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fb09 	bl	800b07e <USBD_CtlError>
      err++;
 800aa6c:	7afb      	ldrb	r3, [r7, #11]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	72fb      	strb	r3, [r7, #11]
    break;
 800aa72:	e11e      	b.n	800acb2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	7c12      	ldrb	r2, [r2, #16]
 800aa80:	f107 0108 	add.w	r1, r7, #8
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3
 800aa88:	60f8      	str	r0, [r7, #12]
    break;
 800aa8a:	e112      	b.n	800acb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	7c1b      	ldrb	r3, [r3, #16]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10d      	bne.n	800aab0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9c:	f107 0208 	add.w	r2, r7, #8
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	4798      	blx	r3
 800aaa4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	2202      	movs	r2, #2
 800aaac:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800aaae:	e100      	b.n	800acb2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab8:	f107 0208 	add.w	r2, r7, #8
 800aabc:	4610      	mov	r0, r2
 800aabe:	4798      	blx	r3
 800aac0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	3301      	adds	r3, #1
 800aac6:	2202      	movs	r2, #2
 800aac8:	701a      	strb	r2, [r3, #0]
    break;
 800aaca:	e0f2      	b.n	800acb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	885b      	ldrh	r3, [r3, #2]
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b05      	cmp	r3, #5
 800aad4:	f200 80ac 	bhi.w	800ac30 <USBD_GetDescriptor+0x258>
 800aad8:	a201      	add	r2, pc, #4	; (adr r2, 800aae0 <USBD_GetDescriptor+0x108>)
 800aada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aade:	bf00      	nop
 800aae0:	0800aaf9 	.word	0x0800aaf9
 800aae4:	0800ab2d 	.word	0x0800ab2d
 800aae8:	0800ab61 	.word	0x0800ab61
 800aaec:	0800ab95 	.word	0x0800ab95
 800aaf0:	0800abc9 	.word	0x0800abc9
 800aaf4:	0800abfd 	.word	0x0800abfd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00b      	beq.n	800ab1c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	7c12      	ldrb	r2, [r2, #16]
 800ab10:	f107 0108 	add.w	r1, r7, #8
 800ab14:	4610      	mov	r0, r2
 800ab16:	4798      	blx	r3
 800ab18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab1a:	e091      	b.n	800ac40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ab1c:	6839      	ldr	r1, [r7, #0]
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 faad 	bl	800b07e <USBD_CtlError>
        err++;
 800ab24:	7afb      	ldrb	r3, [r7, #11]
 800ab26:	3301      	adds	r3, #1
 800ab28:	72fb      	strb	r3, [r7, #11]
      break;
 800ab2a:	e089      	b.n	800ac40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00b      	beq.n	800ab50 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	7c12      	ldrb	r2, [r2, #16]
 800ab44:	f107 0108 	add.w	r1, r7, #8
 800ab48:	4610      	mov	r0, r2
 800ab4a:	4798      	blx	r3
 800ab4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab4e:	e077      	b.n	800ac40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ab50:	6839      	ldr	r1, [r7, #0]
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 fa93 	bl	800b07e <USBD_CtlError>
        err++;
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	72fb      	strb	r3, [r7, #11]
      break;
 800ab5e:	e06f      	b.n	800ac40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00b      	beq.n	800ab84 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	7c12      	ldrb	r2, [r2, #16]
 800ab78:	f107 0108 	add.w	r1, r7, #8
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	4798      	blx	r3
 800ab80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab82:	e05d      	b.n	800ac40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ab84:	6839      	ldr	r1, [r7, #0]
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fa79 	bl	800b07e <USBD_CtlError>
        err++;
 800ab8c:	7afb      	ldrb	r3, [r7, #11]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	72fb      	strb	r3, [r7, #11]
      break;
 800ab92:	e055      	b.n	800ac40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00b      	beq.n	800abb8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	7c12      	ldrb	r2, [r2, #16]
 800abac:	f107 0108 	add.w	r1, r7, #8
 800abb0:	4610      	mov	r0, r2
 800abb2:	4798      	blx	r3
 800abb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abb6:	e043      	b.n	800ac40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fa5f 	bl	800b07e <USBD_CtlError>
        err++;
 800abc0:	7afb      	ldrb	r3, [r7, #11]
 800abc2:	3301      	adds	r3, #1
 800abc4:	72fb      	strb	r3, [r7, #11]
      break;
 800abc6:	e03b      	b.n	800ac40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abce:	695b      	ldr	r3, [r3, #20]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00b      	beq.n	800abec <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	7c12      	ldrb	r2, [r2, #16]
 800abe0:	f107 0108 	add.w	r1, r7, #8
 800abe4:	4610      	mov	r0, r2
 800abe6:	4798      	blx	r3
 800abe8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abea:	e029      	b.n	800ac40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800abec:	6839      	ldr	r1, [r7, #0]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fa45 	bl	800b07e <USBD_CtlError>
        err++;
 800abf4:	7afb      	ldrb	r3, [r7, #11]
 800abf6:	3301      	adds	r3, #1
 800abf8:	72fb      	strb	r3, [r7, #11]
      break;
 800abfa:	e021      	b.n	800ac40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00b      	beq.n	800ac20 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	7c12      	ldrb	r2, [r2, #16]
 800ac14:	f107 0108 	add.w	r1, r7, #8
 800ac18:	4610      	mov	r0, r2
 800ac1a:	4798      	blx	r3
 800ac1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac1e:	e00f      	b.n	800ac40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ac20:	6839      	ldr	r1, [r7, #0]
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 fa2b 	bl	800b07e <USBD_CtlError>
        err++;
 800ac28:	7afb      	ldrb	r3, [r7, #11]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	72fb      	strb	r3, [r7, #11]
      break;
 800ac2e:	e007      	b.n	800ac40 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fa23 	bl	800b07e <USBD_CtlError>
      err++;
 800ac38:	7afb      	ldrb	r3, [r7, #11]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800ac3e:	bf00      	nop
    }
    break;
 800ac40:	e037      	b.n	800acb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	7c1b      	ldrb	r3, [r3, #16]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d109      	bne.n	800ac5e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac52:	f107 0208 	add.w	r2, r7, #8
 800ac56:	4610      	mov	r0, r2
 800ac58:	4798      	blx	r3
 800ac5a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ac5c:	e029      	b.n	800acb2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fa0c 	bl	800b07e <USBD_CtlError>
      err++;
 800ac66:	7afb      	ldrb	r3, [r7, #11]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	72fb      	strb	r3, [r7, #11]
    break;
 800ac6c:	e021      	b.n	800acb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	7c1b      	ldrb	r3, [r3, #16]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10d      	bne.n	800ac92 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7e:	f107 0208 	add.w	r2, r7, #8
 800ac82:	4610      	mov	r0, r2
 800ac84:	4798      	blx	r3
 800ac86:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	2207      	movs	r2, #7
 800ac8e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ac90:	e00f      	b.n	800acb2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ac92:	6839      	ldr	r1, [r7, #0]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f9f2 	bl	800b07e <USBD_CtlError>
      err++;
 800ac9a:	7afb      	ldrb	r3, [r7, #11]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	72fb      	strb	r3, [r7, #11]
    break;
 800aca0:	e007      	b.n	800acb2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800aca2:	6839      	ldr	r1, [r7, #0]
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 f9ea 	bl	800b07e <USBD_CtlError>
    err++;
 800acaa:	7afb      	ldrb	r3, [r7, #11]
 800acac:	3301      	adds	r3, #1
 800acae:	72fb      	strb	r3, [r7, #11]
    break;
 800acb0:	bf00      	nop
  }

  if (err != 0U)
 800acb2:	7afb      	ldrb	r3, [r7, #11]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d11e      	bne.n	800acf6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	88db      	ldrh	r3, [r3, #6]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d016      	beq.n	800acee <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800acc0:	893b      	ldrh	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00e      	beq.n	800ace4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	88da      	ldrh	r2, [r3, #6]
 800acca:	893b      	ldrh	r3, [r7, #8]
 800accc:	4293      	cmp	r3, r2
 800acce:	bf28      	it	cs
 800acd0:	4613      	movcs	r3, r2
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800acd6:	893b      	ldrh	r3, [r7, #8]
 800acd8:	461a      	mov	r2, r3
 800acda:	68f9      	ldr	r1, [r7, #12]
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fa3f 	bl	800b160 <USBD_CtlSendData>
 800ace2:	e009      	b.n	800acf8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800ace4:	6839      	ldr	r1, [r7, #0]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 f9c9 	bl	800b07e <USBD_CtlError>
 800acec:	e004      	b.n	800acf8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fa90 	bl	800b214 <USBD_CtlSendStatus>
 800acf4:	e000      	b.n	800acf8 <USBD_GetDescriptor+0x320>
    return;
 800acf6:	bf00      	nop
    }
  }
}
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop

0800ad00 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	889b      	ldrh	r3, [r3, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d130      	bne.n	800ad74 <USBD_SetAddress+0x74>
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	88db      	ldrh	r3, [r3, #6]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d12c      	bne.n	800ad74 <USBD_SetAddress+0x74>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	885b      	ldrh	r3, [r3, #2]
 800ad1e:	2b7f      	cmp	r3, #127	; 0x7f
 800ad20:	d828      	bhi.n	800ad74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	885b      	ldrh	r3, [r3, #2]
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad34:	2b03      	cmp	r3, #3
 800ad36:	d104      	bne.n	800ad42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 f99f 	bl	800b07e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad40:	e01d      	b.n	800ad7e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	7bfa      	ldrb	r2, [r7, #15]
 800ad46:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad4a:	7bfb      	ldrb	r3, [r7, #15]
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fe61 	bl	800ba16 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fa5d 	bl	800b214 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad5a:	7bfb      	ldrb	r3, [r7, #15]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d004      	beq.n	800ad6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2202      	movs	r2, #2
 800ad64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad68:	e009      	b.n	800ad7e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad72:	e004      	b.n	800ad7e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f981 	bl	800b07e <USBD_CtlError>
  }
}
 800ad7c:	bf00      	nop
 800ad7e:	bf00      	nop
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
	...

0800ad88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	885b      	ldrh	r3, [r3, #2]
 800ad9a:	b2da      	uxtb	r2, r3
 800ad9c:	4b4b      	ldr	r3, [pc, #300]	; (800aecc <USBD_SetConfig+0x144>)
 800ad9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ada0:	4b4a      	ldr	r3, [pc, #296]	; (800aecc <USBD_SetConfig+0x144>)
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d905      	bls.n	800adb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f967 	bl	800b07e <USBD_CtlError>
    return USBD_FAIL;
 800adb0:	2303      	movs	r3, #3
 800adb2:	e087      	b.n	800aec4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d002      	beq.n	800adc4 <USBD_SetConfig+0x3c>
 800adbe:	2b03      	cmp	r3, #3
 800adc0:	d025      	beq.n	800ae0e <USBD_SetConfig+0x86>
 800adc2:	e071      	b.n	800aea8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800adc4:	4b41      	ldr	r3, [pc, #260]	; (800aecc <USBD_SetConfig+0x144>)
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d01c      	beq.n	800ae06 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800adcc:	4b3f      	ldr	r3, [pc, #252]	; (800aecc <USBD_SetConfig+0x144>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	461a      	mov	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800add6:	4b3d      	ldr	r3, [pc, #244]	; (800aecc <USBD_SetConfig+0x144>)
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	4619      	mov	r1, r3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f7ff f9af 	bl	800a140 <USBD_SetClassConfig>
 800ade2:	4603      	mov	r3, r0
 800ade4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ade6:	7bfb      	ldrb	r3, [r7, #15]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d004      	beq.n	800adf6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 f945 	bl	800b07e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800adf4:	e065      	b.n	800aec2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 fa0c 	bl	800b214 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2203      	movs	r2, #3
 800ae00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ae04:	e05d      	b.n	800aec2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fa04 	bl	800b214 <USBD_CtlSendStatus>
    break;
 800ae0c:	e059      	b.n	800aec2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800ae0e:	4b2f      	ldr	r3, [pc, #188]	; (800aecc <USBD_SetConfig+0x144>)
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d112      	bne.n	800ae3c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2202      	movs	r2, #2
 800ae1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800ae1e:	4b2b      	ldr	r3, [pc, #172]	; (800aecc <USBD_SetConfig+0x144>)
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	461a      	mov	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae28:	4b28      	ldr	r3, [pc, #160]	; (800aecc <USBD_SetConfig+0x144>)
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7ff f9a2 	bl	800a178 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 f9ed 	bl	800b214 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ae3a:	e042      	b.n	800aec2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800ae3c:	4b23      	ldr	r3, [pc, #140]	; (800aecc <USBD_SetConfig+0x144>)
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	461a      	mov	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d02a      	beq.n	800aea0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7ff f990 	bl	800a178 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ae58:	4b1c      	ldr	r3, [pc, #112]	; (800aecc <USBD_SetConfig+0x144>)
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae62:	4b1a      	ldr	r3, [pc, #104]	; (800aecc <USBD_SetConfig+0x144>)
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff f969 	bl	800a140 <USBD_SetClassConfig>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ae72:	7bfb      	ldrb	r3, [r7, #15]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d00f      	beq.n	800ae98 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f8ff 	bl	800b07e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	4619      	mov	r1, r3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7ff f975 	bl	800a178 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2202      	movs	r2, #2
 800ae92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ae96:	e014      	b.n	800aec2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 f9bb 	bl	800b214 <USBD_CtlSendStatus>
    break;
 800ae9e:	e010      	b.n	800aec2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f9b7 	bl	800b214 <USBD_CtlSendStatus>
    break;
 800aea6:	e00c      	b.n	800aec2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800aea8:	6839      	ldr	r1, [r7, #0]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f8e7 	bl	800b07e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aeb0:	4b06      	ldr	r3, [pc, #24]	; (800aecc <USBD_SetConfig+0x144>)
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7ff f95e 	bl	800a178 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800aebc:	2303      	movs	r3, #3
 800aebe:	73fb      	strb	r3, [r7, #15]
    break;
 800aec0:	bf00      	nop
  }

  return ret;
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	2001d68c 	.word	0x2001d68c

0800aed0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	88db      	ldrh	r3, [r3, #6]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d004      	beq.n	800aeec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f8ca 	bl	800b07e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800aeea:	e022      	b.n	800af32 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	dc02      	bgt.n	800aefc <USBD_GetConfig+0x2c>
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	dc03      	bgt.n	800af02 <USBD_GetConfig+0x32>
 800aefa:	e015      	b.n	800af28 <USBD_GetConfig+0x58>
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d00b      	beq.n	800af18 <USBD_GetConfig+0x48>
 800af00:	e012      	b.n	800af28 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	3308      	adds	r3, #8
 800af0c:	2201      	movs	r2, #1
 800af0e:	4619      	mov	r1, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f925 	bl	800b160 <USBD_CtlSendData>
      break;
 800af16:	e00c      	b.n	800af32 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	3304      	adds	r3, #4
 800af1c:	2201      	movs	r2, #1
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f91d 	bl	800b160 <USBD_CtlSendData>
      break;
 800af26:	e004      	b.n	800af32 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f8a7 	bl	800b07e <USBD_CtlError>
      break;
 800af30:	bf00      	nop
}
 800af32:	bf00      	nop
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b082      	sub	sp, #8
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af4a:	3b01      	subs	r3, #1
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d81e      	bhi.n	800af8e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	88db      	ldrh	r3, [r3, #6]
 800af54:	2b02      	cmp	r3, #2
 800af56:	d004      	beq.n	800af62 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f88f 	bl	800b07e <USBD_CtlError>
      break;
 800af60:	e01a      	b.n	800af98 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2201      	movs	r2, #1
 800af66:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d005      	beq.n	800af7e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	f043 0202 	orr.w	r2, r3, #2
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	330c      	adds	r3, #12
 800af82:	2202      	movs	r2, #2
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f8ea 	bl	800b160 <USBD_CtlSendData>
    break;
 800af8c:	e004      	b.n	800af98 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800af8e:	6839      	ldr	r1, [r7, #0]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f874 	bl	800b07e <USBD_CtlError>
    break;
 800af96:	bf00      	nop
  }
}
 800af98:	bf00      	nop
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	885b      	ldrh	r3, [r3, #2]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d106      	bne.n	800afc0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f92a 	bl	800b214 <USBD_CtlSendStatus>
  }
}
 800afc0:	bf00      	nop
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd8:	3b01      	subs	r3, #1
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d80b      	bhi.n	800aff6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	885b      	ldrh	r3, [r3, #2]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d10c      	bne.n	800b000 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f910 	bl	800b214 <USBD_CtlSendStatus>
      }
      break;
 800aff4:	e004      	b.n	800b000 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f840 	bl	800b07e <USBD_CtlError>
      break;
 800affe:	e000      	b.n	800b002 <USBD_ClrFeature+0x3a>
      break;
 800b000:	bf00      	nop
  }
}
 800b002:	bf00      	nop
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b084      	sub	sp, #16
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	781a      	ldrb	r2, [r3, #0]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	3301      	adds	r3, #1
 800b024:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	781a      	ldrb	r2, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	3301      	adds	r3, #1
 800b032:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f7ff fa9b 	bl	800a570 <SWAPBYTE>
 800b03a:	4603      	mov	r3, r0
 800b03c:	461a      	mov	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3301      	adds	r3, #1
 800b046:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	3301      	adds	r3, #1
 800b04c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f7ff fa8e 	bl	800a570 <SWAPBYTE>
 800b054:	4603      	mov	r3, r0
 800b056:	461a      	mov	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	3301      	adds	r3, #1
 800b060:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	3301      	adds	r3, #1
 800b066:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	f7ff fa81 	bl	800a570 <SWAPBYTE>
 800b06e:	4603      	mov	r3, r0
 800b070:	461a      	mov	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	80da      	strh	r2, [r3, #6]
}
 800b076:	bf00      	nop
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b082      	sub	sp, #8
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b088:	2180      	movs	r1, #128	; 0x80
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fc58 	bl	800b940 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b090:	2100      	movs	r1, #0
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fc54 	bl	800b940 <USBD_LL_StallEP>
}
 800b098:	bf00      	nop
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d036      	beq.n	800b124 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b0ba:	6938      	ldr	r0, [r7, #16]
 800b0bc:	f000 f836 	bl	800b12c <USBD_GetLen>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	005b      	lsls	r3, r3, #1
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b0ce:	7dfb      	ldrb	r3, [r7, #23]
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	7812      	ldrb	r2, [r2, #0]
 800b0d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0da:	7dfb      	ldrb	r3, [r7, #23]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b0e0:	7dfb      	ldrb	r3, [r7, #23]
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	2203      	movs	r2, #3
 800b0e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0ea:	7dfb      	ldrb	r3, [r7, #23]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b0f0:	e013      	b.n	800b11a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b0f2:	7dfb      	ldrb	r3, [r7, #23]
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	7812      	ldrb	r2, [r2, #0]
 800b0fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	3301      	adds	r3, #1
 800b102:	613b      	str	r3, [r7, #16]
    idx++;
 800b104:	7dfb      	ldrb	r3, [r7, #23]
 800b106:	3301      	adds	r3, #1
 800b108:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b10a:	7dfb      	ldrb	r3, [r7, #23]
 800b10c:	68ba      	ldr	r2, [r7, #8]
 800b10e:	4413      	add	r3, r2
 800b110:	2200      	movs	r2, #0
 800b112:	701a      	strb	r2, [r3, #0]
    idx++;
 800b114:	7dfb      	ldrb	r3, [r7, #23]
 800b116:	3301      	adds	r3, #1
 800b118:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1e7      	bne.n	800b0f2 <USBD_GetString+0x52>
 800b122:	e000      	b.n	800b126 <USBD_GetString+0x86>
    return;
 800b124:	bf00      	nop
  }
}
 800b126:	3718      	adds	r7, #24
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b134:	2300      	movs	r3, #0
 800b136:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b13c:	e005      	b.n	800b14a <USBD_GetLen+0x1e>
  {
    len++;
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
 800b140:	3301      	adds	r3, #1
 800b142:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	3301      	adds	r3, #1
 800b148:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1f5      	bne.n	800b13e <USBD_GetLen+0x12>
  }

  return len;
 800b152:	7bfb      	ldrb	r3, [r7, #15]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2202      	movs	r2, #2
 800b170:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	2100      	movs	r1, #0
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f000 fc64 	bl	800ba54 <USBD_LL_Transmit>

  return USBD_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b084      	sub	sp, #16
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	60f8      	str	r0, [r7, #12]
 800b19e:	60b9      	str	r1, [r7, #8]
 800b1a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	68ba      	ldr	r2, [r7, #8]
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f000 fc53 	bl	800ba54 <USBD_LL_Transmit>

  return USBD_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2203      	movs	r2, #3
 800b1c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f000 fc57 	bl	800ba96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	60f8      	str	r0, [r7, #12]
 800b1fa:	60b9      	str	r1, [r7, #8]
 800b1fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	2100      	movs	r1, #0
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f000 fc46 	bl	800ba96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2204      	movs	r2, #4
 800b220:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b224:	2300      	movs	r3, #0
 800b226:	2200      	movs	r2, #0
 800b228:	2100      	movs	r1, #0
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fc12 	bl	800ba54 <USBD_LL_Transmit>

  return USBD_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b082      	sub	sp, #8
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2205      	movs	r2, #5
 800b246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b24a:	2300      	movs	r3, #0
 800b24c:	2200      	movs	r2, #0
 800b24e:	2100      	movs	r1, #0
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 fc20 	bl	800ba96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b264:	2200      	movs	r2, #0
 800b266:	4912      	ldr	r1, [pc, #72]	; (800b2b0 <MX_USB_Device_Init+0x50>)
 800b268:	4812      	ldr	r0, [pc, #72]	; (800b2b4 <MX_USB_Device_Init+0x54>)
 800b26a:	f7fe fefb 	bl	800a064 <USBD_Init>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d001      	beq.n	800b278 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b274:	f7f5 fea4 	bl	8000fc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b278:	490f      	ldr	r1, [pc, #60]	; (800b2b8 <MX_USB_Device_Init+0x58>)
 800b27a:	480e      	ldr	r0, [pc, #56]	; (800b2b4 <MX_USB_Device_Init+0x54>)
 800b27c:	f7fe ff22 	bl	800a0c4 <USBD_RegisterClass>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d001      	beq.n	800b28a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b286:	f7f5 fe9b 	bl	8000fc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b28a:	490c      	ldr	r1, [pc, #48]	; (800b2bc <MX_USB_Device_Init+0x5c>)
 800b28c:	4809      	ldr	r0, [pc, #36]	; (800b2b4 <MX_USB_Device_Init+0x54>)
 800b28e:	f7fe fe7d 	bl	8009f8c <USBD_CDC_RegisterInterface>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b298:	f7f5 fe92 	bl	8000fc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b29c:	4805      	ldr	r0, [pc, #20]	; (800b2b4 <MX_USB_Device_Init+0x54>)
 800b29e:	f7fe ff38 	bl	800a112 <USBD_Start>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b2a8:	f7f5 fe8a 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b2ac:	bf00      	nop
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	20000150 	.word	0x20000150
 800b2b4:	2001dfd0 	.word	0x2001dfd0
 800b2b8:	20000038 	.word	0x20000038
 800b2bc:	2000013c 	.word	0x2000013c

0800b2c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	4905      	ldr	r1, [pc, #20]	; (800b2dc <CDC_Init_FS+0x1c>)
 800b2c8:	4805      	ldr	r0, [pc, #20]	; (800b2e0 <CDC_Init_FS+0x20>)
 800b2ca:	f7fe fe74 	bl	8009fb6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b2ce:	4905      	ldr	r1, [pc, #20]	; (800b2e4 <CDC_Init_FS+0x24>)
 800b2d0:	4803      	ldr	r0, [pc, #12]	; (800b2e0 <CDC_Init_FS+0x20>)
 800b2d2:	f7fe fe89 	bl	8009fe8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b2d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	2001eaa0 	.word	0x2001eaa0
 800b2e0:	2001dfd0 	.word	0x2001dfd0
 800b2e4:	2001e2a0 	.word	0x2001e2a0

0800b2e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b2ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	4603      	mov	r3, r0
 800b300:	6039      	str	r1, [r7, #0]
 800b302:	71fb      	strb	r3, [r7, #7]
 800b304:	4613      	mov	r3, r2
 800b306:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b308:	79fb      	ldrb	r3, [r7, #7]
 800b30a:	2b23      	cmp	r3, #35	; 0x23
 800b30c:	d84a      	bhi.n	800b3a4 <CDC_Control_FS+0xac>
 800b30e:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <CDC_Control_FS+0x1c>)
 800b310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b314:	0800b3a5 	.word	0x0800b3a5
 800b318:	0800b3a5 	.word	0x0800b3a5
 800b31c:	0800b3a5 	.word	0x0800b3a5
 800b320:	0800b3a5 	.word	0x0800b3a5
 800b324:	0800b3a5 	.word	0x0800b3a5
 800b328:	0800b3a5 	.word	0x0800b3a5
 800b32c:	0800b3a5 	.word	0x0800b3a5
 800b330:	0800b3a5 	.word	0x0800b3a5
 800b334:	0800b3a5 	.word	0x0800b3a5
 800b338:	0800b3a5 	.word	0x0800b3a5
 800b33c:	0800b3a5 	.word	0x0800b3a5
 800b340:	0800b3a5 	.word	0x0800b3a5
 800b344:	0800b3a5 	.word	0x0800b3a5
 800b348:	0800b3a5 	.word	0x0800b3a5
 800b34c:	0800b3a5 	.word	0x0800b3a5
 800b350:	0800b3a5 	.word	0x0800b3a5
 800b354:	0800b3a5 	.word	0x0800b3a5
 800b358:	0800b3a5 	.word	0x0800b3a5
 800b35c:	0800b3a5 	.word	0x0800b3a5
 800b360:	0800b3a5 	.word	0x0800b3a5
 800b364:	0800b3a5 	.word	0x0800b3a5
 800b368:	0800b3a5 	.word	0x0800b3a5
 800b36c:	0800b3a5 	.word	0x0800b3a5
 800b370:	0800b3a5 	.word	0x0800b3a5
 800b374:	0800b3a5 	.word	0x0800b3a5
 800b378:	0800b3a5 	.word	0x0800b3a5
 800b37c:	0800b3a5 	.word	0x0800b3a5
 800b380:	0800b3a5 	.word	0x0800b3a5
 800b384:	0800b3a5 	.word	0x0800b3a5
 800b388:	0800b3a5 	.word	0x0800b3a5
 800b38c:	0800b3a5 	.word	0x0800b3a5
 800b390:	0800b3a5 	.word	0x0800b3a5
 800b394:	0800b3a5 	.word	0x0800b3a5
 800b398:	0800b3a5 	.word	0x0800b3a5
 800b39c:	0800b3a5 	.word	0x0800b3a5
 800b3a0:	0800b3a5 	.word	0x0800b3a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b3a4:	bf00      	nop
  }

  return (USBD_OK);
 800b3a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b3be:	6879      	ldr	r1, [r7, #4]
 800b3c0:	4805      	ldr	r0, [pc, #20]	; (800b3d8 <CDC_Receive_FS+0x24>)
 800b3c2:	f7fe fe11 	bl	8009fe8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b3c6:	4804      	ldr	r0, [pc, #16]	; (800b3d8 <CDC_Receive_FS+0x24>)
 800b3c8:	f7fe fe22 	bl	800a010 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b3cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	2001dfd0 	.word	0x2001dfd0

0800b3dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b087      	sub	sp, #28
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	4613      	mov	r3, r2
 800b3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b3ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	371c      	adds	r7, #28
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
	...

0800b400 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	4603      	mov	r3, r0
 800b408:	6039      	str	r1, [r7, #0]
 800b40a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	2212      	movs	r2, #18
 800b410:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b412:	4b03      	ldr	r3, [pc, #12]	; (800b420 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b414:	4618      	mov	r0, r3
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	20000170 	.word	0x20000170

0800b424 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	4603      	mov	r3, r0
 800b42c:	6039      	str	r1, [r7, #0]
 800b42e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2204      	movs	r2, #4
 800b434:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b436:	4b03      	ldr	r3, [pc, #12]	; (800b444 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b438:	4618      	mov	r0, r3
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr
 800b444:	20000184 	.word	0x20000184

0800b448 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	4603      	mov	r3, r0
 800b450:	6039      	str	r1, [r7, #0]
 800b452:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b454:	79fb      	ldrb	r3, [r7, #7]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d105      	bne.n	800b466 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b45a:	683a      	ldr	r2, [r7, #0]
 800b45c:	4907      	ldr	r1, [pc, #28]	; (800b47c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b45e:	4808      	ldr	r0, [pc, #32]	; (800b480 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b460:	f7ff fe1e 	bl	800b0a0 <USBD_GetString>
 800b464:	e004      	b.n	800b470 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	4904      	ldr	r1, [pc, #16]	; (800b47c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b46a:	4805      	ldr	r0, [pc, #20]	; (800b480 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b46c:	f7ff fe18 	bl	800b0a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b470:	4b02      	ldr	r3, [pc, #8]	; (800b47c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b472:	4618      	mov	r0, r3
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	2001f2a0 	.word	0x2001f2a0
 800b480:	0800bd80 	.word	0x0800bd80

0800b484 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	4603      	mov	r3, r0
 800b48c:	6039      	str	r1, [r7, #0]
 800b48e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	4904      	ldr	r1, [pc, #16]	; (800b4a4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b494:	4804      	ldr	r0, [pc, #16]	; (800b4a8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b496:	f7ff fe03 	bl	800b0a0 <USBD_GetString>
  return USBD_StrDesc;
 800b49a:	4b02      	ldr	r3, [pc, #8]	; (800b4a4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	2001f2a0 	.word	0x2001f2a0
 800b4a8:	0800bd98 	.word	0x0800bd98

0800b4ac <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	6039      	str	r1, [r7, #0]
 800b4b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	221a      	movs	r2, #26
 800b4bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b4be:	f000 f843 	bl	800b548 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b4c2:	4b02      	ldr	r3, [pc, #8]	; (800b4cc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	20000188 	.word	0x20000188

0800b4d0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	6039      	str	r1, [r7, #0]
 800b4da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4dc:	79fb      	ldrb	r3, [r7, #7]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d105      	bne.n	800b4ee <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	4907      	ldr	r1, [pc, #28]	; (800b504 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b4e6:	4808      	ldr	r0, [pc, #32]	; (800b508 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b4e8:	f7ff fdda 	bl	800b0a0 <USBD_GetString>
 800b4ec:	e004      	b.n	800b4f8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	4904      	ldr	r1, [pc, #16]	; (800b504 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b4f2:	4805      	ldr	r0, [pc, #20]	; (800b508 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b4f4:	f7ff fdd4 	bl	800b0a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4f8:	4b02      	ldr	r3, [pc, #8]	; (800b504 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	2001f2a0 	.word	0x2001f2a0
 800b508:	0800bdac 	.word	0x0800bdac

0800b50c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	4603      	mov	r3, r0
 800b514:	6039      	str	r1, [r7, #0]
 800b516:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b518:	79fb      	ldrb	r3, [r7, #7]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d105      	bne.n	800b52a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	4907      	ldr	r1, [pc, #28]	; (800b540 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b522:	4808      	ldr	r0, [pc, #32]	; (800b544 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b524:	f7ff fdbc 	bl	800b0a0 <USBD_GetString>
 800b528:	e004      	b.n	800b534 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	4904      	ldr	r1, [pc, #16]	; (800b540 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b52e:	4805      	ldr	r0, [pc, #20]	; (800b544 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b530:	f7ff fdb6 	bl	800b0a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b534:	4b02      	ldr	r3, [pc, #8]	; (800b540 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	2001f2a0 	.word	0x2001f2a0
 800b544:	0800bdb8 	.word	0x0800bdb8

0800b548 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b54e:	4b0f      	ldr	r3, [pc, #60]	; (800b58c <Get_SerialNum+0x44>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b554:	4b0e      	ldr	r3, [pc, #56]	; (800b590 <Get_SerialNum+0x48>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b55a:	4b0e      	ldr	r3, [pc, #56]	; (800b594 <Get_SerialNum+0x4c>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	4413      	add	r3, r2
 800b566:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d009      	beq.n	800b582 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b56e:	2208      	movs	r2, #8
 800b570:	4909      	ldr	r1, [pc, #36]	; (800b598 <Get_SerialNum+0x50>)
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f000 f814 	bl	800b5a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b578:	2204      	movs	r2, #4
 800b57a:	4908      	ldr	r1, [pc, #32]	; (800b59c <Get_SerialNum+0x54>)
 800b57c:	68b8      	ldr	r0, [r7, #8]
 800b57e:	f000 f80f 	bl	800b5a0 <IntToUnicode>
  }
}
 800b582:	bf00      	nop
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	1fff7590 	.word	0x1fff7590
 800b590:	1fff7594 	.word	0x1fff7594
 800b594:	1fff7598 	.word	0x1fff7598
 800b598:	2000018a 	.word	0x2000018a
 800b59c:	2000019a 	.word	0x2000019a

0800b5a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	75fb      	strb	r3, [r7, #23]
 800b5b6:	e027      	b.n	800b608 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	0f1b      	lsrs	r3, r3, #28
 800b5bc:	2b09      	cmp	r3, #9
 800b5be:	d80b      	bhi.n	800b5d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	0f1b      	lsrs	r3, r3, #28
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	7dfb      	ldrb	r3, [r7, #23]
 800b5c8:	005b      	lsls	r3, r3, #1
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	440b      	add	r3, r1
 800b5d0:	3230      	adds	r2, #48	; 0x30
 800b5d2:	b2d2      	uxtb	r2, r2
 800b5d4:	701a      	strb	r2, [r3, #0]
 800b5d6:	e00a      	b.n	800b5ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	0f1b      	lsrs	r3, r3, #28
 800b5dc:	b2da      	uxtb	r2, r3
 800b5de:	7dfb      	ldrb	r3, [r7, #23]
 800b5e0:	005b      	lsls	r3, r3, #1
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	440b      	add	r3, r1
 800b5e8:	3237      	adds	r2, #55	; 0x37
 800b5ea:	b2d2      	uxtb	r2, r2
 800b5ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	011b      	lsls	r3, r3, #4
 800b5f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b5f4:	7dfb      	ldrb	r3, [r7, #23]
 800b5f6:	005b      	lsls	r3, r3, #1
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	2200      	movs	r2, #0
 800b600:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b602:	7dfb      	ldrb	r3, [r7, #23]
 800b604:	3301      	adds	r3, #1
 800b606:	75fb      	strb	r3, [r7, #23]
 800b608:	7dfa      	ldrb	r2, [r7, #23]
 800b60a:	79fb      	ldrb	r3, [r7, #7]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d3d3      	bcc.n	800b5b8 <IntToUnicode+0x18>
  }
}
 800b610:	bf00      	nop
 800b612:	bf00      	nop
 800b614:	371c      	adds	r7, #28
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
	...

0800b620 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a0d      	ldr	r2, [pc, #52]	; (800b664 <HAL_PCD_MspInit+0x44>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d113      	bne.n	800b65a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b632:	4b0d      	ldr	r3, [pc, #52]	; (800b668 <HAL_PCD_MspInit+0x48>)
 800b634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b636:	4a0c      	ldr	r2, [pc, #48]	; (800b668 <HAL_PCD_MspInit+0x48>)
 800b638:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b63c:	6593      	str	r3, [r2, #88]	; 0x58
 800b63e:	4b0a      	ldr	r3, [pc, #40]	; (800b668 <HAL_PCD_MspInit+0x48>)
 800b640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b642:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b646:	60fb      	str	r3, [r7, #12]
 800b648:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b64a:	2200      	movs	r2, #0
 800b64c:	2100      	movs	r1, #0
 800b64e:	2014      	movs	r0, #20
 800b650:	f7f8 f843 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b654:	2014      	movs	r0, #20
 800b656:	f7f8 f85a 	bl	800370e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b65a:	bf00      	nop
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	40005c00 	.word	0x40005c00
 800b668:	40021000 	.word	0x40021000

0800b66c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b680:	4619      	mov	r1, r3
 800b682:	4610      	mov	r0, r2
 800b684:	f7fe fd90 	bl	800a1a8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b688:	bf00      	nop
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	460b      	mov	r3, r1
 800b69a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b6a2:	78fa      	ldrb	r2, [r7, #3]
 800b6a4:	6879      	ldr	r1, [r7, #4]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4413      	add	r3, r2
 800b6ac:	00db      	lsls	r3, r3, #3
 800b6ae:	440b      	add	r3, r1
 800b6b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	78fb      	ldrb	r3, [r7, #3]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	f7fe fdca 	bl	800a252 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b6be:	bf00      	nop
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b082      	sub	sp, #8
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b6d8:	78fa      	ldrb	r2, [r7, #3]
 800b6da:	6879      	ldr	r1, [r7, #4]
 800b6dc:	4613      	mov	r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4413      	add	r3, r2
 800b6e2:	00db      	lsls	r3, r3, #3
 800b6e4:	440b      	add	r3, r1
 800b6e6:	333c      	adds	r3, #60	; 0x3c
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	78fb      	ldrb	r3, [r7, #3]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	f7fe fe13 	bl	800a318 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b6f2:	bf00      	nop
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b082      	sub	sp, #8
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b708:	4618      	mov	r0, r3
 800b70a:	f7fe ff17 	bl	800a53c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b70e:	bf00      	nop
 800b710:	3708      	adds	r7, #8
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b084      	sub	sp, #16
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b71e:	2301      	movs	r3, #1
 800b720:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	2b02      	cmp	r3, #2
 800b728:	d001      	beq.n	800b72e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b72a:	f7f5 fc49 	bl	8000fc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b734:	7bfa      	ldrb	r2, [r7, #15]
 800b736:	4611      	mov	r1, r2
 800b738:	4618      	mov	r0, r3
 800b73a:	f7fe fec4 	bl	800a4c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b744:	4618      	mov	r0, r3
 800b746:	f7fe fe7d 	bl	800a444 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b74a:	bf00      	nop
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
	...

0800b754 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b762:	4618      	mov	r0, r3
 800b764:	f7fe febf 	bl	800a4e6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d005      	beq.n	800b77c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b770:	4b04      	ldr	r3, [pc, #16]	; (800b784 <HAL_PCD_SuspendCallback+0x30>)
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	4a03      	ldr	r2, [pc, #12]	; (800b784 <HAL_PCD_SuspendCallback+0x30>)
 800b776:	f043 0306 	orr.w	r3, r3, #6
 800b77a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b77c:	bf00      	nop
 800b77e:	3708      	adds	r7, #8
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	e000ed00 	.word	0xe000ed00

0800b788 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	699b      	ldr	r3, [r3, #24]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d007      	beq.n	800b7a8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b798:	4b08      	ldr	r3, [pc, #32]	; (800b7bc <HAL_PCD_ResumeCallback+0x34>)
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	4a07      	ldr	r2, [pc, #28]	; (800b7bc <HAL_PCD_ResumeCallback+0x34>)
 800b79e:	f023 0306 	bic.w	r3, r3, #6
 800b7a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b7a4:	f000 f9fa 	bl	800bb9c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7fe feae 	bl	800a510 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b7b4:	bf00      	nop
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	e000ed00 	.word	0xe000ed00

0800b7c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b7c8:	4a2b      	ldr	r2, [pc, #172]	; (800b878 <USBD_LL_Init+0xb8>)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4a29      	ldr	r2, [pc, #164]	; (800b878 <USBD_LL_Init+0xb8>)
 800b7d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b7d8:	4b27      	ldr	r3, [pc, #156]	; (800b878 <USBD_LL_Init+0xb8>)
 800b7da:	4a28      	ldr	r2, [pc, #160]	; (800b87c <USBD_LL_Init+0xbc>)
 800b7dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b7de:	4b26      	ldr	r3, [pc, #152]	; (800b878 <USBD_LL_Init+0xb8>)
 800b7e0:	2208      	movs	r2, #8
 800b7e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b7e4:	4b24      	ldr	r3, [pc, #144]	; (800b878 <USBD_LL_Init+0xb8>)
 800b7e6:	2202      	movs	r2, #2
 800b7e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b7ea:	4b23      	ldr	r3, [pc, #140]	; (800b878 <USBD_LL_Init+0xb8>)
 800b7ec:	2202      	movs	r2, #2
 800b7ee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b7f0:	4b21      	ldr	r3, [pc, #132]	; (800b878 <USBD_LL_Init+0xb8>)
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b7f6:	4b20      	ldr	r3, [pc, #128]	; (800b878 <USBD_LL_Init+0xb8>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b7fc:	4b1e      	ldr	r3, [pc, #120]	; (800b878 <USBD_LL_Init+0xb8>)
 800b7fe:	2200      	movs	r2, #0
 800b800:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b802:	4b1d      	ldr	r3, [pc, #116]	; (800b878 <USBD_LL_Init+0xb8>)
 800b804:	2200      	movs	r2, #0
 800b806:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b808:	481b      	ldr	r0, [pc, #108]	; (800b878 <USBD_LL_Init+0xb8>)
 800b80a:	f7f8 fe56 	bl	80044ba <HAL_PCD_Init>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d001      	beq.n	800b818 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b814:	f7f5 fbd4 	bl	8000fc0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b81e:	2318      	movs	r3, #24
 800b820:	2200      	movs	r2, #0
 800b822:	2100      	movs	r1, #0
 800b824:	f7fa f952 	bl	8005acc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b82e:	2358      	movs	r3, #88	; 0x58
 800b830:	2200      	movs	r2, #0
 800b832:	2180      	movs	r1, #128	; 0x80
 800b834:	f7fa f94a 	bl	8005acc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b83e:	23c0      	movs	r3, #192	; 0xc0
 800b840:	2200      	movs	r2, #0
 800b842:	2181      	movs	r1, #129	; 0x81
 800b844:	f7fa f942 	bl	8005acc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b84e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b852:	2200      	movs	r2, #0
 800b854:	2101      	movs	r1, #1
 800b856:	f7fa f939 	bl	8005acc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b860:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b864:	2200      	movs	r2, #0
 800b866:	2182      	movs	r1, #130	; 0x82
 800b868:	f7fa f930 	bl	8005acc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	2001f3a0 	.word	0x2001f3a0
 800b87c:	40005c00 	.word	0x40005c00

0800b880 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b888:	2300      	movs	r3, #0
 800b88a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b88c:	2300      	movs	r3, #0
 800b88e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b896:	4618      	mov	r0, r3
 800b898:	f7f8 fef4 	bl	8004684 <HAL_PCD_Start>
 800b89c:	4603      	mov	r3, r0
 800b89e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8a0:	7bfb      	ldrb	r3, [r7, #15]
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 f980 	bl	800bba8 <USBD_Get_USB_Status>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b084      	sub	sp, #16
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	4608      	mov	r0, r1
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	70fb      	strb	r3, [r7, #3]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	70bb      	strb	r3, [r7, #2]
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b8de:	78bb      	ldrb	r3, [r7, #2]
 800b8e0:	883a      	ldrh	r2, [r7, #0]
 800b8e2:	78f9      	ldrb	r1, [r7, #3]
 800b8e4:	f7f9 f863 	bl	80049ae <HAL_PCD_EP_Open>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 f95a 	bl	800bba8 <USBD_Get_USB_Status>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b084      	sub	sp, #16
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	460b      	mov	r3, r1
 800b90c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b90e:	2300      	movs	r3, #0
 800b910:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b912:	2300      	movs	r3, #0
 800b914:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b91c:	78fa      	ldrb	r2, [r7, #3]
 800b91e:	4611      	mov	r1, r2
 800b920:	4618      	mov	r0, r3
 800b922:	f7f9 f8aa 	bl	8004a7a <HAL_PCD_EP_Close>
 800b926:	4603      	mov	r3, r0
 800b928:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b92a:	7bfb      	ldrb	r3, [r7, #15]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 f93b 	bl	800bba8 <USBD_Get_USB_Status>
 800b932:	4603      	mov	r3, r0
 800b934:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b936:	7bbb      	ldrb	r3, [r7, #14]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	460b      	mov	r3, r1
 800b94a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b950:	2300      	movs	r3, #0
 800b952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b95a:	78fa      	ldrb	r2, [r7, #3]
 800b95c:	4611      	mov	r1, r2
 800b95e:	4618      	mov	r0, r3
 800b960:	f7f9 f96b 	bl	8004c3a <HAL_PCD_EP_SetStall>
 800b964:	4603      	mov	r3, r0
 800b966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b968:	7bfb      	ldrb	r3, [r7, #15]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f000 f91c 	bl	800bba8 <USBD_Get_USB_Status>
 800b970:	4603      	mov	r3, r0
 800b972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b974:	7bbb      	ldrb	r3, [r7, #14]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b084      	sub	sp, #16
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
 800b986:	460b      	mov	r3, r1
 800b988:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b998:	78fa      	ldrb	r2, [r7, #3]
 800b99a:	4611      	mov	r1, r2
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7f9 f9ac 	bl	8004cfa <HAL_PCD_EP_ClrStall>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a6:	7bfb      	ldrb	r3, [r7, #15]
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f000 f8fd 	bl	800bba8 <USBD_Get_USB_Status>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b9d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	da0c      	bge.n	800b9f2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b9d8:	78fb      	ldrb	r3, [r7, #3]
 800b9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9de:	68f9      	ldr	r1, [r7, #12]
 800b9e0:	1c5a      	adds	r2, r3, #1
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	00db      	lsls	r3, r3, #3
 800b9ea:	440b      	add	r3, r1
 800b9ec:	3302      	adds	r3, #2
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	e00b      	b.n	800ba0a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b9f2:	78fb      	ldrb	r3, [r7, #3]
 800b9f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9f8:	68f9      	ldr	r1, [r7, #12]
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	4413      	add	r3, r2
 800ba00:	00db      	lsls	r3, r3, #3
 800ba02:	440b      	add	r3, r1
 800ba04:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ba08:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b084      	sub	sp, #16
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba22:	2300      	movs	r3, #0
 800ba24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba26:	2300      	movs	r3, #0
 800ba28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba30:	78fa      	ldrb	r2, [r7, #3]
 800ba32:	4611      	mov	r1, r2
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7f8 ff95 	bl	8004964 <HAL_PCD_SetAddress>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba3e:	7bfb      	ldrb	r3, [r7, #15]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f000 f8b1 	bl	800bba8 <USBD_Get_USB_Status>
 800ba46:	4603      	mov	r3, r0
 800ba48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	607a      	str	r2, [r7, #4]
 800ba5e:	603b      	str	r3, [r7, #0]
 800ba60:	460b      	mov	r3, r1
 800ba62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba64:	2300      	movs	r3, #0
 800ba66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba72:	7af9      	ldrb	r1, [r7, #11]
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	f7f9 f89c 	bl	8004bb4 <HAL_PCD_EP_Transmit>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba80:	7dfb      	ldrb	r3, [r7, #23]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f000 f890 	bl	800bba8 <USBD_Get_USB_Status>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3718      	adds	r7, #24
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b086      	sub	sp, #24
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	60f8      	str	r0, [r7, #12]
 800ba9e:	607a      	str	r2, [r7, #4]
 800baa0:	603b      	str	r3, [r7, #0]
 800baa2:	460b      	mov	r3, r1
 800baa4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baa6:	2300      	movs	r3, #0
 800baa8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bab4:	7af9      	ldrb	r1, [r7, #11]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	f7f9 f826 	bl	8004b0a <HAL_PCD_EP_Receive>
 800babe:	4603      	mov	r3, r0
 800bac0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bac2:	7dfb      	ldrb	r3, [r7, #23]
 800bac4:	4618      	mov	r0, r3
 800bac6:	f000 f86f 	bl	800bba8 <USBD_Get_USB_Status>
 800baca:	4603      	mov	r3, r0
 800bacc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bace:	7dbb      	ldrb	r3, [r7, #22]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3718      	adds	r7, #24
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	460b      	mov	r3, r1
 800bae2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800baea:	78fa      	ldrb	r2, [r7, #3]
 800baec:	4611      	mov	r1, r2
 800baee:	4618      	mov	r0, r3
 800baf0:	f7f9 f848 	bl	8004b84 <HAL_PCD_EP_GetRxCount>
 800baf4:	4603      	mov	r3, r0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
	...

0800bb00 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bb0c:	78fb      	ldrb	r3, [r7, #3]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d002      	beq.n	800bb18 <HAL_PCDEx_LPM_Callback+0x18>
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d013      	beq.n	800bb3e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bb16:	e023      	b.n	800bb60 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	699b      	ldr	r3, [r3, #24]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d007      	beq.n	800bb30 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bb20:	f000 f83c 	bl	800bb9c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb24:	4b10      	ldr	r3, [pc, #64]	; (800bb68 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb26:	691b      	ldr	r3, [r3, #16]
 800bb28:	4a0f      	ldr	r2, [pc, #60]	; (800bb68 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb2a:	f023 0306 	bic.w	r3, r3, #6
 800bb2e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fe fcea 	bl	800a510 <USBD_LL_Resume>
    break;
 800bb3c:	e010      	b.n	800bb60 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fe fcce 	bl	800a4e6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	699b      	ldr	r3, [r3, #24]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d005      	beq.n	800bb5e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb52:	4b05      	ldr	r3, [pc, #20]	; (800bb68 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	4a04      	ldr	r2, [pc, #16]	; (800bb68 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb58:	f043 0306 	orr.w	r3, r3, #6
 800bb5c:	6113      	str	r3, [r2, #16]
    break;
 800bb5e:	bf00      	nop
}
 800bb60:	bf00      	nop
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	e000ed00 	.word	0xe000ed00

0800bb6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb74:	4b03      	ldr	r3, [pc, #12]	; (800bb84 <USBD_static_malloc+0x18>)
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	370c      	adds	r7, #12
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	2001d690 	.word	0x2001d690

0800bb88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]

}
 800bb90:	bf00      	nop
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bba0:	f7f4 fddc 	bl	800075c <SystemClock_Config>
}
 800bba4:	bf00      	nop
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bbb6:	79fb      	ldrb	r3, [r7, #7]
 800bbb8:	2b03      	cmp	r3, #3
 800bbba:	d817      	bhi.n	800bbec <USBD_Get_USB_Status+0x44>
 800bbbc:	a201      	add	r2, pc, #4	; (adr r2, 800bbc4 <USBD_Get_USB_Status+0x1c>)
 800bbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc2:	bf00      	nop
 800bbc4:	0800bbd5 	.word	0x0800bbd5
 800bbc8:	0800bbdb 	.word	0x0800bbdb
 800bbcc:	0800bbe1 	.word	0x0800bbe1
 800bbd0:	0800bbe7 	.word	0x0800bbe7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbd8:	e00b      	b.n	800bbf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	73fb      	strb	r3, [r7, #15]
    break;
 800bbde:	e008      	b.n	800bbf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	73fb      	strb	r3, [r7, #15]
    break;
 800bbe4:	e005      	b.n	800bbf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	73fb      	strb	r3, [r7, #15]
    break;
 800bbea:	e002      	b.n	800bbf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bbec:	2303      	movs	r3, #3
 800bbee:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf0:	bf00      	nop
  }
  return usb_status;
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <__libc_init_array>:
 800bc00:	b570      	push	{r4, r5, r6, lr}
 800bc02:	4d0d      	ldr	r5, [pc, #52]	; (800bc38 <__libc_init_array+0x38>)
 800bc04:	4c0d      	ldr	r4, [pc, #52]	; (800bc3c <__libc_init_array+0x3c>)
 800bc06:	1b64      	subs	r4, r4, r5
 800bc08:	10a4      	asrs	r4, r4, #2
 800bc0a:	2600      	movs	r6, #0
 800bc0c:	42a6      	cmp	r6, r4
 800bc0e:	d109      	bne.n	800bc24 <__libc_init_array+0x24>
 800bc10:	4d0b      	ldr	r5, [pc, #44]	; (800bc40 <__libc_init_array+0x40>)
 800bc12:	4c0c      	ldr	r4, [pc, #48]	; (800bc44 <__libc_init_array+0x44>)
 800bc14:	f000 f894 	bl	800bd40 <_init>
 800bc18:	1b64      	subs	r4, r4, r5
 800bc1a:	10a4      	asrs	r4, r4, #2
 800bc1c:	2600      	movs	r6, #0
 800bc1e:	42a6      	cmp	r6, r4
 800bc20:	d105      	bne.n	800bc2e <__libc_init_array+0x2e>
 800bc22:	bd70      	pop	{r4, r5, r6, pc}
 800bc24:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc28:	4798      	blx	r3
 800bc2a:	3601      	adds	r6, #1
 800bc2c:	e7ee      	b.n	800bc0c <__libc_init_array+0xc>
 800bc2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc32:	4798      	blx	r3
 800bc34:	3601      	adds	r6, #1
 800bc36:	e7f2      	b.n	800bc1e <__libc_init_array+0x1e>
 800bc38:	0800be28 	.word	0x0800be28
 800bc3c:	0800be28 	.word	0x0800be28
 800bc40:	0800be28 	.word	0x0800be28
 800bc44:	0800be2c 	.word	0x0800be2c

0800bc48 <__itoa>:
 800bc48:	1e93      	subs	r3, r2, #2
 800bc4a:	2b22      	cmp	r3, #34	; 0x22
 800bc4c:	b510      	push	{r4, lr}
 800bc4e:	460c      	mov	r4, r1
 800bc50:	d904      	bls.n	800bc5c <__itoa+0x14>
 800bc52:	2300      	movs	r3, #0
 800bc54:	700b      	strb	r3, [r1, #0]
 800bc56:	461c      	mov	r4, r3
 800bc58:	4620      	mov	r0, r4
 800bc5a:	bd10      	pop	{r4, pc}
 800bc5c:	2a0a      	cmp	r2, #10
 800bc5e:	d109      	bne.n	800bc74 <__itoa+0x2c>
 800bc60:	2800      	cmp	r0, #0
 800bc62:	da07      	bge.n	800bc74 <__itoa+0x2c>
 800bc64:	232d      	movs	r3, #45	; 0x2d
 800bc66:	700b      	strb	r3, [r1, #0]
 800bc68:	4240      	negs	r0, r0
 800bc6a:	2101      	movs	r1, #1
 800bc6c:	4421      	add	r1, r4
 800bc6e:	f000 f825 	bl	800bcbc <__utoa>
 800bc72:	e7f1      	b.n	800bc58 <__itoa+0x10>
 800bc74:	2100      	movs	r1, #0
 800bc76:	e7f9      	b.n	800bc6c <__itoa+0x24>

0800bc78 <itoa>:
 800bc78:	f7ff bfe6 	b.w	800bc48 <__itoa>

0800bc7c <memset>:
 800bc7c:	4402      	add	r2, r0
 800bc7e:	4603      	mov	r3, r0
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d100      	bne.n	800bc86 <memset+0xa>
 800bc84:	4770      	bx	lr
 800bc86:	f803 1b01 	strb.w	r1, [r3], #1
 800bc8a:	e7f9      	b.n	800bc80 <memset+0x4>

0800bc8c <strcat>:
 800bc8c:	b510      	push	{r4, lr}
 800bc8e:	4602      	mov	r2, r0
 800bc90:	7814      	ldrb	r4, [r2, #0]
 800bc92:	4613      	mov	r3, r2
 800bc94:	3201      	adds	r2, #1
 800bc96:	2c00      	cmp	r4, #0
 800bc98:	d1fa      	bne.n	800bc90 <strcat+0x4>
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bca0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bca4:	2a00      	cmp	r2, #0
 800bca6:	d1f9      	bne.n	800bc9c <strcat+0x10>
 800bca8:	bd10      	pop	{r4, pc}

0800bcaa <strcpy>:
 800bcaa:	4603      	mov	r3, r0
 800bcac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcb0:	f803 2b01 	strb.w	r2, [r3], #1
 800bcb4:	2a00      	cmp	r2, #0
 800bcb6:	d1f9      	bne.n	800bcac <strcpy+0x2>
 800bcb8:	4770      	bx	lr
	...

0800bcbc <__utoa>:
 800bcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcbe:	4c1f      	ldr	r4, [pc, #124]	; (800bd3c <__utoa+0x80>)
 800bcc0:	b08b      	sub	sp, #44	; 0x2c
 800bcc2:	4605      	mov	r5, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	466e      	mov	r6, sp
 800bcc8:	f104 0c20 	add.w	ip, r4, #32
 800bccc:	6820      	ldr	r0, [r4, #0]
 800bcce:	6861      	ldr	r1, [r4, #4]
 800bcd0:	4637      	mov	r7, r6
 800bcd2:	c703      	stmia	r7!, {r0, r1}
 800bcd4:	3408      	adds	r4, #8
 800bcd6:	4564      	cmp	r4, ip
 800bcd8:	463e      	mov	r6, r7
 800bcda:	d1f7      	bne.n	800bccc <__utoa+0x10>
 800bcdc:	7921      	ldrb	r1, [r4, #4]
 800bcde:	7139      	strb	r1, [r7, #4]
 800bce0:	1e91      	subs	r1, r2, #2
 800bce2:	6820      	ldr	r0, [r4, #0]
 800bce4:	6038      	str	r0, [r7, #0]
 800bce6:	2922      	cmp	r1, #34	; 0x22
 800bce8:	f04f 0100 	mov.w	r1, #0
 800bcec:	d904      	bls.n	800bcf8 <__utoa+0x3c>
 800bcee:	7019      	strb	r1, [r3, #0]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	b00b      	add	sp, #44	; 0x2c
 800bcf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcf8:	1e58      	subs	r0, r3, #1
 800bcfa:	4684      	mov	ip, r0
 800bcfc:	fbb5 f7f2 	udiv	r7, r5, r2
 800bd00:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800bd04:	fb02 5617 	mls	r6, r2, r7, r5
 800bd08:	4476      	add	r6, lr
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bd10:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bd14:	462e      	mov	r6, r5
 800bd16:	42b2      	cmp	r2, r6
 800bd18:	f101 0101 	add.w	r1, r1, #1
 800bd1c:	463d      	mov	r5, r7
 800bd1e:	d9ed      	bls.n	800bcfc <__utoa+0x40>
 800bd20:	2200      	movs	r2, #0
 800bd22:	545a      	strb	r2, [r3, r1]
 800bd24:	1919      	adds	r1, r3, r4
 800bd26:	1aa5      	subs	r5, r4, r2
 800bd28:	42aa      	cmp	r2, r5
 800bd2a:	dae2      	bge.n	800bcf2 <__utoa+0x36>
 800bd2c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bd30:	780e      	ldrb	r6, [r1, #0]
 800bd32:	7006      	strb	r6, [r0, #0]
 800bd34:	3201      	adds	r2, #1
 800bd36:	f801 5901 	strb.w	r5, [r1], #-1
 800bd3a:	e7f4      	b.n	800bd26 <__utoa+0x6a>
 800bd3c:	0800bdf8 	.word	0x0800bdf8

0800bd40 <_init>:
 800bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd42:	bf00      	nop
 800bd44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd46:	bc08      	pop	{r3}
 800bd48:	469e      	mov	lr, r3
 800bd4a:	4770      	bx	lr

0800bd4c <_fini>:
 800bd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd4e:	bf00      	nop
 800bd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd52:	bc08      	pop	{r3}
 800bd54:	469e      	mov	lr, r3
 800bd56:	4770      	bx	lr
